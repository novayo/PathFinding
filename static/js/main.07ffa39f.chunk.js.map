{"version":3,"sources":["Frontend/HeaderHelper/Elements/Logo.js","Frontend/TableHelper/TableIndex.js","Core/index.js","Frontend/HeaderHelper/HeaderHepler/Colored.js","Frontend/TableHelper/SetTable.js","Frontend/TableHelper/WhichComp.js","Frontend/TableHelper/Animation.js","Core/Queue.js","Core/Distance.js","Backend/Algorithms/BFS.js","Backend/Algorithms/DFS.js","Core/PriorityQueue.js","Backend/Algorithms/Dijkstra.js","Backend/Algorithms/Dijkstra_old.js","Frontend/TableHelper/UpdateTable.js","Frontend/TableHelper/ButtonEvent.js","Frontend/HeaderHelper/Elements/DropdownAlgorithm.js","Backend/Maze/Simple_Stair_Pattern.js","Backend/Maze/Core.js","Backend/Maze/Binary_Tree.js","Backend/Maze/RecursiveDivision.js","Backend/Maze/Kruskal.js","Backend/Maze/Basic_Random_Maze.js","Backend/Maze/Basic_Weight_Maze.js","Backend/Maze/Prim.js","Backend/Maze/Eller.js","Frontend/HeaderHelper/Elements/DropdownMaze.js","Frontend/HeaderHelper/Elements/NavLink.js","Frontend/HeaderHelper/HeaderHepler/Colored_AddButton.js","Frontend/HeaderHelper/Elements/NavAddBomb.js","Core/IsMount.js","Frontend/HeaderHelper/Elements/NavButton.js","Frontend/HeaderHelper/Elements/DropdownSpeed.js","Frontend/HeaderHelper/Elements/Info.js","Frontend/HeaderHelper/Elements/AlgorithmDescriptor.js","Frontend/HeaderHelper/Elements/IntroductionModal.js","Frontend/HeaderHelper/Elements/Email.js","Frontend/HeaderHelper/HeaderHepler/PC.js","Frontend/HeaderHelper/HeaderHepler/Mobile.js","Frontend/Header.js","Frontend/TableHelper/RestrictComp.js","Frontend/TableHelper/KeyboardEvent.js","Frontend/TableHelper/MouseEvent.js","Frontend/TableHelper/TableUI.js","Frontend/TableHelper/WeightModal.js","Frontend/Table.js","App.js","reportWebVitals.js","index.js"],"names":["logo","Navbar","Brand","href","className","size","navigator","userAgent","match","tableVar","rowSize","adjust","Math","floor","window","innerHeight","colSize","screen","availWidth","id","newId","originPos","weightValueRange","componentKind","add","wall","weight","weightSearchBomb","weightSearch","weightPath","start","startSearchBomb","startSearch","startPath","end","endSearchBomb","endSearch","endPath","bomb","bombSearchBomb","bombSearch","bombPath","search","searchBomb","path","weightStatic","weightSearchBombStatic","weightSearchStatic","weightPathStatic","searchStatic","searchBombStatic","pathStatic","pathHead","pathHeadLeft","pathHeadRight","pathHeadUp","pathHeadDown","background","keyboardSupport","plus","sub","w","down","synchronize","update","animation","algorithm","sysStatus","touchContext","createContext","touchInitial","touchReducer","state","action","under","moveContext","moveReducer","updateContext","updateReducer","weightValueContext","weightValueInitial","value","status","weightValueReducer","position","weightValue","sysStatusContext","React","initialsysStatus","sysStatusReducer","animationStatusContext","animationStatusInitial","animationStatusReducer","bombContext","bombInitial","bombReducer","speedContext","speedInitial","speedReducer","algorithmContext","algorithmReducer","mazeContext","mazeReducer","Colored","useContext","useState","isHover","setIsHover","setClassName","get","setTable","index","kind","setPosition","parseInt","document","getElementById","toString","pos","addComponentKind","WhichComponent","touch","type","rKind","WhichComponentSame","StartEndBombWeight","stopStatus","pathDirection","maze","mazeResult","animationStatus","complete","resetAnimation","searchAnimation_pos","this","undefined","className1","className2","newid","d","items","container","length","shift","searchAnimation_search","isWall","isPath","getItems","getClassName","searchAnimation_bomb","searchAnimation_path","direction","SearchAnimation","speed","sysStatusFunction","updateFunction","animationObj","positions","unshift","searchAnimation","setInterval","clearInterval","runAnimation","FinalAnimation","i","j","MazeAnimation","mazeAnimation","FinalMazeAnimation","Queue","queue","val","push","isEmpty","Distance","dict","max_d","max","endPos","shortest","shortestDirection","x","y","visited","Set","curD","Infinity","curX","curY","dir","has","BFS","startCallback","times","retSearchPath","retBombPath","retShortestPath","retDirection","searchPath","distance","startPos","set","append","getLength","node","popleft","nextD","pop","concat","getShortestPath","splice","DFS","DoDFS","clear","tmp","tmp2","PriorityQueue","arr","score","heuristic","HeapifyAll","n","smallest","left","right","Heapify","DoDijkstra","whichAlgo","table","unvisited","Push","curShortestPath","which","actualEnd","isFoundEnd","Length","curPos","GetClosestNode","forEach","nextPos","idx","total","GetScore","pow","GetHeuristic","abs","Pop","Dijkstra","DoDijkstra_old","strategy","retPos","retIndex","Dijkstra_old","UpdateTable","Start","ClearPath","ButtonEvent","sysSpeed","CheckStopStatus","ClearWalls","checkStopStatus","Object","keys","split","ClearWeights","event","reset","Addbomb","RemoveBomb","ClearBoard","CreateMaze","DropdownAlgorithm","algoContext","toggleHandler","buttonEvent","Nav","Item","NavDropdown","xs","title","onSelect","eventKey","DropdownAlgorithmHandler","onMouseEnter","onMouseLeave","Divider","Simple_Stair_Pattern","walls","towardUp","CreateAround","wallSet","Random","random","RandomEven","Binary_Tree","console","log","DoRecursiveDivision","width","height","boolDirection","door","randomX","_y","randomY","_x","RecursiveDivision","specialNodes","up","validWall","blockDirection","removedWallIndex","array","target","IndexOf","FindRoot","parentArray","Union","rankArray","index1","index3","Kruskal","parent","rank","x1","x2","xHead","yHead","Basic_Random_Maze","Basic_Weight_Maze","Prim","startNode","randomIndex","availableDirection","Eller","haveBuildedPath","buildWall","buildPath","DropdownMaze","speedStatus","mazeStatus","NavLink","names","handlers","whichHandler","setWhichHandler","Link","onClick","preWhichHandler","algoStatus","NavAddBomb","isMount","useRef","useEffect","current","IsMount","NavButton","buttonName","setButtonName","myVariant","setMyVariant","name","func2","func1","DropdownSpeed","setTitle","Info","bannedBomb","setBannedBomb","bannedBFSDFS","setBannedBFSDFS","AlgorithmDescriptor","algorithmName","setAlgorithmName","discription1","setDiscription1","discription2","setDiscription2","animationContext","mContext","mazeName","setMazeName","m_discription1","setMDiscription1","algoName","d1","d2","mName","IntroductionModal","pages","setPages","show","setShow","language","setLanguage","checked","setChecked","maxPages","data","Modal","backdrop","centered","dialogClassName","Body","Footer","Button","variant","onlabel","onstyle","offlabel","offstyle","style","onChange","pre","prePage","Email","handleClose","data-toggle","data-placement","data-original-title","src","alt","onHide","onSubmit","e","preventDefault","emailjs","sendForm","then","result","text","error","htmlFor","required","PC","collapseOnSelect","expand","Logo","Toggle","aria-controls","Collapse","Mobile","Header","RestrictComp","KeyboardEvent","key","MouseEvent","move","addEventListener","MouseDownHandler","whichComponent","MouseUpHandler","OnMouseEnterHanlder","whichOldComponent","whichNewComponent","TableUI","row","Array","from","col","mouesEvent","createTable","map","rowIndex","colIndex","onMouseUp","onMouseDown","align","border","cellSpacing","WeightModal","initShow","setInitShow","setTimeout","Row","Col","ProgressBar","now","label","min","Table","Spinner","App","useReducer","curAlgorithm","setCurAlgorithm","curSysStatus","setCurSysStatus","curBomb","setCurBomb","curSpeed","setCurSpeed","setTouch","setMove","setUpdate","setWeightValue","setAnimation","setMaze","Provider","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render"],"mappings":"m0IAmBeA,MAhBf,WACI,OACI,cAACC,EAAA,EAAOC,MAAR,CAAcC,KAAK,gBAAgBC,UAAU,cAA7C,0B,gBCDFC,EAAO,WAET,OAAIC,UAAUC,UAAUC,MAAM,WACnB,GAEA,IAYFC,EAAW,CACpBC,QAASC,EAAOC,KAAKC,OAAOC,OAAOC,aAR/BT,UAAUC,UAAUC,MAAM,WACnB,IAEA,MAKwDH,MACnEW,QAASL,EAAOC,KAAKC,MAAMC,OAAOG,OAAOC,WAAab,MACtDA,KAAMA,IAENc,GAAI,EACJC,MAAO,GAGEC,EACK,CAACV,EAAOC,KAAKC,MAAMJ,EAASC,QAAU,IAAKC,EAAOC,KAAKC,MAAMJ,EAASO,QAAU,KADrFK,EAEG,CAACV,EAAOC,KAAKC,MAAMJ,EAASC,QAAU,IAAKC,EAAOF,EAASO,QAAUJ,KAAKC,MAAMJ,EAASO,QAAU,KAFtGK,EAGI,CAACV,EAAOC,KAAKC,MAAMJ,EAASC,QAAU,IAAKC,EAAOC,KAAKC,MAAMJ,EAASO,QAAU,KAIpFM,EACJ,GADIA,EAEJ,EAFIA,EAGH,GAHGA,EAIC,EAJDA,EAKA,IAIAC,EAAgB,CACzBC,IAAK,OACLC,KAAM,OAINC,OAAQ,SACRC,iBAAkB,mBAClBC,aAAc,eACdC,WAAY,aAEZC,MAAO,QACPC,gBAAiB,kBACjBC,YAAa,cACbC,UAAW,YAEXC,IAAK,MACLC,cAAe,gBACfC,UAAW,YACXC,QAAS,UAETC,KAAM,OACNC,eAAgB,iBAChBC,WAAY,aACZC,SAAU,WAEVC,OAAQ,SACRC,WAAY,aACZC,KAAM,OAINC,aAAc,eACdC,uBAAwB,yBACxBC,mBAAoB,qBACpBC,iBAAkB,mBAElBC,aAAc,eACdC,iBAAkB,mBAClBC,WAAY,aAIZC,SAAU,WACVC,aAAc,eACdC,cAAe,gBACfC,WAAY,aACZC,aAAc,eAEdC,WAAY,cAIHC,EAAkB,CAC3BC,KAAM,IACNC,IAAK,IAELC,EAAG,IACHC,MAAM,GAGGC,EAAc,CACvBC,QAAQ,EACRC,UAAW,YAEXC,UAAW,GACXC,UAAW,QAIFC,EAAeC,0BACfC,EAAe,CAAExC,MAAOP,EAAckC,WAAYvB,IAAKX,EAAckC,WAAYnB,KAAMf,EAAckC,YACrGc,EAAe,SAACC,EAAOC,GAChC,OAAQA,EAAOlD,eACX,KAAKA,EAAcO,MACf,OAAO,2BAAK0C,GAAZ,IAAmB1C,MAAO2C,EAAOC,QACrC,KAAKnD,EAAcW,IACf,OAAO,2BAAKsC,GAAZ,IAAmBtC,IAAKuC,EAAOC,QACnC,KAAKnD,EAAce,KACf,OAAO,2BAAKkC,GAAZ,IAAmBlC,KAAMmC,EAAOC,QACpC,QACI,OAAOJ,IAKNK,EAAcN,0BAEdO,EAAc,SAACJ,EAAOC,GAC/B,OAAQA,GACJ,KAAKlD,EAAcO,MAEnB,KAAKP,EAAcW,IAEnB,KAAKX,EAAce,KAEnB,KAAKf,EAAcE,KAEnB,KAAKF,EAAcG,OACf,OAAO+C,EACX,QACI,MAde,KAmBdI,EAAgBR,0BAEhBS,EAAgB,SAACN,EAAOC,GACjC,OAAQA,GACJ,IAAK,OACD,OAAO,EACX,IAAK,QACD,OAAO,EACX,QACI,OARiB,QAahBM,EAAqBV,0BACrBW,EAAqB,CAAEC,MAAO3D,EAAuB4D,QAAQ,GAC7DC,EAAqB,SAACX,EAAOC,GACtC,OAAQA,GACJ,IAAK,IAED,OADAW,EAASC,YAAcb,EAAMS,MAAQ3D,EAC9B,CAAE2D,MAAOG,EAASC,YAAaH,QAAQ,GAClD,IAAK,IAED,OADAE,EAASC,YAAcb,EAAMS,MAAQ3D,EAC9B,CAAE2D,MAAOG,EAASC,YAAaH,QAAQ,GAClD,KAAK,EACD,MAAO,CAAED,MAAOG,EAASC,YAAaH,QAAQ,GAClD,KAAK,EACD,MAAO,CAAED,MAAOG,EAASC,YAAaH,QAAQ,GAClD,QACI,OAAOF,IAKZ,SAASrE,EAAON,GACnB,OAAIA,EAAO,IAAM,EACNA,EAAO,EAEPA,EC1LR,IAAI+E,EAAW,CAClBtD,MAAO,CAACnB,EAAOC,KAAKC,MAAMJ,EAASC,QAAU,IAAKC,EAAOC,KAAKC,MAAMJ,EAASO,QAAU,KACvFkB,IAAK,CAACvB,EAAOC,KAAKC,MAAMJ,EAASC,QAAU,IAAKC,EAAOF,EAASO,QAAUJ,KAAKC,MAAMJ,EAASO,QAAU,KACxGsB,MAAM,EACNb,KAAM,GACNC,OAAQ,GACR2D,YAAa/D,EACbZ,QAASD,EAASC,QAClBM,QAASP,EAASO,SAKTsE,EAAmBC,IAAMlB,gBACzBmB,EAAmB,UACnBC,EAAmB,SAACjB,EAAOC,GACpC,OAAQA,GACJ,IAAK,OACD,MAAO,OACX,IAAK,OACD,MAAO,OACX,IAAK,UACD,MAAO,UACX,IAAK,UACD,MAAO,UACX,QACI,OAAOe,IAKNE,EAAyBH,IAAMlB,gBAC/BsB,EAAyB,YACzBC,EAAyB,SAACpB,EAAOC,GAC1C,OAAQA,GACJ,IAAK,OACD,MAAO,OACX,IAAK,YACD,MAAO,YACX,QACI,OAAOkB,IAKNE,EAAcN,IAAMlB,gBACpByB,GAAc,EACdC,EAAc,SAACvB,EAAOC,GAC/B,OAAQA,GACJ,IAAK,OACD,OAAO,EACX,IAAK,QACD,OAAO,EACX,QACI,OAAOqB,IAKNE,EAAeT,IAAMlB,gBACrB4B,EAAe,CAAC,OAAQ,IACxBC,EAAe,SAAC1B,EAAOC,GAChC,OAAQA,GACJ,IAAK,OACD,MAAO,CAAC,OAAQ,IACpB,IAAK,UACD,MAAO,CAAC,UAAW,KACvB,IAAK,OACD,MAAO,CAAC,OAAQ,KACpB,QACI,OAAOqB,IAKNK,EAAmBZ,IAAMlB,gBAEzB+B,EAAmB,SAAC5B,EAAOC,GACpC,OAAQA,GACJ,IAAK,qBACD,MAAO,qBACX,IAAK,kBACD,MAAO,kBACX,IAAK,8BACD,MAAO,8BACX,IAAK,kBACD,MAAO,kBACX,IAAK,6BACD,MAAO,6BACX,IAAK,+BACD,MAAO,+BACX,IAAK,0BACD,MAAO,0BACX,IAAK,wBACD,MAAO,wBACX,IAAK,yBACD,MAAO,yBACX,QACI,MAtBoB,KA2BnB4B,EAAcd,IAAMlB,gBAEpBiC,GAAc,SAAC9B,EAAOC,GAC/B,OAAQA,GACJ,IAAK,0BACD,MAAO,0BACX,IAAK,mCACD,MAAO,mCACX,IAAK,qCACD,MAAO,qCACX,IAAK,oBACD,MAAO,oBACX,IAAK,yBACD,MAAO,yBACX,IAAK,4BACD,MAAO,4BACX,IAAK,mBACD,MAAO,mBACX,IAAK,eACD,MAAO,eACX,IAAK,YACD,MAAO,YACX,IAAK,aACD,MAAO,aACX,QACI,MApDoB,KCtDjB8B,GAtBC,WACZ,IAAMpC,EAAYqC,qBAAWlB,GADX,EAEYmB,oBAAS,GAFrB,mBAEXC,EAFW,KAEFC,EAFE,OAGgBF,mBAAS,oBAHzB,mBAGXrG,EAHW,KAGAwG,EAHA,KAmBlB,MAAO,CAACxG,EAdc,WACdsG,GACAE,EAAa,oBACbD,GAAW,KAEW,SAAlBxC,EAAU0C,KAAoC,SAAlB1C,EAAU0C,IACtCD,EAAa,gBAEbA,EAAa,kBAEjBD,GAAW,O,oCCfhB,SAASG,GAASC,EAAOC,GAA2B,IAArBC,EAAoB,wDAMtD,GAJoB,kBAAVF,IACNA,EAAQG,SAASH,EAAM,IAAMtG,EAASO,QAAUkG,SAASH,EAAM,OAGhEA,EAAQ,KAIXI,SAASC,eAAeL,EAAMM,YAAYjH,UAAY4G,EAEnDC,GAAY,CAEX,IAAMK,EAAM,CAAC1G,KAAKC,MAAMkG,EAAQtG,EAASO,SAAU+F,EAAQtG,EAASO,SAEjEoE,EAAS3D,KAAK6F,UACNlC,EAAS3D,KAAK6F,GAChBlC,EAAS1D,OAAO4F,WACdlC,EAAS1D,OAAO4F,GAGxBN,IAASzF,EAAcE,KACtB2D,EAAS3D,KAAK6F,IAAO,EAChBN,IAASzF,EAAcG,OAC5B0D,EAAS1D,OAAO4F,IAAO,EAClBN,IAASzF,EAAcO,MAC5BsD,EAAStD,MAAQwF,EACZN,IAASzF,EAAcW,IAC5BkD,EAASlD,IAAMoF,EACVN,IAASzF,EAAce,KAC5B8C,EAAS9C,KAAOgF,EACXN,IAASzF,EAAckC,YACzB2B,EAAS9C,KAAK,KAAOgF,EAAI,IAAMlC,EAAS9C,KAAK,KAAOgF,EAAI,KACvDlC,EAAS9C,MAAO,IClChC,SAASiF,GAAiBP,GACtB,OAAQA,GACJ,KAAKzF,EAAcC,IACf,OAAOD,EAAckC,WACzB,QACI,OAAOlC,EAAcC,KAI1B,SAASgG,GAAerG,EAAIsG,GAE/B,IAAIH,EAAMnG,EAMV,MAJiB,kBAAPA,IACNmG,EAAM,CAAC1G,KAAKC,MAAMqG,SAAS/F,GAAMV,EAASO,SAAUkG,SAAS/F,GAAMV,EAASO,UAG7EoE,EAAStD,MAAM,KAAOwF,EAAI,IAAMlC,EAAStD,MAAM,KAAOwF,EAAI,GAClD,CAACN,KAAMzF,EAAcO,MAAO2F,MAAOA,EAAMZ,IAAI/E,MAAO4F,KAAM,GAC5DtC,EAASlD,IAAI,KAAOoF,EAAI,IAAMlC,EAASlD,IAAI,KAAOoF,EAAI,GACpD,CAACN,KAAMzF,EAAcW,IAAKuF,MAAOA,EAAMZ,IAAI3E,IAAKwF,KAAM,IACtC,IAAlBtC,EAAS9C,MAAkB8C,EAAS9C,KAAK,KAAOgF,EAAI,IAAMlC,EAAS9C,KAAK,KAAOgF,EAAI,GACjF,CAACN,KAAMzF,EAAce,KAAMmF,MAAOA,EAAMZ,IAAIvE,KAAMoF,KAAM,GAC1DtC,EAAS3D,KAAK6F,GACZ,CAACN,KAAMzF,EAAcE,KAAMkG,MAAOJ,GAAiBhG,EAAcE,MAAOiG,KAAM,GAChFtC,EAAS1D,OAAO4F,GACd,CAACN,KAAMzF,EAAcG,OAAQiG,MAAOJ,GAAiBhG,EAAcG,QAASgG,KAAM,GAElF,CAACV,KAAMzF,EAAckC,WAAYkE,MAAOpG,EAAcC,IAAKkG,KAAM,GAMzE,SAASE,GAAmBzG,GAE/B,IAAImG,EAAMnG,EAMV,MAJiB,kBAAPA,GAAiC,kBAAPA,IAChCmG,EAAM,CAAC1G,KAAKC,MAAMqG,SAAS/F,GAAMV,EAASO,SAAUkG,SAAS/F,GAAMV,EAASO,UAG7EoE,EAAStD,MAAM,KAAOwF,EAAI,IAAMlC,EAAStD,MAAM,KAAOwF,EAAI,GAClD,EACFlC,EAASlD,IAAI,KAAOoF,EAAI,IAAMlC,EAASlD,IAAI,KAAOoF,EAAI,GACpD,GACgB,IAAlBlC,EAAS9C,MAAkB8C,EAAS9C,KAAK,KAAOgF,EAAI,IAAMlC,EAAS9C,KAAK,KAAOgF,EAAI,GACjF,EACFlC,EAAS1D,OAAO4F,GACd,EACFlC,EAAS3D,KAAK6F,GACZ,EAEA,EAKR,SAASO,GAAmBH,EAAM5F,EAAOI,EAAKI,EAAMZ,GAEvD,OAAQgG,GACJ,KAAK,EACD,OAAO5F,EACX,KAAK,EACD,OAAOI,EACX,KAAK,EACD,OAAOI,EACX,KAAK,EACD,OAAOZ,EACX,QACI,OAAO,MCpEZ,IAAMoG,GAAa,CACtBpF,OAAQ,GACRJ,KAAM,GACNM,KAAM,GACNmF,cAAe,GAEf7D,UAAW,GAEX8D,KAAM,EACNC,WAAY,GAEZC,iBAAiB,EACjBC,UAAU,GAGP,SAASC,KACZN,GAAWpF,OAAS,GACpBoF,GAAWxF,KAAO,GAClBwF,GAAWlF,KAAO,GAClBkF,GAAWC,cAAgB,GAC3BD,GAAWE,KAAO,EAElBF,GAAWI,iBAAkB,EAC7BJ,GAAWK,UAAW,E,IAKpBE,G,WACF,aAAc,qBACVC,KAAKlI,eAAYmI,EACjBD,KAAKE,gBAAaD,EAClBD,KAAKG,gBAAaF,EAElBD,KAAKnH,QAAKoH,EACVD,KAAKI,WAAQH,EACbD,KAAKK,OAAIJ,EACTD,KAAKM,WAAQL,E,sDAGRM,GACFA,EAAUC,OAAS,GAClBR,KAAKM,MAAQ,CAACC,EAAU,GAAGE,cACNR,IAAlBD,KAAKM,MAAM,IAAmBC,EAAUE,SAE3CT,KAAKM,MAAQ,MAACL,K,uFAQpBS,G,+KACW7H,GAGT,OAFAmH,KAAKE,WAAcS,GAAO9H,IAAO+H,GAAO/H,GAAOI,EAAcmB,OAASmF,GAAmBD,GAAmBzG,GAAKI,EAAcS,YAAaT,EAAca,UAAWb,EAAciB,WAAYjB,EAAcK,cAC7M0G,KAAKG,WAAcQ,GAAO9H,IAAO+H,GAAO/H,GAAOI,EAAcoB,WAAakF,GAAmBD,GAAmBzG,GAAKI,EAAcQ,gBAAiBR,EAAcY,cAAeZ,EAAciB,WAAYjB,EAAcI,kBAClN2G,KAAKlI,WAA+B,IAAlBgF,EAAS9C,KAAkBgG,KAAKE,WAAaF,KAAKG,a,mCAGlEI,GAIT,OAHAP,KAAKa,SAASN,GAEdP,KAAKnH,GAAKmH,KAAKM,MAAM,QACNL,IAAZD,KAAKnH,IAAyC,IAArB0H,EAAUC,SAItCR,KAAKc,aAAad,KAAKnH,IACvB2F,GAASwB,KAAKnH,GAAImH,KAAKlI,YAChB,O,GAjBsBiI,IAsB/BgB,G,+KACWlI,GACTmH,KAAKlI,UAAa6I,GAAO9H,IAAO+H,GAAO/H,GAAOI,EAAcmB,OAASmF,GAAmBD,GAAmBzG,GAAKI,EAAcS,YAAaT,EAAca,UAAWb,EAAciB,WAAYjB,EAAcK,gB,mCAGnMiH,GAIT,OAHAP,KAAKa,SAASN,GAEdP,KAAKnH,GAAKmH,KAAKM,MAAM,QACNL,IAAZD,KAAKnH,IAAyC,IAArB0H,EAAUC,SAItCR,KAAKc,aAAad,KAAKnH,IACvB2F,GAASwB,KAAKnH,GAAImH,KAAKlI,YAChB,O,GAfoBiI,IAoB7BiB,G,2KACO1G,EAAMmF,GACXO,KAAKM,MAAUhG,EAAKkG,OAAS,EAAK,CAAClG,EAAKmG,QAAShB,EAAcgB,SAAW,MAACR,K,mCAGlEpH,EAAIwH,GACbL,KAAKE,WAAajH,EAAcqB,KAChC0F,KAAKG,WAAcQ,GAAO9H,IAAO+H,GAAO/H,GAAOoI,GAAUZ,GAAKd,GAAmBD,GAAmBzG,GAAKoI,GAAUZ,GAAIY,GAAUZ,GAAIpH,EAAckB,SAAUlB,EAAcM,c,mCAGlKgH,GACT,IAAIjG,EAAOiG,EAAU,GACjBd,EAAgBc,EAAU,GAK9B,OAHAP,KAAKa,SAASvG,EAAMmF,GAEpBO,KAAKnH,GAAKmH,KAAKM,MAAM,QACNL,IAAZD,KAAKnH,IAAoC,IAAhByB,EAAKkG,SAIjCR,KAAKI,MAAQ9F,EAAK,GAClB0F,KAAKK,EAAIZ,EAAc,GAEvBO,KAAKc,aAAad,KAAKI,MAAOJ,KAAKK,GACnC7B,GAuJ8B,IAA3Bc,GAvJgBU,KAAKnH,KAAO8H,GAAOX,KAAKnH,KAAO+H,GAAOZ,KAAKnH,IAAOmH,KAAKnH,IAAM,EAAGmH,KAAKE,YACxF1B,GAASwB,KAAKI,MAAOJ,KAAKG,cARf,M,GAlBgBJ,IA8C5B,SAASmB,GAAgB9G,EAAQJ,EAAMM,EAAMmF,EAAe0B,EAAOC,EAAmBC,GAYzF,IAAIf,EAAOgB,EAAcC,EAXtB/B,GAAWK,WACVvF,EAAKkH,SAAS,GACd/B,EAAc+B,QAAQ,IAEtBhC,GAAWpF,OAASA,EACpBoF,GAAWlF,KAAOA,EAClBkF,GAAWC,cAAgBA,EAC3BD,GAAWxF,KAAOA,EAClBwF,GAAWK,UAAW,GAK1B,IAAM4B,EAAkBC,aAAY,WAKhC,GAJApB,EA3BDd,GAAWpF,OAAOoG,OAAS,EACX,CAAC,IAAIE,GAA0BlB,GAAWpF,QAClDoF,GAAWxF,KAAKwG,OAAS,EACjB,CAAC,IAAIO,GAAwBvB,GAAWxF,MAChDwF,GAAWlF,KAAKkG,OAAS,EACjB,CAAC,IAAIQ,GAAwB,CAACxB,GAAWlF,KAAMkF,GAAWC,gBAE1D,MAACQ,OAAWA,GAsB3BsB,EAAYjB,EAAM,QAEGL,KAHrBqB,EAAehB,EAAM,UAG2BL,IAAdsB,EAC9BF,IACAM,cAAcF,OAEb,CACD,KAAMH,EAAaM,aAAaL,IAC5B,IAAkC,IAA/B/B,GAAWI,gBAGV,OAFAwB,IACAO,cAAcF,IACP,EAGf,IAAkC,IAA/BjC,GAAWI,gBAGV,OAFAwB,IACAO,cAAcF,IACP,KAGhBN,GAIA,SAASU,GAAezH,EAAQE,EAAMmF,EAAezF,GAGxD,IAFA,IAAInB,EAAIwH,EAAGjB,EACPc,EAAYC,EACP2B,EAAI,EAAGA,EAAI1H,EAAOoG,OAAQsB,IAC/B,IAAK,IAAIC,EAAI,EAAGA,EAAI3H,EAAO0H,GAAGtB,OAAQuB,IACf3C,EAAOE,GAA1BzG,EAAKuB,EAAO0H,GAAGC,IACf7B,EAAcS,GAAO9H,IAAO+H,GAAO/H,GAAOI,EAAc0B,aAAe4E,GAAmBH,EAAMnG,EAAcS,YAAaT,EAAca,UAAWb,EAAciB,WAAYjB,EAAcwB,oBAC5L0F,EAAcQ,GAAO9H,IAAO+H,GAAO/H,GAAOI,EAAc2B,iBAAmB2E,GAAmBH,EAAMnG,EAAcQ,gBAAiBR,EAAcY,cAAeZ,EAAcgB,eAAgBhB,EAAcuB,yBACzL,IAAlBsC,EAAS9C,KAAkBwE,GAAS3F,EAAIqH,GAAc1B,GAAS3F,EAAIsH,GAG5E,IAAK2B,EAAI,EAAGA,EAAI9H,EAAKwG,OAAQsB,IACzB,IAAKC,EAAI,EAAGA,EAAI/H,EAAK8H,GAAGtB,OAAQuB,IACX3C,EAAOE,GAAxBzG,EAAKmB,EAAK8H,GAAGC,IAEbvD,GAAS3F,EADTqH,EAAcS,GAAO9H,IAAO+H,GAAO/H,GAAOI,EAAc0B,aAAe4E,GAAmBD,GAAmBzG,GAAKI,EAAcS,YAAaT,EAAca,UAAWb,EAAciB,WAAYjB,EAAcwB,qBAItN,IAAKqH,EAAI,EAAGA,EAAIxH,EAAKkG,OAAQsB,IACzBjJ,EAAKyB,EAAKwH,GAAIzB,EAAIZ,EAAcqC,GAAI1C,EAAOE,GAAmBzG,GAE9D2F,GAAS3F,EADTqH,EAAcS,GAAO9H,IAAO+H,GAAO/H,GAAOI,EAAc4B,WAAa0E,GAAmBD,GAAmBzG,GAAKoI,GAAUZ,GAAIY,GAAUZ,GAAIpH,EAAckB,SAAUlB,EAAcyB,mBAOnL,SAASsH,GAActC,EAAMyB,EAAOC,EAAmBC,GACvD7B,GAAWK,SACVL,GAAWE,KAAOA,EAElBF,GAAWK,UAAW,EAG1B,IAAIhH,GAAM,EACVsI,GAAgB,EAEhB,IAAMc,EAAgBP,aAAY,WAC9B,QAAWzB,IAAPpH,EACAwI,IACAM,cAAcM,OAEZ,CACF,IAAmC,IAA/BzC,GAAWI,gBAGX,OAFAwB,SACAO,cAAcM,QAKPhC,KADXpH,EAAK2G,GAAWE,KAAK,GAAGe,UACAG,GAAO/H,IAC3B2F,GAAS3F,EAAII,EAAcE,MAAM,MAG1CgI,GAGA,SAASe,GAAmBxC,GAE/B,IADA,IACQoC,EAAI,EAAGA,EAAIpC,EAAK,GAAGc,OAAQsB,IAE/BtD,GADKkB,EAAK,GAAGoC,GACA7I,EAAcE,MAAM,GAErC,IAAI2I,EAAI,EAAGA,EAAIpC,EAAK,GAAGc,OAAQsB,IAE3BtD,GADKkB,EAAK,GAAGoC,GACA7I,EAAcG,QAAQ,GAM3C,SAAS6H,GAAUvC,GAEf,OAAQA,GACJ,IAAK,OACD,OAAOzF,EAAc8B,aACzB,IAAK,QACD,OAAO9B,EAAc+B,cACzB,IAAK,KACD,OAAO/B,EAAcgC,WACzB,IAAK,OACD,OAAOhC,EAAciC,aACzB,QACI,OAAOjC,EAAcqB,MASjC,SAASqG,GAAO9H,GACZ,OAAkC,IAA3ByG,GAAmBzG,GAG9B,SAAS+H,GAAO/H,GACZ,OAAkC,IAA3ByG,GAAmBzG,G,IClQfsJ,G,WA1BX,aAAe,qBACXnC,KAAKoC,MAAQ,G,oDAGVC,GACHrC,KAAKoC,MAAME,KAAKD,K,gCAIhB,OAAIrC,KAAKuC,WAAmB,EACrBvC,KAAKoC,MAAM3B,U,gCAIlB,OAA6B,IAAtBT,KAAKoC,MAAM5B,S,kCAIlB,OAAOR,KAAKoC,MAAM5B,S,iCAIlB,OAAOR,KAAKoC,U,KCqFLI,G,WA3GX,aAAe,qBACXxC,KAAKyC,KAAO,GACZzC,KAAK0C,MAAQ,E,iDAIb1D,EAAKqB,GACLL,KAAKyC,KAAKzD,GAAOqB,EACjBL,KAAK0C,MAAQpK,KAAKqK,IAAI3C,KAAK0C,MAAOrC,K,0BAIlCrB,GACA,OAAIA,KAAOgB,KAAKyC,KACLzC,KAAKyC,KAAKzD,IAET,I,6BAITA,GACH,KAAIA,KAAOgB,KAAKyC,MAGZ,OAAQ,SAFDzC,KAAKyC,KAAKzD,K,sCAQT4D,GACZ,KAAMA,KAAU5C,KAAKyC,MAAO,MAAO,GAEnC,IAAII,EAAW,CAACD,GACZE,EAAoB,GACpBC,EAAIH,EAAO,GACXI,EAAIJ,EAAO,GACXK,EAAU,IAAIC,IAGlB,IADAD,EAAQ/J,IAAI0J,EAAO7D,YACZiB,KAAK0C,MAAQ,GAAG,CACnB,IAAIS,EAAOC,IACPC,EAAON,EACPO,EAAON,EACPO,EAAM,KAGN,CAACR,EAAI,EAAGC,KAAMhD,KAAKyC,OAAUQ,EAAQO,IAAI,CAACT,EAAI,EAAGC,GAAGjE,cAChDiB,KAAKyC,KAAK,CAACM,EAAI,EAAGC,IAAMG,IACxBE,EAAON,EAAI,EACXO,EAAON,EACPG,EAAOnD,KAAKyC,KAAK,CAACM,EAAI,EAAGC,IACzBO,EAAM,QAEVN,EAAQ/J,IAAI,CAAC6J,EAAI,EAAGC,GAAGjE,aAIvB,CAACgE,EAAGC,EAAI,KAAMhD,KAAKyC,OAAUQ,EAAQO,IAAI,CAACT,EAAGC,EAAI,GAAGjE,cAChDiB,KAAKyC,KAAK,CAACM,EAAGC,EAAI,IAAMG,IACxBE,EAAON,EACPO,EAAON,EAAI,EACXG,EAAOnD,KAAKyC,KAAK,CAACM,EAAGC,EAAI,IACzBO,EAAM,QAEVN,EAAQ/J,IAAI,CAAC6J,EAAGC,EAAI,GAAGjE,aAIvB,CAACgE,EAAI,EAAGC,KAAMhD,KAAKyC,OAAUQ,EAAQO,IAAI,CAACT,EAAI,EAAGC,GAAGjE,cAChDiB,KAAKyC,KAAK,CAACM,EAAI,EAAGC,IAAMG,IACxBE,EAAON,EAAI,EACXO,EAAON,EACPG,EAAOnD,KAAKyC,KAAK,CAACM,EAAI,EAAGC,IACzBO,EAAM,MAEVN,EAAQ/J,IAAI,CAAC6J,EAAI,EAAGC,GAAGjE,aAIvB,CAACgE,EAAGC,EAAI,KAAMhD,KAAKyC,OAAUQ,EAAQO,IAAI,CAACT,EAAGC,EAAI,GAAGjE,cAChDiB,KAAKyC,KAAK,CAACM,EAAGC,EAAI,IAAMG,IACxBE,EAAON,EACPO,EAAON,EAAI,EACXG,EAAOnD,KAAKyC,KAAK,CAACM,EAAGC,EAAI,IACzBO,EAAM,SAEVN,EAAQ/J,IAAI,CAAC6J,EAAGC,EAAI,GAAGjE,aAE3BgE,EAAIM,EACJL,EAAIM,EACJT,EAASrB,QAAQ,CAACuB,EAAGC,IACrBF,EAAkBtB,QAAQ+B,GAC1BvD,KAAK0C,MAAQS,EAEjB,OAAwB,IAApBN,EAASrC,OAAqB,IAClCsC,EAAkBtB,QAAQsB,EAAkB,IAErC,CAACD,EAAUC,M,8BAIlB9C,KAAKyC,KAAO,GACZzC,KAAK0C,MAAQ,M,KCTNe,OA3Ff,SAAaC,EAAevC,GAOxB,IANA,IAAIwC,EAAQ,IAAuB,IAAlB7G,EAAS9C,KAAiB,EAAI,GAC3C4J,EAAgB,GAChBC,EAAc,GACdC,EAAkB,GAClBC,EAAe,GAEVjC,EAAI,EAAGA,EAAI6B,EAAO7B,IAAK,CAC5B,IAAIkC,EAAa,GACXf,EAAU,IAAIC,IACdd,EAAQ,IAAID,GACd8B,EAAW,IAAIzB,GACf0B,EAAiB,IAANpC,EAAUhF,EAAStD,MAAQsD,EAAS9C,KAC/C4I,EAAe,IAANd,GAAW6B,EAAQ,EAAI7G,EAAS9C,KAAO8C,EAASlD,IAK7D,IAHAqK,EAASE,IAAID,EAAU,GACvB9B,EAAMgC,OAAO,CAACF,EAAU,IACxBjB,EAAQ/J,IAAIgL,EAASnF,YACdqD,EAAMiC,YAAc,GAAG,CAC1B,IAAIC,EAAOlC,EAAMmC,UACbxB,EAAIuB,EAAK,GAAG,GACZtB,EAAIsB,EAAK,GAAG,GACZE,EAAQF,EAAK,GAAK,EAItB,GAFIE,EAAQR,EAAWxD,QAAQwD,EAAW1B,KAAK,IAE3C,CAACS,EAAGC,GAAGjE,aAAe6D,EAAO7D,WAAY,MAGzCiE,EAAI,GAAK,KAAO,CAACD,EAAGC,EAAI,KAAMlG,EAAS3D,QAAW8J,EAAQO,IAAI,CAACT,EAAGC,EAAI,GAAGjE,cACzEqD,EAAMgC,OAAO,CAAC,CAACrB,EAAGC,EAAI,GAAIwB,IAC1BR,EAAWQ,EAAQ,GAAGlC,KAAK,CAACS,EAAGC,EAAI,IACnCiB,EAASE,IAAI,CAACpB,EAAGC,EAAI,GAAIwB,GACzBvB,EAAQ/J,IAAI,CAAC6J,EAAGC,EAAI,GAAGjE,aAIvBgE,EAAI,GAAK,KAAO,CAACA,EAAI,EAAGC,KAAMlG,EAAS3D,QAAW8J,EAAQO,IAAI,CAACT,EAAI,EAAGC,GAAGjE,cACzEqD,EAAMgC,OAAO,CAAC,CAACrB,EAAI,EAAGC,GAAIwB,IAC1BR,EAAWQ,EAAQ,GAAGlC,KAAK,CAACS,EAAI,EAAGC,IACnCiB,EAASE,IAAI,CAACpB,EAAI,EAAGC,GAAIwB,GACzBvB,EAAQ/J,IAAI,CAAC6J,EAAI,EAAGC,GAAGjE,aAKvBiE,EAAI,EAAIlG,EAASpE,WAAa,CAACqK,EAAGC,EAAI,KAAMlG,EAAS3D,QAAW8J,EAAQO,IAAI,CAACT,EAAGC,EAAI,GAAGjE,cACvFqD,EAAMgC,OAAO,CAAC,CAACrB,EAAGC,EAAI,GAAIwB,IAC1BR,EAAWQ,EAAQ,GAAGlC,KAAK,CAACS,EAAGC,EAAI,IACnCiB,EAASE,IAAI,CAACpB,EAAGC,EAAI,GAAIwB,GACzBvB,EAAQ/J,IAAI,CAAC6J,EAAGC,EAAI,GAAGjE,aAKvBgE,EAAI,EAAIjG,EAAS1E,WAAa,CAAC2K,EAAI,EAAGC,KAAMlG,EAAS3D,QAAW8J,EAAQO,IAAI,CAACT,EAAI,EAAGC,GAAGjE,cACvFqD,EAAMgC,OAAO,CAAC,CAACrB,EAAI,EAAGC,GAAIwB,IAC1BR,EAAWQ,EAAQ,GAAGlC,KAAK,CAACS,EAAI,EAAGC,IACnCiB,EAASE,IAAI,CAACpB,EAAI,EAAGC,GAAIwB,GACzBvB,EAAQ/J,IAAI,CAAC6J,EAAI,EAAGC,GAAGjE,aAM/B,MAAiC,IAA1BkF,EAAS1F,IAAIqE,IAAkBoB,EAAWxD,OAASyD,EAAS1F,IAAIqE,IACnEoB,EAAWS,MASf,GANU,IAAN3C,EACA8B,EAAgBA,EAAcc,OAAOV,GAErCH,EAAcA,EAAYa,OAAOV,IAGP,IAA1BC,EAAS1F,IAAIqE,GAAgB,MAGjC,IAAIC,EAAWoB,EAASU,gBAAgB/B,GACxCkB,EAAkBA,EAAgBY,OAAO7B,EAAS,IAClDkB,EAAeA,EAAaW,OAAO7B,EAAS,IAClC,IAANf,GAAqB,IAAV6B,IAEXG,EAAgBc,OAAOd,EAAgBtD,OAAS,EAAG,GACnDuD,EAAaa,OAAOb,EAAavD,OAAS,EAAG,IAGrDoD,EAAcpC,QAAQ,CAAC1E,EAAStD,QAEhCkK,EAAcE,EAAeE,EAAiBC,EAAc5C,EAAO0C,ICvBxDgB,OApEf,SAAanB,EAAevC,GACxB,IAAIyC,EAAgB,GAChBC,EAAc,GACdC,EAAkB,GAClBC,EAAe,GAGnB,SAASe,EAAM/B,EAAGC,EAAGJ,EAAQK,EAAStJ,EAAWmK,EAAiBC,GAC9D,QAAIhB,EAAI,GAAKC,EAAI,GAAKD,GAAKjG,EAAS1E,SAAW4K,GAAKlG,EAASpE,SAAW,CAACqK,EAAGC,KAAMlG,EAAS3D,MAAQ8J,EAAQO,IAAI,CAACT,EAAGC,GAAGjE,eAItHkE,EAAQ/J,IAAI,CAAC6J,EAAGC,GAAGjE,YACnBpF,EAAU2I,KAAK,CAAC,CAACS,EAAGC,KAEhB,CAACD,EAAGC,GAAGjE,aAAe6D,EAAO7D,YAC7B+E,EAAgBtC,QAAQ,CAACuB,EAAGC,KACrB,GAIP8B,EAAM/B,EAAI,EAAGC,EAAGJ,EAAQK,EAAStJ,EAAWmK,EAAiBC,IAC7DD,EAAgBtC,QAAQ,CAACuB,EAAGC,IAC5Be,EAAavC,QAAQ,OACd,GAEPsD,EAAM/B,EAAGC,EAAI,EAAGJ,EAAQK,EAAStJ,EAAWmK,EAAiBC,IAC7DD,EAAgBtC,QAAQ,CAACuB,EAAGC,IAC5Be,EAAavC,QAAQ,UACd,GAEPsD,EAAM/B,EAAI,EAAGC,EAAGJ,EAAQK,EAAStJ,EAAWmK,EAAiBC,IAC7DD,EAAgBtC,QAAQ,CAACuB,EAAGC,IAC5Be,EAAavC,QAAQ,SACd,GAEPsD,EAAM/B,EAAGC,EAAI,EAAGJ,EAAQK,EAAStJ,EAAWmK,EAAiBC,IAC7DD,EAAgBtC,QAAQ,CAACuB,EAAGC,IAC5Be,EAAavC,QAAQ,SACd,QAHX,GAMJ,IAAMyB,EAAU,IAAIC,IAChB1J,EAAQsD,EAAStD,MACrB,GAAIsD,EAAS9C,MAMT,GALA8K,EAAMtL,EAAM,GAAIA,EAAM,GAAIsD,EAAS9C,KAAMiJ,EAASW,EAAeE,EAAiBC,GAClFvK,EAAQsD,EAAS9C,KACjBiJ,EAAQ8B,QAGJjB,EAAgBtD,OAAS,EAAG,CAE5BsD,EAAgBc,OAAOd,EAAgBtD,OAAS,EAAG,GACnD,IAAIwE,EAAM,GACNC,EAAO,GACXH,EAAMtL,EAAM,GAAIA,EAAM,GAAIsD,EAASlD,IAAKqJ,EAASY,EAAamB,EAAKC,GACnEnB,EAAkBA,EAAgBY,OAAOM,GACzCjB,EAAeA,EAAaW,OAAOO,SAGvCH,EAAMtL,EAAM,GAAIA,EAAM,GAAIsD,EAASlD,IAAKqJ,EAASY,EAAaC,EAAiBC,GAInFA,EAAavC,QAAQuC,EAAa,IAClCL,EAAcE,EAAeE,EAAiBC,EAAc5C,EAAO0C,ICYxDqB,G,WA3EX,aAAe,qBACXlF,KAAKmF,IAAM,G,kDAKVC,EAAOC,EAAWrG,GACK,IAApBgB,KAAKmF,IAAI3E,OACTR,KAAKmF,IAAI7C,KAAK,CAAC8C,EAAOC,EAAWrG,KAGjCgB,KAAKmF,IAAI7C,KAAK,CAAC8C,EAAOC,EAAWrG,IACjCgB,KAAKsF,WAAWtF,KAAKmF,IAAI3E,OAAS,M,4BAMtC,IAAIwE,EAAMhF,KAAKmF,IAAI,GAKnB,OAJAnF,KAAKmF,IAAI,GAAKnF,KAAKmF,IAAInF,KAAKmF,IAAI3E,OAAS,GACzCR,KAAKmF,IAAInF,KAAKmF,IAAI3E,OAAS,GAAKwE,EAChChF,KAAKmF,IAAIP,OAAO5E,KAAKmF,IAAI3E,OAAS,EAAG,GACrCR,KAAKsF,WAAWtF,KAAKmF,IAAI3E,OAAS,GAC3BwE,EAAI,K,6BAIX,OAAOhF,KAAKmF,IAAI,GAAG,K,+BAInB,OAAOnF,KAAKmF,IAAI3E,S,8BAGZ/B,GACJ,IAAI8G,EAAIvF,KAAKmF,IAAI3E,OACbgF,EAAW/G,EACXgH,EAAO,EAAIhH,EACXiH,EAAQ,EAAIjH,EAAQ,EAsBxB,GApBIgH,EAAOF,IACHvF,KAAKmF,IAAIK,GAAU,GAAKxF,KAAKmF,IAAIM,GAAM,IAEhCzF,KAAKmF,IAAIK,GAAU,KAAOxF,KAAKmF,IAAIM,GAAM,IAC5CzF,KAAKmF,IAAIK,GAAU,GAAKxF,KAAKmF,IAAIM,GAAM,MAF3CD,EAAWC,GAQfC,EAAQH,IACJvF,KAAKmF,IAAIK,GAAU,GAAKxF,KAAKmF,IAAIO,GAAO,IAEjC1F,KAAKmF,IAAIK,GAAU,KAAOxF,KAAKmF,IAAIO,GAAO,IAC7C1F,KAAKmF,IAAIK,GAAU,GAAKxF,KAAKmF,IAAIO,GAAO,MAF5CF,EAAWE,GAQfF,IAAa/G,EAAO,CACpB,IAAIuG,EAAMhF,KAAKmF,IAAI1G,GACnBuB,KAAKmF,IAAI1G,GAASuB,KAAKmF,IAAIK,GAC3BxF,KAAKmF,IAAIK,GAAYR,EACrBhF,KAAK2F,QAAQH,M,iCAIV/G,GACP,IAAK,IAAIqD,EAAIxJ,KAAKC,MAAMkG,EAAQ,GAAIqD,GAAK,EAAGA,IACxC9B,KAAK2F,QAAQ7D,O,KC7CzB,SAAS8D,GAAWC,EAAW3B,EAAUtB,EAAQoB,EAAYD,GAYzD,IACIjC,EAAGC,EADH+D,EAAQ,CAAC,GAAI,IAEjB,IAAKhE,EAAI,EAAGA,EAAIhF,EAAS1E,QAAS0J,IAC9B,IAAKC,EAAI,EAAGA,EAAIjF,EAASpE,QAASqJ,IAAK,CACnC,IAAI/C,EAAM,CAAC8C,EAAGC,GAGd+D,EAAM,GAAG9G,GAAO,CAACoE,IAAU,KAAM,KAAMA,KACvC0C,EAAM,GAAG9G,GAAO,CAACoE,IAAU,KAAM,KAAMA,KAI/C,IAAIxJ,EAAM,KACNmM,EAAY,CAAC,IAAIb,GAAiB,IAAIA,IAC1C,OAAQW,GACJ,IAAK,WAKL,IAAK,QACDC,EAAM,GAAG5B,GAAY,CAAC,EAAG,KAAM,KAAM,GACrC6B,EAAU,GAAGC,KAAK,EAAG,EAAG9B,GACxBtK,EAAM,CAACgJ,GACP,MACJ,IAAK,QACDkD,EAAM,GAAG5B,GAAY,CAAC,EAAG,KAAM,QAAS,GACxC6B,EAAU,GAAGC,KAAK,EAAG,EAAG9B,GACxBtK,EAAM,CAACgJ,GACP,MACJ,IAAK,wBACDkD,EAAM,GAAG5B,GAAY,CAAC,EAAG,KAAM,KAAM,GACrC6B,EAAU,GAAGC,KAAK,EAAG,EAAG9B,GACxBtK,EAAM,CAACgJ,GACP,MACJ,IAAK,kBACDkD,EAAM,GAAG5B,GAAY,CAAC,EAAG,KAAM,QAAS,GACxC6B,EAAU,GAAGC,KAAK,EAAG,EAAG9B,GACxBtK,EAAM,CAACgJ,GACP,MACJ,IAAK,mBACDkD,EAAM,GAAG5B,GAAY,CAAC,EAAG,KAAM,QAAS,GACxC4B,EAAM,GAAGlD,GAAU,CAAC,EAAG,KAAM,OAAQ,GACrCmD,EAAU,GAAGC,KAAK,EAAG,EAAG9B,GACxB6B,EAAU,GAAGC,KAAK,EAAG,EAAGpD,GACxBhJ,EAAM,CAACgJ,EAAQsB,GAavB,IANA,IAAI+B,EAAkB,GAClBC,EAAQ,EACRC,EAAY,KACZC,GAAa,EACbnD,EAAU,CAAC,IAAIC,IAAO,IAAIA,KAEvB6C,EAAU,GAAGM,SAAW,GAAKN,EAAU,GAAGM,SAAW,GAAG,CAGvDN,EAAU,GAAGM,SAAW,GAAKN,EAAU,GAAGM,SAAW,EACrDH,GAASA,EAAQ,GAAK,EACfH,EAAU,GAAGM,SAAW,EAC/BH,EAAQ,EACDH,EAAU,GAAGM,SAAW,IAC/BH,EAAQ,GAIZ,IAAII,EAAS,KAGb,MAFAA,EAASC,GAAeR,EAAUG,OAEpBpJ,EAAS3D,QAAQ8J,EAAQiD,GAAO1C,IAAI8C,EAAOvH,YAgJzD,GArIA,CANSuH,EAAO,GAAK,GAAK,EAAI,CAACA,EAAO,GAAK,EAAGA,EAAO,IAAM,KAC/CA,EAAO,GAAK,EAAIxJ,EAASpE,QAAU,CAAC4N,EAAO,GAAIA,EAAO,GAAK,GAAK,KACjEA,EAAO,GAAK,EAAIxJ,EAAS1E,QAAU,CAACkO,EAAO,GAAK,EAAGA,EAAO,IAAM,KAChEA,EAAO,GAAK,GAAK,EAAI,CAACA,EAAO,GAAIA,EAAO,GAAK,GAAK,MAGrCE,SAAQ,SAACC,EAASC,GACtC,GAAKD,KAAWA,KAAW3J,EAAS3D,QAAQiN,EAA5C,CAGA,IAAIO,EAAQ,KACRvN,EAAUqN,KAAW3J,EAAS1D,OAAS0D,EAASC,YAAc,EAClE,OAAQ8I,GACJ,IAAK,WAIL,IAAK,QAEDc,EAAQb,EAAMI,GAAOI,GAAQ,GAAKlN,EAASwN,GAASd,EAAMI,GAAOI,GAAQ,GAAII,GAC7E,MACJ,IAAK,QAEDC,EAAQb,EAAMI,GAAOI,GAAQ,GAAKlN,EAASwN,GAASd,EAAMI,GAAOI,GAAQ,GAAII,GAAOpO,KAAKuO,IAAIC,GAAaL,EAAS7M,EAAIsM,IAAS,GAChI,MACJ,IAAK,wBAEDS,EAAQb,EAAMI,GAAOI,GAAQ,GAAKM,GAASd,EAAMI,GAAOO,GAAS,GAAIC,GACrE,MACJ,IAAK,kBAEDC,EAAQb,EAAMI,GAAOI,GAAQ,IAAMlN,EAASwN,GAASd,EAAMI,GAAOI,GAAQ,GAAII,IAAQpO,KAAKuO,IAAIC,GAAaL,EAAS7M,EAAIsM,IAAS,GAClI,MACJ,IAAK,mBAEDS,EAAQb,EAAMI,GAAOI,GAAQ,GAAKlN,EAASwN,GAASd,EAAMI,GAAOI,GAAQ,GAAII,GAAOpO,KAAKuO,IAAIC,GAAaL,EAAS7M,EAAIsM,IAAS,GAMxI,GAAIS,GAASb,EAAMI,GAAOO,GAAS,GAAI,CAGnC,OAFAX,EAAMI,GAAOO,GAAS,GAAKE,EAC3Bb,EAAMI,GAAOO,GAAS,GAAKH,EACnBI,GACJ,KAAK,EACgBZ,EAAMI,GAAOO,GAAS,GAAzB,IAAVP,EAAwC,KACZ,OAChC,MACJ,KAAK,EACgBJ,EAAMI,GAAOO,GAAS,GAAzB,IAAVP,EAAwC,QACZ,OAChC,MACJ,KAAK,EACgBJ,EAAMI,GAAOO,GAAS,GAAzB,IAAVP,EAAwC,OACZ,KAChC,MACJ,KAAK,EACgBJ,EAAMI,GAAOO,GAAS,GAAzB,IAAVP,EAAwC,OACZ,QAMxC,OAAQL,GACJ,IAAK,WACDC,EAAMI,GAAOO,GAAS,GAAKX,EAAMI,GAAOO,GAAS,GACjD,MACJ,IAAK,QACDX,EAAMI,GAAOO,GAAS,GAAKX,EAAMI,GAAOO,GAAS,GAAKK,GAAaL,EAAS7D,GAC5E,MACJ,IAAK,QACDkD,EAAMI,GAAOO,GAAS,GAAKX,EAAMI,GAAOO,GAAS,GACjD,MACJ,IAAK,wBACDX,EAAMI,GAAOO,GAAS,GAAKX,EAAMI,GAAOO,GAAS,GAAKG,GAASd,EAAMI,GAAOO,GAAS,GAAIC,GACzF,MACJ,IAAK,kBAGL,IAAK,mBACDZ,EAAMI,GAAOO,GAAS,GAAKX,EAAMI,GAAOO,GAAS,IAa7D,GALKxD,EAAQiD,GAAO1C,IAAI8C,EAAOvH,aAC3BgH,EAAUG,GAAOF,KAAKF,EAAMI,GAAOO,GAAS,GAAIK,GAAaL,EAAS7D,GAAS6D,GAIjE,qBAAdZ,GACA,GAAI5C,GAASiD,EAAQ,GAAK,GAAG1C,IAAI8C,EAAOvH,YAAa,CAKjD,IADA,IAAIiG,EADJmB,EAAYG,EAELtB,GACW,IAAVkB,GACAD,EAAgBzE,QAAQwD,GACxBjB,EAAavC,QAAQsE,EAAMI,GAAOlB,GAAK,MAEvCiB,EAAgB3D,KAAK0C,GACrBjB,EAAazB,KAAKwD,EAAMI,GAAOlB,GAAK,KAExCA,EAAMc,EAAMI,GAAOlB,GAAK,GAEd,IAAVkB,IAIAD,EAAgBrB,OAAOqB,EAAgBzF,OAAS,EAAG,GACnDuD,EAAaa,OAAOb,EAAavD,OAAS,EAAG,IAEjD4F,GAAa,QAMbK,EAAQ1H,aAAe6D,EAAO7D,aAC9BoH,EAAYM,EACZL,GAAa,EAGbN,EAAMI,GAAOC,GAAW,GAAKG,OAKpCrD,EAAQiD,GAAO1C,IAAI8C,EAAOvH,cAC3BiF,EAAW1B,KAAK,CAACgE,IACjBrD,EAAQiD,GAAOhN,IAAIoN,EAAOvH,aAG1BqH,EAAY,CACZpC,EAAW1B,KAAK,CAAC6D,IACjB,OAKR,GAAIC,EAGA,IAFAE,EAASH,EACS,qBAAdN,IAAkCK,EAAQ,GACvCI,GACW,IAAVJ,EACkB,qBAAdL,EACIS,EAAOvH,aAAeoH,EAAUpH,aAChCkH,EAAgBzE,QAAQ8E,GACxBvC,EAAavC,QAAQsE,GAAOI,EAAQ,GAAK,GAAGI,GAAQ,MAGxDL,EAAgBzE,QAAQ8E,GACxBvC,EAAavC,QAAQsE,GAAOI,EAAQ,GAAK,GAAGI,GAAQ,MAGxDL,EAAgB3D,KAAKgE,GACrBvC,EAAazB,KAAKwD,GAAOI,EAAQ,GAAK,GAAGI,GAAQ,KAErDA,EAASR,GAAOI,EAAQ,GAAK,GAAGI,GAAQ,GAYhD,OAPAvC,EAAaa,OAAO,EAAG,GACvBb,EAAavC,QAAQuC,EAAa,IAEhB,qBAAd8B,IACA9B,EAAavC,QAAQuC,EAAa,IAClCA,EAAaa,OAAOb,EAAavD,OAAS,EAAG,IAE1CyF,EAIX,SAASa,GAAa5C,EAAUtB,GAC5B,OAAOtK,KAAKyO,IAAInE,EAAO,GAAKsB,EAAS,IAAM5L,KAAKyO,IAAInE,EAAO,GAAKsB,EAAS,IAI7E,SAASqC,GAAeR,GAEpB,OADaA,EAAUiB,MAQ3B,SAASJ,GAAS3F,EAAWxC,GACzB,IAAI2G,EAAQ,EACZ,OAAQnE,GACJ,IAAK,KACD,OAAQxC,GACJ,KAAK,EACD2G,EAAQ,EACR,MACJ,KAAK,EACDA,EAAQ,EACR,MACJ,KAAK,EACDA,EAAQ,EACR,MACJ,KAAK,EACDA,EAAQ,EAKhB,MACJ,IAAK,QACD,OAAQ3G,GACJ,KAAK,EACD2G,EAAQ,EACR,MACJ,KAAK,EACDA,EAAQ,EACR,MACJ,KAAK,EACDA,EAAQ,EACR,MACJ,KAAK,EACDA,EAAQ,EAKhB,MACJ,IAAK,OACD,OAAQ3G,GACJ,KAAK,EACD2G,EAAQ,EACR,MACJ,KAAK,EACDA,EAAQ,EACR,MACJ,KAAK,EACDA,EAAQ,EACR,MACJ,KAAK,EACDA,EAAQ,EAKhB,MACJ,IAAK,OACD,OAAQ3G,GACJ,KAAK,EACD2G,EAAQ,EACR,MACJ,KAAK,EACDA,EAAQ,EACR,MACJ,KAAK,EACDA,EAAQ,EACR,MACJ,KAAK,EACDA,EAAQ,GASxB,OAAOA,EAGI6B,OAvYf,SAAkBpB,EAAWnC,EAAevC,GACxC,IAAIyC,EAAgB,GAChBC,EAAc,GACdC,EAAkB,GAClBC,EAAe,GAEnB,GAAIjH,EAAS9C,MAIT,IAHA8J,EAAkBA,EAAgBY,OAAOkB,GAAWC,EAAW/I,EAAStD,MAAOsD,EAAS9C,KAAM4J,EAAeG,KAGzFvD,OAAS,EAAG,CAC5BsD,EAAgBc,OAAOd,EAAgBtD,OAAS,EAAG,GACnDuD,EAAaa,OAAOb,EAAavD,OAAS,EAAG,GAC7C,IAAIwE,EAAM,GACVlB,EAAkBA,EAAgBY,OAAOkB,GAAWC,EAAW/I,EAAS9C,KAAM8C,EAASlD,IAAKiK,EAAamB,IACzGjB,EAAeA,EAAaW,OAAOM,SAGvClB,EAAkBA,EAAgBY,OAAOkB,GAAWC,EAAW/I,EAAStD,MAAOsD,EAASlD,IAAKgK,EAAeG,IAIhHL,EAAcE,EAAeE,EAAiBC,EAAc5C,EAAO0C,ICGvE,SAASqD,GAAerB,EAAW3B,EAAUtB,EAAQoB,EAAYD,GAY7D,IACIjC,EAAGC,EADH+D,EAAQ,CAAC,GAAI,IAEjB,IAAKhE,EAAI,EAAGA,EAAIhF,EAAS1E,QAAS0J,IAC9B,IAAKC,EAAI,EAAGA,EAAIjF,EAASpE,QAASqJ,IAAK,CACnC,IAAI/C,EAAM,CAAC8C,EAAGC,GAGd+D,EAAM,GAAG9G,GAAO,CAACoE,IAAU,KAAM,KAAMA,KACvC0C,EAAM,GAAG9G,GAAO,CAACoE,IAAU,KAAM,KAAMA,KAI/C,IAAIxJ,EAAM,KACNmM,EAAY,CAAC,GAAI,IACrB,OAAQF,GACJ,IAAK,WAKL,IAAK,QACDC,EAAM,GAAG5B,GAAY,CAAC,EAAG,KAAM,KAAM,GACrC6B,EAAU,GAAGzD,KAAK4B,GAClBtK,EAAM,CAACgJ,GACP,MACJ,IAAK,QACDkD,EAAM,GAAG5B,GAAY,CAAC,EAAG,KAAM,QAAS,GACxC6B,EAAU,GAAGzD,KAAK4B,GAClBtK,EAAM,CAACgJ,GACP,MACJ,IAAK,wBACDkD,EAAM,GAAG5B,GAAY,CAAC,EAAG,KAAM,KAAM,GACrC6B,EAAU,GAAGzD,KAAK4B,GAClBtK,EAAM,CAACgJ,GACP,MACJ,IAAK,kBACDkD,EAAM,GAAG5B,GAAY,CAAC,EAAG,KAAM,QAAS,GACxC6B,EAAU,GAAGzD,KAAK4B,GAClBtK,EAAM,CAACgJ,GACP,MACJ,IAAK,mBACDkD,EAAM,GAAG5B,GAAY,CAAC,EAAG,KAAM,QAAS,GACxC4B,EAAM,GAAGlD,GAAU,CAAC,EAAG,KAAM,OAAQ,GACrCmD,EAAU,GAAGzD,KAAK4B,GAClB6B,EAAU,GAAGzD,KAAKM,GAClBhJ,EAAM,CAACgJ,EAAQsB,GAavB,IANA,IAAI+B,EAAkB,GAClBC,EAAQ,EACRC,EAAY,KACZC,GAAa,EACbnD,EAAU,CAAC,IAAIC,IAAO,IAAIA,KAEvB6C,EAAU,GAAGvF,OAAS,GAAKuF,EAAU,GAAGvF,OAAS,GAAG,CAGnDuF,EAAU,GAAGvF,OAAS,GAAKuF,EAAU,GAAGvF,OAAS,EACjD0F,GAASA,EAAQ,GAAK,EACfH,EAAU,GAAGvF,OAAS,EAC7B0F,EAAQ,EACDH,EAAU,GAAGvF,OAAS,IAC7B0F,EAAQ,GAIZ,IAAII,EAAS,KAGb,MAFAA,EAASC,GAAeT,EAAMI,GAAQ,EAAGH,EAAUG,GAAQtM,EAAIsM,OAEjDpJ,EAAS3D,MA8IvB,GAnIA,CANSmN,EAAO,GAAK,GAAK,EAAI,CAACA,EAAO,GAAK,EAAGA,EAAO,IAAM,KAC/CA,EAAO,GAAK,EAAIxJ,EAASpE,QAAU,CAAC4N,EAAO,GAAIA,EAAO,GAAK,GAAK,KACjEA,EAAO,GAAK,EAAIxJ,EAAS1E,QAAU,CAACkO,EAAO,GAAK,EAAGA,EAAO,IAAM,KAChEA,EAAO,GAAK,GAAK,EAAI,CAACA,EAAO,GAAIA,EAAO,GAAK,GAAK,MAGrCE,SAAQ,SAACC,EAASC,GACtC,GAAKD,KAAWA,KAAW3J,EAAS3D,MAApC,CAGA,IAAIwN,EAAQ,KACRvN,EAAUqN,KAAW3J,EAAS1D,OAAS0D,EAASC,YAAc,EAClE,OAAQ8I,GACJ,IAAK,WAIL,IAAK,QAEDc,EAAQb,EAAMI,GAAOI,GAAQ,GAAKlN,EAASwN,GAASd,EAAMI,GAAOI,GAAQ,GAAII,GAC7E,MACJ,IAAK,QAEDC,EAAQb,EAAMI,GAAOI,GAAQ,GAAKlN,EAASwN,GAASd,EAAMI,GAAOI,GAAQ,GAAII,GAAOpO,KAAKuO,IAAIC,GAAaL,EAAS7M,EAAIsM,IAAS,GAChI,MACJ,IAAK,wBAEDS,EAAQb,EAAMI,GAAOI,GAAQ,GAAKM,GAASd,EAAMI,GAAOO,GAAS,GAAIC,GACrE,MACJ,IAAK,kBAEDC,EAAQb,EAAMI,GAAOI,GAAQ,IAAMlN,EAASwN,GAASd,EAAMI,GAAOI,GAAQ,GAAII,IAAQpO,KAAKuO,IAAIC,GAAaL,EAAS7M,EAAIsM,IAAS,GAClI,MACJ,IAAK,mBAEDS,EAAQb,EAAMI,GAAOI,GAAQ,GAAKlN,EAASwN,GAASd,EAAMI,GAAOI,GAAQ,GAAII,GAAOpO,KAAKuO,IAAIC,GAAaL,EAAS7M,EAAIsM,IAAS,GAMxI,GAAIS,GAASb,EAAMI,GAAOO,GAAS,GAAI,CAGnC,OAFAX,EAAMI,GAAOO,GAAS,GAAKE,EAC3Bb,EAAMI,GAAOO,GAAS,GAAKH,EACnBI,GACJ,KAAK,EACgBZ,EAAMI,GAAOO,GAAS,GAAzB,IAAVP,EAAwC,KACZ,OAChC,MACJ,KAAK,EACgBJ,EAAMI,GAAOO,GAAS,GAAzB,IAAVP,EAAwC,QACZ,OAChC,MACJ,KAAK,EACgBJ,EAAMI,GAAOO,GAAS,GAAzB,IAAVP,EAAwC,OACZ,KAChC,MACJ,KAAK,EACgBJ,EAAMI,GAAOO,GAAS,GAAzB,IAAVP,EAAwC,OACZ,QAMxC,OAAQL,GACJ,IAAK,WACDC,EAAMI,GAAOO,GAAS,GAAKX,EAAMI,GAAOO,GAAS,GACjD,MACJ,IAAK,QACDX,EAAMI,GAAOO,GAAS,GAAKX,EAAMI,GAAOO,GAAS,GAAKK,GAAaL,EAAS7D,GAC5E,MACJ,IAAK,QACDkD,EAAMI,GAAOO,GAAS,GAAKX,EAAMI,GAAOO,GAAS,GACjD,MACJ,IAAK,wBACDX,EAAMI,GAAOO,GAAS,GAAKX,EAAMI,GAAOO,GAAS,GAAKG,GAASd,EAAMI,GAAOO,GAAS,GAAIC,GACzF,MACJ,IAAK,kBAGL,IAAK,mBACDZ,EAAMI,GAAOO,GAAS,GAAKX,EAAMI,GAAOO,GAAS,IAa7D,GALKxD,EAAQiD,GAAO1C,IAAI8C,EAAOvH,aAC3BgH,EAAUG,GAAO5D,KAAKmE,GAIR,qBAAdZ,GACA,GAAI5C,GAASiD,EAAQ,GAAK,GAAG1C,IAAI8C,EAAOvH,YACpC,GAAkB,OAAdoH,EAAoB,CAGpB,IADA,IAAInB,EADJmB,EAAYG,EAELtB,GACW,IAAVkB,GACAD,EAAgBzE,QAAQwD,GACxBjB,EAAavC,QAAQsE,EAAMI,GAAOlB,GAAK,MAEvCiB,EAAgB3D,KAAK0C,GACrBjB,EAAazB,KAAKwD,EAAMI,GAAOlB,GAAK,KAExCA,EAAMc,EAAMI,GAAOlB,GAAK,GAEd,IAAVkB,IAIAD,EAAgBrB,OAAOqB,EAAgBzF,OAAS,EAAG,GACnDuD,EAAaa,OAAOb,EAAavD,OAAS,EAAG,SAGjD4F,GAAa,OAIjBK,EAAQ1H,aAAe6D,EAAO7D,aAC9BoH,EAAYM,EACZL,GAAa,EAGbN,EAAMI,GAAOC,GAAW,GAAKG,OAKpCrD,EAAQiD,GAAO1C,IAAI8C,EAAOvH,cAC3BiF,EAAW1B,KAAK,CAACgE,IACjBrD,EAAQiD,GAAOhN,IAAIoN,EAAOvH,aAG1BqH,EAAY,CACZpC,EAAW1B,KAAK,CAAC6D,IACjB,OAKR,GAAIC,EAGA,IAFAE,EAASH,EACS,qBAAdN,IAAkCK,EAAQ,GACvCI,GACW,IAAVJ,EACkB,qBAAdL,EACIS,EAAOvH,aAAeoH,EAAUpH,aAChCkH,EAAgBzE,QAAQ8E,GACxBvC,EAAavC,QAAQsE,GAAOI,EAAQ,GAAK,GAAGI,GAAQ,MAGxDL,EAAgBzE,QAAQ8E,GACxBvC,EAAavC,QAAQsE,GAAOI,EAAQ,GAAK,GAAGI,GAAQ,MAGxDL,EAAgB3D,KAAKgE,GACrBvC,EAAazB,KAAKwD,GAAOI,EAAQ,GAAK,GAAGI,GAAQ,KAErDA,EAASR,GAAOI,EAAQ,GAAK,GAAGI,GAAQ,GAYhD,OAPAvC,EAAaa,OAAO,EAAG,GACvBb,EAAavC,QAAQuC,EAAa,IAEhB,qBAAd8B,IACA9B,EAAavC,QAAQuC,EAAa,IAClCA,EAAaa,OAAOb,EAAavD,OAAS,EAAG,IAE1CyF,EAIX,SAASa,GAAa5C,EAAUtB,GAC5B,OAAOtK,KAAKyO,IAAInE,EAAO,GAAKsB,EAAS,IAAM5L,KAAKyO,IAAInE,EAAO,GAAKsB,EAAS,IAI7E,SAASqC,GAAeT,EAAOqB,EAAUpB,EAAWnD,GAEhD,IADA,IAAIwE,EAAQC,EACHvF,EAAI,EAAGA,EAAIiE,EAAUvF,OAAQsB,MAC7BsF,GAAUtB,EAAMsB,GAAQD,GAAYrB,EAAMC,EAAUjE,IAAIqF,IAKlDrB,EAAMsB,GAAQD,KAAcrB,EAAMC,EAAUjE,IAAIqF,IACnDL,GAAaM,EAAQxE,GAAUkE,GAAaf,EAAUjE,GAAIc,MAL9DwE,EAASrB,EAAUjE,GACnBuF,EAAWvF,GAYnB,OADAiE,EAAUnB,OAAOyC,EAAU,GACpBD,EAKX,SAASR,GAAS3F,EAAWxC,GACzB,IAAI2G,EAAQ,EACZ,OAAQnE,GACJ,IAAK,KACD,OAAQxC,GACJ,KAAK,EACD2G,EAAQ,EACR,MACJ,KAAK,EACDA,EAAQ,EACR,MACJ,KAAK,EACDA,EAAQ,EACR,MACJ,KAAK,EACDA,EAAQ,EAKhB,MACJ,IAAK,QACD,OAAQ3G,GACJ,KAAK,EACD2G,EAAQ,EACR,MACJ,KAAK,EACDA,EAAQ,EACR,MACJ,KAAK,EACDA,EAAQ,EACR,MACJ,KAAK,EACDA,EAAQ,EAKhB,MACJ,IAAK,OACD,OAAQ3G,GACJ,KAAK,EACD2G,EAAQ,EACR,MACJ,KAAK,EACDA,EAAQ,EACR,MACJ,KAAK,EACDA,EAAQ,EACR,MACJ,KAAK,EACDA,EAAQ,EAKhB,MACJ,IAAK,OACD,OAAQ3G,GACJ,KAAK,EACD2G,EAAQ,EACR,MACJ,KAAK,EACDA,EAAQ,EACR,MACJ,KAAK,EACDA,EAAQ,EACR,MACJ,KAAK,EACDA,EAAQ,GASxB,OAAOA,EAGIkC,OAlZf,SAAsBzB,EAAWnC,EAAevC,GAC5C,IAAIyC,EAAgB,GAChBC,EAAc,GACdC,EAAkB,GAClBC,EAAe,GAEnB,GAAIjH,EAAS9C,MAIT,IAHA8J,EAAkBA,EAAgBY,OAAOwC,GAAerB,EAAW/I,EAAStD,MAAOsD,EAAS9C,KAAM4J,EAAeG,KAG7FvD,OAAS,EAAG,CAC5BsD,EAAgBc,OAAOd,EAAgBtD,OAAS,EAAG,GACnDuD,EAAaa,OAAOb,EAAavD,OAAS,EAAG,GAC7C,IAAIwE,EAAM,GACVlB,EAAkBA,EAAgBY,OAAOwC,GAAerB,EAAW/I,EAAS9C,KAAM8C,EAASlD,IAAKiK,EAAamB,IAC7GjB,EAAeA,EAAaW,OAAOM,SAGvClB,EAAkBA,EAAgBY,OAAOwC,GAAerB,EAAW/I,EAAStD,MAAOsD,EAASlD,IAAKgK,EAAeG,IAIpHL,EAAcE,EAAeE,EAAiBC,EAAc5C,EAAO0C,ICnBhE,SAAS0D,GAAYC,EAAOC,EAAW7L,EAAWuF,GAErD,OADAsG,GAAU,GACF7L,EAAU2C,KACd,IAAK,qBACD0I,GAAS,WAAYO,EAAOrG,EAAM5C,IAAI,IACtC,MACJ,IAAK,kBACD0I,GAAS,QAASO,EAAOrG,EAAM5C,IAAI,IACnC,MACJ,IAAK,8BACD0I,GAAS,wBAAyBO,EAAOrG,EAAM5C,IAAI,IACnD,MACJ,IAAK,kBACD0I,GAAS,QAASO,EAAOrG,EAAM5C,IAAI,IACnC,MACJ,IAAK,6BACD0I,GAAS,kBAAmBO,EAAOrG,EAAM5C,IAAI,IAC7C,MACJ,IAAK,+BACD0I,GAAS,mBAAoBO,EAAOrG,EAAM5C,IAAI,IAC9C,MACJ,IAAK,0BACDkF,GAAI+D,EAAOrG,EAAM5C,IAAI,IACrB,MACJ,IAAK,wBACDsG,GAAI2C,EAAOrG,EAAM5C,IAAI,IACrB,MACJ,IAAK,yBACD+I,GAAa,WAAYE,EAAOrG,EAAM5C,IAAI,KC+JvCmJ,OAvLf,WAAwB,IAAD,EACK,CAACxJ,qBAAWpC,GAAeoC,qBAAW3B,IAAvD4C,EADY,KACLzD,EADK,OAEuC,CAACwC,qBAAWL,GAAmBK,qBAAWX,GAAcW,qBAAWR,GAAeQ,qBAAWlB,GAAmBkB,qBAAWd,IAA9KxB,EAFY,KAED5B,EAFC,KAEK2N,EAFL,KAEe9L,EAFf,KAE0BF,EAF1B,KAIb6L,EAAQ,WAAoJ,IAAnJpN,EAAkJ,uDAAzIoF,GAAWpF,OAAQE,EAAsH,uDAA/GkF,GAAWlF,KAAMmF,EAA8F,uDAA9ED,GAAWC,cAAe0B,EAAoD,uDAA5CwG,EAASpJ,IAAI,GAAIvE,EAA2B,uDAApBwF,GAAWxF,KAChJwF,GAAWI,gBACXJ,GAAWI,iBAAkB,IAIX,SAAlB/D,EAAU0C,KAAqC,SAAlB1C,EAAU0C,KAAkB3C,EAAU2C,MAAQiB,GAAW5D,aACtF4D,GAAW5D,UAAYA,EAAU2C,KAIjC7C,EAAO6C,KAAO9C,EAAYC,OAC1BmG,GAAezH,EAAQE,EAAMmF,EAAezF,IAG5C6B,EAAUsI,IAAI,WACd3E,GAAWI,iBAAkB,EAC7BsB,GAAgB9G,EAAQJ,EAAMM,EAAMmF,EAAe0B,GAC/C,kBAAMtF,EAAUsI,IAAI,WACpB,WACIzI,EAAOyI,IAAI,QACX1I,EAAYC,QAAS,EACrBG,EAAUsI,IAAI,cAuBxByD,EAAkB,WACE,SAAlB/L,EAAU0C,MACY,SAAlB5C,EAAU4C,KACVsJ,GAAW,GACXlM,EAAUwI,IAAI,aACd1I,EAAYE,UAAY,aAExB8L,IAEJ5L,EAAUsI,IAAI,UAwChB0D,EAAa,WAGf,IAH4C,IAA5BC,IAA2B,yDAErC3O,EAAO4O,OAAOC,KAAKlL,EAAS3D,MACzB2I,EAAI,EAAGA,EAAI3I,EAAKqH,OAAQsB,IAC7BtD,GAASrF,EAAK2I,GAAGmG,MAAM,KAAMhP,EAAckC,YAAY,GAE3D+M,GAAa,GACbT,IAEAtI,EAAMgF,IAAI,IAEN2D,GACAF,KAIFM,EAAe,WAIjB,IAJ8C,IAA5BJ,IAA2B,yDAEvC1O,EAAS2O,OAAOC,KAAKlL,EAAS1D,QAE3B0I,EAAI,EAAGA,EAAI1I,EAAOoH,OAAQsB,IAC/BtD,GAASpF,EAAO0I,GAAGmG,MAAM,KAAMhP,EAAckC,YAAY,GAEzDgE,EAAMZ,IAAI/E,QAAUP,EAAcE,MAClCgG,EAAMgF,IAAI,CAAElL,cAAeA,EAAcO,MAAO4C,MAAOnD,EAAckC,aAErEgE,EAAMZ,IAAI3E,MAAQX,EAAcE,MAChCgG,EAAMgF,IAAI,CAAElL,cAAeA,EAAcW,IAAKwC,MAAOnD,EAAckC,aAEnEgE,EAAMZ,IAAIvE,OAASf,EAAcE,MACjCgG,EAAMgF,IAAI,CAAElL,cAAeA,EAAce,KAAMoC,MAAOnD,EAAckC,aAGpE2M,GACAF,KAIFH,EAAY,WAAkC,IAAjCU,IAAgC,yDAAlBC,EAAkB,wDAGzB,SAAlBzM,EAAU4C,KACV1C,EAAUsI,IAAI,QAGdgE,IACAzM,EAAOyI,IAAI,SACX1I,EAAYC,QAAS,GAGzB,IAAK,IAAIoG,EAAI,EAAGA,EAAI3J,EAASC,QAAUD,EAASO,QAASoJ,IACjDxC,GAAmBwC,IAAM,EACzBtD,GAASsD,EAAG7I,EAAckC,YACO,IAA1BmE,GAAmBwC,GAC1BtD,GAASsD,EAAG7I,EAAcsB,cACO,IAA1B+E,GAAmBwC,GAC1BtD,GAASsD,EAAG7I,EAAce,MACO,IAA1BsF,GAAmBwC,GAC1BtD,GAASsD,EAAG7I,EAAcW,KACO,IAA1B0F,GAAmBwC,IAC1BtD,GAASsD,EAAG7I,EAAcO,QAIZ,cAAlBmC,EAAU4C,KAAuB6J,IACjCtI,MAiBR,MAAO,CAAE0H,QAAOa,QAtHA,WAA6B,IAA5BP,IAA2B,yDAElCrJ,EAAQ1F,EAAsB,GAAKZ,EAASO,QAAUK,EAAsB,GAE9EuG,GAAmBb,IAAU,IAIjCzE,EAAKmK,IAAI,QACT3F,GAASC,EAAOxF,EAAce,MAAM,GAEhC8N,GACAF,IAGAlM,EAAO6C,KACPgJ,GAAYC,EAAOC,EAAW7L,EAAW+L,KAsGxBW,WAlGN,WAA6B,IAA5BR,IAA2B,0DAErB,IAAlBhL,EAAS9C,MACTwE,GAAS1B,EAAS9C,KAAMf,EAAckC,YAAY,GAEtDnB,EAAKmK,IAAI,SAEL2D,GACAF,IAGAlM,EAAO6C,KACPgJ,GAAYC,EAAOC,EAAW7L,EAAW+L,IAsFZE,aAAYJ,YAAWc,WAbzC,WAEf7M,EAAOyI,IAAI,SACX,IAAK,IAAIrC,EAAI,EAAGA,EAAI3J,EAASC,QAAUD,EAASO,QAASoJ,IACrDtD,GAASsD,EAAG7I,EAAckC,YAAY,GAE1CqD,GAASzF,EAAuB,GAAKZ,EAASO,QAAUK,EAAuB,GAAIE,EAAcO,OAAO,GACxGgF,GAASzF,EAAqB,GAAKZ,EAASO,QAAUK,EAAqB,GAAIE,EAAcW,KAAK,GAClGuF,EAAMgF,IAAI,IACVnK,EAAKmK,IAAI,SACTyD,KAGoEY,WAnJrD,WAAsD,IAArD9I,EAAoD,uDAA7CF,GAAWE,KAAMyB,EAA4B,uDAApBwG,EAASpJ,IAAI,GACvC,SAAlB1C,EAAU0C,KAAqC,SAAlB1C,EAAU0C,MAAqC,cAAlB5C,EAAU4C,KAAuB9C,EAAYE,WAI7F,IAAVwF,EACAe,GAAmBxC,IAEnB7D,EAAUsI,IAAI,WACdxI,EAAUwI,IAAI,QACd1I,EAAYE,UAAY,OACxB6D,GAAWI,iBAAkB,EAC7BoC,GAActC,EAAMyB,GAAO,kBAAMtF,EAAUsI,IAAI,WAAS,WAAQtI,EAAUsI,IAAI,QAASxI,EAAUwI,IAAI,aAAc1I,EAAYE,UAAY,iBAuI/DuM,iBChHzEO,OAvEf,WACI,IAAMC,EAAcxK,qBAAWL,GACzBhC,EAAYqC,qBAAWlB,GAFJ,EAGUiB,KAHV,mBAGlBnG,EAHkB,KAGP6Q,EAHO,KAInBC,EAAclB,KA+CpB,OACI,cAACmB,EAAA,EAAIC,KAAL,UACI,eAACC,EAAA,EAAD,CAAaC,GAAI,EAAGC,MAAO,sBAAMnR,UAAWA,EAAjB,wBAA+Ce,GAAG,oBAAoBqQ,SAAU,SAACC,GAAD,OA/ClF,SAACA,GAE9B,GAAsB,SAAlBtN,EAAU0C,KAAoC,SAAlB1C,EAAU0C,IAI1C,OAAQ4K,GACJ,IAAK,qBACDT,EAAYvE,IAAI,sBAChB,MACJ,IAAK,kBACDuE,EAAYvE,IAAI,mBAChB,MACJ,IAAK,8BACDuE,EAAYvE,IAAI,+BAChB,MACJ,IAAK,kBACDuE,EAAYvE,IAAI,mBAChB,MACJ,IAAK,6BACDuE,EAAYvE,IAAI,8BAChB,MACJ,IAAK,+BACDyE,EAAYN,YAAW,GACvBI,EAAYvE,IAAI,gCAChB,MACJ,IAAK,0BACDyE,EAAYnB,WAAU,GACtBmB,EAAYV,cAAa,GACzBQ,EAAYvE,IAAI,2BAChB,MACJ,IAAK,wBACDyE,EAAYnB,WAAU,GACtBmB,EAAYV,cAAa,GACzBQ,EAAYvE,IAAI,yBAChB,MACJ,IAAK,yBACDuE,EAAYvE,IAAI,2BAUqGiF,CAAyBD,IAC9IE,aAAcV,EAAeW,aAAcX,EAD/C,UAGI,cAACI,EAAA,EAAYD,KAAb,CAAkBK,SAAS,qBAA3B,kCACA,cAACJ,EAAA,EAAYD,KAAb,CAAkBK,SAAS,kBAA3B,uBACA,cAACJ,EAAA,EAAYD,KAAb,CAAkBK,SAAS,8BAA3B,sCACA,cAACJ,EAAA,EAAYD,KAAb,CAAkBK,SAAS,kBAA3B,6BACA,cAACJ,EAAA,EAAYD,KAAb,CAAkBK,SAAS,6BAA3B,wCACA,cAACJ,EAAA,EAAYD,KAAb,CAAkBK,SAAS,+BAA3B,2CACA,cAACJ,EAAA,EAAYD,KAAb,CAAkBK,SAAS,0BAA3B,kCACA,cAACJ,EAAA,EAAYD,KAAb,CAAkBK,SAAS,wBAA3B,gCACA,cAACJ,EAAA,EAAYQ,QAAb,IACA,cAACR,EAAA,EAAYD,KAAb,CAAkBK,SAAS,yBAA3B,8CC5CDK,OAzBf,WAMI,IALA,IAAIC,EAAQ,GAERC,GAAW,EACX3G,EAAIjG,EAAS1E,QAER4K,EAAI,EAAGA,EAAIlG,EAASpE,QAASsK,IAC9B0G,IACA3G,EACQ,IACJ2G,GAAW,EACX3G,EAAI,KAGRA,GACSjG,EAAS1E,UACdsR,GAAW,EACX3G,EAAIjG,EAAS1E,QAAU,GAG/BqR,EAAMnH,KAAK,CAACS,EAAGC,IAEnB,MAAO,CAACyG,EApBM,KCDLE,GAAe,WAA0B,IAAzBC,EAAwB,uDAAd,IAAI1G,IACnCuG,EAAQ,GACR1G,EAAI,EACJC,EAAI,EAGJgC,EAAMlI,EAASpE,QAAU,EAC7B,IAAKsK,EAAI,EAAGA,GAAKgC,EAAKhC,IAClByG,EAAMnH,KAAK,CAAC,EAAGU,IACfyG,EAAMnH,KAAK,CAAC,EAAG0C,IACf4E,EAAQ1Q,IAAI,CAAC,EAAG8J,GAAGjE,YACnB6K,EAAQ1Q,IAAI,CAAC,EAAG8L,GAAKjG,YACrBiG,IAGJ,IAAKjC,EAAI,EAAGA,EAAIjG,EAAS1E,QAAS2K,IAC9B0G,EAAMnH,KAAK,CAACS,EAAG,IACf0G,EAAMnH,KAAK,CAACS,EAAGjG,EAASpE,QAAU,IAClCkR,EAAQ1Q,IAAI,CAAC6J,EAAG,GAAGhE,YACnB6K,EAAQ1Q,IAAI,CAAC6J,EAAGjG,EAASpE,QAAU,GAAGqG,YAK1C,IADAiG,EAAMlI,EAASpE,QAAU,EACpBsK,EAAI,EAAGA,GAAKgC,EAAKhC,IAClByG,EAAMnH,KAAK,CAACxF,EAAS1E,QAAU,EAAG4K,IAClCyG,EAAMnH,KAAK,CAACxF,EAAS1E,QAAU,EAAG4M,IAClC4E,EAAQ1Q,IAAI,CAAC4D,EAAS1E,QAAU,EAAG4K,GAAGjE,YACtC6K,EAAQ1Q,IAAI,CAAC4D,EAAS1E,QAAU,EAAG4M,GAAKjG,YACxCiG,IAEJ,OAAOyE,GAYEI,GAAS,SAACtE,GACnB,OAAOjN,KAAKC,MAAMD,KAAKwR,SAAWvE,IAGzBwE,GAAa,SAACxE,GACvB,OAA2C,EAApCjN,KAAKC,MAAMD,KAAKwR,SAAWvE,EAAI,ICN3ByE,OA1Cf,WACI,IAAIJ,EAAU,IAAI1G,IACduG,EAAQE,GAAaC,GAErB7G,EAAI,EACJC,EAAI,EAIR,IAAKD,EAAI,EAAGA,GAAKjG,EAAS1E,QAAU,EAAG2K,GAAK,EACxC,IAAKC,EAAI,EAAGA,GAAKlG,EAASpE,QAAU,EAAGsK,GAAK,EAAG,CAC3C,GAAI4G,EAAQpG,IAAI,CAACT,EAAI,EAAGC,GAAGjE,aAAe6K,EAAQpG,IAAI,CAACT,EAAGC,EAAI,GAAGjE,YAE7D,OADiBzG,KAAKC,MAAsB,EAAhBD,KAAKwR,UAAgB,GAE7C,KAAK,EACDL,EAAMnH,KAAK,CAACS,EAAI,EAAGC,IACnB4G,EAAQ1Q,IAAI,CAAC6J,EAAI,EAAGC,GAAGjE,YACvB,MACJ,KAAK,EACD0K,EAAMnH,KAAK,CAACS,EAAGC,EAAI,IACnB4G,EAAQ1Q,IAAI,CAAC6J,EAAGC,EAAI,GAAGjE,iBAKxB6K,EAAQpG,IAAI,CAACT,EAAI,EAAGC,GAAGjE,aAC9B0K,EAAMnH,KAAK,CAACS,EAAI,EAAGC,IACnB4G,EAAQ1Q,IAAI,CAAC6J,EAAI,EAAGC,GAAGjE,aAChB6K,EAAQpG,IAAI,CAACT,EAAGC,EAAI,GAAGjE,aAC9B0K,EAAMnH,KAAK,CAACS,EAAGC,EAAI,IACnB4G,EAAQ1Q,IAAI,CAAC6J,EAAGC,EAAI,GAAGjE,aAEvBkL,QAAQC,IAAI,oCAEhBT,EAAMnH,KAAK,CAACS,EAAGC,IACf4G,EAAQ1Q,IAAI,CAAC6J,EAAGC,GAAGjE,YAI3B,MAAO,CAAC0K,EApCM,KCHZxI,GACU,EADVA,GAEQ,EA4Dd,SAASkJ,GAAoBpH,EAAGC,EAAGoH,EAAOC,EAAQT,EAASH,GAA8B,IAAvBa,EAAsB,uDAAN,KAG9E,KAAIF,EAAQ,GAAKC,EAAS,GAA1B,CAKA,IAeIE,EACJ,IAfsB,OAAlBD,EACIF,EAAQC,EAAuBpJ,GAC1BmJ,EAAQC,EAAuBpJ,GACpB4I,GAAO,GAEvBS,EACerJ,GAGAA,MAMFA,GAAsB,CAKvC,IAAIuJ,EAAUzH,EAAI,EAAIgH,GAAWM,EAAS,GAI1CE,EAAOvH,EAAI,EAAI+G,GAAWK,EAAQ,GAGlC,IAAK,IAAIK,EAAKzH,EAAGyH,EAAKzH,EAAIoH,EAAOK,IACzBA,IAAOF,IACPd,EAAMnH,KAAK,CAACkI,EAASC,IACrBb,EAAQ1Q,IAAI,CAACsR,EAASC,GAAI1L,aAKlCoL,GAAoBpH,EAAGC,EAAGoH,EAAOI,EAAUzH,EAAG6G,EAASH,EAAOa,GAG9DH,GAAoBK,EAASxH,EAAGoH,EAAOC,GAAUG,EAAUzH,GAAI6G,EAASH,GAAQa,OAC7E,CAEH,IAAII,EAAU1H,EAAI,EAAI+G,GAAWK,EAAQ,GACzCG,EAAOxH,EAAI,EAAIgH,GAAWM,EAAS,GAEnC,IAAK,IAAIM,EAAK5H,EAAG4H,EAAK5H,EAAIsH,EAAQM,IAC1BA,IAAOJ,IACPd,EAAMnH,KAAK,CAACqI,EAAID,IAChBd,EAAQ1Q,IAAI,CAACyR,EAAID,GAAS3L,aAIlCoL,GAAoBpH,EAAGC,EAAG0H,EAAU1H,EAAGqH,EAAQT,EAASH,EAAOa,GAC/DH,GAAoBpH,EAAG2H,EAASN,GAASM,EAAU1H,GAAIqH,EAAQT,EAASH,GAAQa,KAIzEM,OA1Hf,SAA2B/E,GACvB,IAAI+D,EAAU,IAAI1G,IACduG,EAAQE,GAAaC,GAKzB,OAAQ/D,GACJ,IAAK,oBACDsE,GAAoB,EAAG,EAAGrN,EAASpE,QAASoE,EAAS1E,QAASwR,EAASH,GACvE,MACJ,IAAK,6BACDU,GAAoB,EAAG,EAAGrN,EAASpE,QAASoE,EAAS1E,QAASwR,EAASH,GAAO,GAC9E,MACJ,IAAK,+BACDU,GAAoB,EAAG,EAAGrN,EAASpE,QAASoE,EAAS1E,QAASwR,EAASH,GAAO,GAUtF,IADA,IAAIoB,EAAe,CAAC/N,EAAStD,MAAOsD,EAAS9C,KAAM8C,EAASlD,KAxB1B,WAyBzBkI,GACL,IAAIwE,EAASuE,EAAa/I,GAE1B,IAAKwE,EAAQ,iBAEb,IAAIwE,EAAKxE,EAAO,GAAK,GAAK,EAAI,CAACA,EAAO,GAAK,EAAGA,EAAO,IAAM,KACvDZ,EAAQY,EAAO,GAAK,EAAIxJ,EAASpE,QAAU,CAAC4N,EAAO,GAAIA,EAAO,GAAK,GAAK,KACxE9K,EAAO8K,EAAO,GAAK,EAAIxJ,EAAS1E,QAAU,CAACkO,EAAO,GAAK,EAAGA,EAAO,IAAM,KACvEb,EAAOa,EAAO,GAAK,GAAK,EAAI,CAACA,EAAO,GAAIA,EAAO,GAAK,GAAK,KAEzDyE,EAAY,GACZC,EAAiB,EAUrB,GARA,CAACF,EAAIpF,EAAOlK,EAAMiK,GAAMe,SAAQ,SAAAC,GACZ,OAAZA,EACAuE,IACOpB,EAAQpG,IAAIiD,EAAQ1H,cAC3BgM,EAAUzI,KAAKmE,GACfuE,QAGe,IAAnBA,EAAsB,CACtB,IAAIC,EAAmBpB,GAAOkB,EAAUvK,QACxCiJ,EAAM7E,OFnBK,SAACsG,EAAOC,GAC3B,IAAK,IAAIrJ,EAAI,EAAGA,EAAIoJ,EAAM1K,OAAQsB,IAC9B,GAAIqJ,EAAOpM,aAAemM,EAAMpJ,GAAG/C,WAC/B,OAAO+C,EAGf,OAAQ,EEaasJ,CAAQ3B,EAAOsB,EAAUE,IAAoB,KAvBzDnJ,EAAI,EAAGA,EAAI+I,EAAarK,OAAQsB,IAAK,EAArCA,GA2BT,MAAO,CAAC2H,EAjDM,KCyElB,SAAS4B,GAASC,EAAa7M,GAK3B,OAJI6M,EAAY7M,KAAWA,IAEvB6M,EAAY7M,GAAS4M,GAASC,EAAaA,EAAY7M,KAEpD6M,EAAY7M,GAOvB,SAAS8M,GAAMD,EAAaE,EAAWC,EAAQC,IAE3CD,EAASJ,GAASC,EAAaG,OAC/BC,EAASL,GAASC,EAAaI,MAO3BF,EAAUC,GAAUD,EAAUE,GAC9BJ,EAAYG,GAAUC,EAGfF,EAAUC,GAAUD,EAAUE,GACrCJ,EAAYI,GAAUD,GAItBH,EAAYI,GAAUD,EACtBD,EAAUC,IAAW,IAKdE,OAlHf,WAQI,IAPA,IAAI/B,EAAU,IAAI1G,IACduG,EAAQ,GAIRmC,EAAS,GACTC,EAAO,GACF/J,EAAI,EAAGA,EAAIhF,EAAS1E,QAAS0J,IAClC,IAAK,IAAIC,EAAI,EAAGA,EAAIjF,EAASpE,QAASqJ,IAClC6J,EAAO,CAAC9J,EAAGC,IAAM,CAACD,EAAGC,GACrB8J,EAAK,CAAC/J,EAAGC,IAAM,EAMvB,KAAO6H,EAAQ7R,MAAQ+E,EAAS1E,QAAU0E,EAASpE,SAAW,KAAM,CAGhE,IAAIqK,EAAI,CAACgH,GAAWjN,EAAS1E,SAAU2R,GAAWjN,EAASpE,UACvDoT,EAAK,KACLC,EAAK,KACLC,EAAQ,KACRC,EAAQ,KAEZ,OADWpC,GAAO,IAEd,KAAK,EACD,GAAI9G,EAAE,GAAK,EAAI,EAAG,SAClB+I,EAAK,CAAC/I,EAAE,GAAK,EAAGA,EAAE,IAClBgJ,EAAK,CAAChJ,EAAE,GAAK,EAAGA,EAAE,IAClBiJ,EAAQX,GAASO,EAAQ7I,GACzBkJ,EAAQZ,GAASO,EAAQG,GACzB,MACJ,KAAK,EACD,GAAIhJ,EAAE,GAAK,GAAKjG,EAASpE,QAAS,SAClCoT,EAAK,CAAC/I,EAAE,GAAIA,EAAE,GAAK,GACnBgJ,EAAK,CAAChJ,EAAE,GAAIA,EAAE,GAAK,GACnBiJ,EAAQX,GAASO,EAAQ7I,GACzBkJ,EAAQZ,GAASO,EAAQG,GACzB,MACJ,KAAK,EACD,GAAIhJ,EAAE,GAAK,GAAKjG,EAAS1E,QAAS,SAClC0T,EAAK,CAAC/I,EAAE,GAAK,EAAGA,EAAE,IAClBgJ,EAAK,CAAChJ,EAAE,GAAK,EAAGA,EAAE,IAClBiJ,EAAQX,GAASO,EAAQ7I,GACzBkJ,EAAQZ,GAASO,EAAQG,GACzB,MACJ,KAAK,EACD,GAAIhJ,EAAE,GAAK,EAAI,EAAG,SAClB+I,EAAK,CAAC/I,EAAE,GAAIA,EAAE,GAAK,GACnBgJ,EAAK,CAAChJ,EAAE,GAAIA,EAAE,GAAK,GACnBiJ,EAAQX,GAASO,EAAQ7I,GACzBkJ,EAAQZ,GAASO,EAAQG,GACzB,MACJ,QACI,MAAO,GAIXC,IAAUC,IACVxC,EAAMnH,KAAKS,GACX0G,EAAMnH,KAAKwJ,GACXrC,EAAMnH,KAAKyJ,GACXnC,EAAQ1Q,IAAI6J,EAAEhE,YACd6K,EAAQ1Q,IAAI4S,EAAG/M,YACf6K,EAAQ1Q,IAAI6S,EAAGhN,YACfwM,GAAMK,EAAQC,EAAM9I,EAAGgJ,IAI/B,MAAO,CAACtC,EApEM,KCkBHyC,OAxBf,WAKI,IAJA,IAAM/S,EAAO,GADW,EAIA,CAAC2D,EAAS1E,QAAS0E,EAASpE,SAA7C2R,EAJiB,KAITD,EAJS,KAKhBtI,EAAI,EAAGA,EAAIuI,EAAQvI,IACvB,IAAI,IAAIC,EAAI,EAAGA,EAAIqI,EAAOrI,IACtB,GAAGzJ,KAAKwR,SATA,GASuB,CAC3B,GAAGhI,IAAMhF,EAAStD,MAAM,IAAMuI,IAAMjF,EAAStD,MAAM,GAC/C,SACE,GAAGsI,IAAMhF,EAASlD,IAAI,IAAMmI,IAAMjF,EAASlD,IAAI,GACjD,SACE,IAAqB,IAAlBkD,EAAS9C,MAAkB8H,IAAMhF,EAAS9C,KAAK,IAAM+H,IAAMjF,EAAS9C,KAAK,GAC9E,SAEAb,EAAKmJ,KAAK,CAACR,EAAGC,IAM9B,MAAO,CAAC5I,EAnBQ,KCsBLgT,OAxBf,WAKI,IAJA,IACM/S,EAAS,GAFS,EAIA,CAAC0D,EAAS1E,QAAS0E,EAASpE,SAA7C2R,EAJiB,KAITD,EAJS,KAKhBtI,EAAI,EAAGA,EAAIuI,EAAQvI,IACvB,IAAI,IAAIC,EAAI,EAAGA,EAAIqI,EAAOrI,IACtB,GAAGzJ,KAAKwR,SATA,IASuB,CAC3B,GAAGhI,IAAMhF,EAAStD,MAAM,IAAMuI,IAAMjF,EAAStD,MAAM,GAC/C,SACE,GAAGsI,IAAMhF,EAASlD,IAAI,IAAMmI,IAAMjF,EAASlD,IAAI,GACjD,SACE,IAAqB,IAAlBkD,EAAS9C,MAAkB8H,IAAMhF,EAAS9C,KAAK,IAAM+H,IAAMjF,EAAS9C,KAAK,GAC9E,SAEAZ,EAAOkJ,KAAK,CAACR,EAAGC,IAMhC,MAAO,CApBM,GAoBC3I,ICkCHgT,OArDf,WAWI,IAVA,IAAI3C,EAAQ,GAMR4C,EAAY,CAAC,EAAItC,GAAWjN,EAAS1E,QAAU,GAAI,EAAI2R,GAAWjN,EAASpE,QAAU,IACrFuK,EAAU,IAAIC,IACdd,EAAQ,CAACiK,GAENjK,EAAM5B,OAAS,GAAG,CACrB,IAAI8L,EAAcvC,GAAW3H,EAAM5B,QAC/B8D,EAAOlC,EAAMkK,GAEbC,EAAqB,GAErBjI,EAAK,GAAK,GAAK,IAAMrB,EAAQO,IAAI,CAACc,EAAK,GAAK,EAAGA,EAAK,IAAIvF,aACxDwN,EAAmBjK,KAAK,CAAC,CAACgC,EAAK,GAAK,EAAGA,EAAK,IAAK,CAACA,EAAK,GAAK,EAAGA,EAAK,MAEpEA,EAAK,GAAK,EAAIxH,EAASpE,UAAYuK,EAAQO,IAAI,CAACc,EAAK,GAAIA,EAAK,GAAK,GAAGvF,aACtEwN,EAAmBjK,KAAK,CAAC,CAACgC,EAAK,GAAIA,EAAK,GAAK,GAAI,CAACA,EAAK,GAAIA,EAAK,GAAK,KAErEA,EAAK,GAAK,EAAIxH,EAAS1E,UAAY6K,EAAQO,IAAI,CAACc,EAAK,GAAK,EAAGA,EAAK,IAAIvF,aACtEwN,EAAmBjK,KAAK,CAAC,CAACgC,EAAK,GAAK,EAAGA,EAAK,IAAK,CAACA,EAAK,GAAK,EAAGA,EAAK,MAEpEA,EAAK,GAAK,GAAK,IAAMrB,EAAQO,IAAI,CAACc,EAAK,GAAIA,EAAK,GAAK,GAAGvF,aACxDwN,EAAmBjK,KAAK,CAAC,CAACgC,EAAK,GAAIA,EAAK,GAAK,GAAI,CAACA,EAAK,GAAIA,EAAK,GAAK,KAIvC,IAA9BiI,EAAmB/L,QAOvB8D,EAAOiI,EADPD,EAAczC,GAAO0C,EAAmB/L,SAIxCiJ,EAAMnH,KAAKgC,EAAK,IAChBmF,EAAMnH,KAAKgC,EAAK,IAGhBrB,EAAQ/J,IAAIoL,EAAK,GAAGvF,YAGpBqD,EAAME,KAAKgC,EAAK,KAhBZlC,EAAMwC,OAAO0H,EAAa,GAkBlC,MAAO,CAAC7C,EAhDM,KCqDH+C,OA1Df,WAsBI,IArBA,IACI/C,EAAQE,KAoBH7H,EAAI,EAAGA,EAAIhF,EAAS1E,QAAU,EAAG0J,GAAK,EAE3C,IADA,IAAI2K,GAAkB,EACb1K,EAAI,EAAGA,EAAIjF,EAASpE,QAAU,EAAGqJ,GAAK,EAAG,CAC9C,IAAI2K,EAAY,IAAM7C,GAAO,GACzB8C,EAAY,IAAM9C,GAAO,GAGzB6C,GACAjD,EAAMnH,KAAK,CAACR,EAAGC,EAAI,IACnB0H,EAAMnH,KAAK,CAACR,EAAI,EAAGC,EAAI,IAEnB0K,IACKE,IACDlD,EAAMnH,KAAK,CAACR,EAAI,EAAGC,IACnB0H,EAAMnH,KAAK,CAACR,EAAI,EAAGC,EAAI,MAG/B0K,GAAkB,GAIdE,IAAcF,GACdA,GAAkB,EAClBhD,EAAMnH,KAAK,CAACR,EAAI,EAAGC,EAAI,MAEvB0H,EAAMnH,KAAK,CAACR,EAAI,EAAGC,IACnB0H,EAAMnH,KAAK,CAACR,EAAI,EAAGC,EAAI,KAMvC,MAAO,CAAC0H,EArDM,KC2FHmD,OAjFf,WACI,IAAM/Q,EAAYqC,qBAAWlB,GACvB6P,EAAc3O,qBAAWR,GACzBoP,EAAa5O,qBAAWH,GAHV,EAIeE,KAJf,mBAIbnG,EAJa,KAIF6Q,EAJE,KAKdC,EAAclB,KACdvG,EAAQ0L,EAAYtO,IAAI,GAuD9B,OACI,cAACsK,EAAA,EAAIC,KAAL,UACI,eAACC,EAAA,EAAD,CAAaC,GAAI,EAAGC,MAAO,sBAAMnR,UAAWA,EAAjB,8BAAqDe,GAAG,eAAeqQ,SAvD9E,SAACC,GACzB,GAAsB,SAAlBtN,EAAU0C,KAAoC,SAAlB1C,EAAU0C,IAK1C,OAFAqK,EAAYnB,eAAUxH,GAAW,GACjC2I,EAAYf,aACJsB,GACJ,IAAK,0BACD2D,EAAW3I,IAAI,2BACfyE,EAAYJ,WAAWoC,GAAkB,qBAAsBzJ,GAC/D,MACJ,IAAK,mCACD2L,EAAW3I,IAAI,oCACfyE,EAAYJ,WAAWoC,GAAkB,8BAA+BzJ,GACxE,MACJ,IAAK,qCACD2L,EAAW3I,IAAI,sCACfyE,EAAYJ,WAAWoC,GAAkB,gCAAiCzJ,GAC1E,MACJ,IAAK,oBACD2L,EAAW3I,IAAI,qBACfyE,EAAYJ,WAAW0D,KAAqB,GAC5C,MACJ,IAAK,yBACDY,EAAW3I,IAAI,0BACfyE,EAAYJ,WAAW2D,KAAqB,GAC5C,MACJ,IAAK,4BACDW,EAAW3I,IAAI,6BACfyE,EAAYJ,WAAWgB,KAAwBrI,GAC/C,MACJ,IAAK,mBACD2L,EAAW3I,IAAI,oBACfyE,EAAYJ,WAAWwB,KAAe7I,GACtC,MACJ,IAAK,eACD2L,EAAW3I,IAAI,gBACfyE,EAAYJ,WAAWmD,KAAWxK,GAClC,MACJ,IAAK,YACD2L,EAAW3I,IAAI,aACfyE,EAAYJ,WAAW4D,KAAQjL,GAC/B,MACJ,IAAK,aACD2L,EAAW3I,IAAI,cACfyE,EAAYJ,WAAWgE,KAASrL,KAWhCkI,aAAcV,EAAeW,aAAcX,EAD/C,UAGI,cAACI,EAAA,EAAYD,KAAb,CAAkBK,SAAS,0BAA3B,gCACA,cAACJ,EAAA,EAAYD,KAAb,CAAkBK,SAAS,mCAA3B,+CACA,cAACJ,EAAA,EAAYD,KAAb,CAAkBK,SAAS,qCAA3B,iDACA,cAACJ,EAAA,EAAYD,KAAb,CAAkBK,SAAS,oBAA3B,+BACA,cAACJ,EAAA,EAAYD,KAAb,CAAkBK,SAAS,yBAA3B,+BACA,cAACJ,EAAA,EAAYD,KAAb,CAAkBK,SAAS,4BAA3B,kCACA,cAACJ,EAAA,EAAYD,KAAb,CAAkBK,SAAS,mBAA3B,mCACA,cAACJ,EAAA,EAAYD,KAAb,CAAkBK,SAAS,eAA3B,4BACA,cAACJ,EAAA,EAAYD,KAAb,CAAkBK,SAAS,YAA3B,yBACA,cAACJ,EAAA,EAAYD,KAAb,CAAkBK,SAAS,aAA3B,gCC/DD4D,OArBf,YAAuC,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SAAY,EACM9O,mBAAS,GADf,mBAC3B+O,EAD2B,KACbC,EADa,KAE5BtR,EAAYqC,qBAAWlB,GAFK,EAGCiB,KAHD,mBAG3BnG,EAH2B,KAGhB6Q,EAHgB,KAclC,OACI,cAACE,EAAA,EAAIC,KAAL,UACI,cAACD,EAAA,EAAIuE,KAAL,CAAUC,QAXG,WACK,SAAlBxR,EAAU0C,KAAoC,SAAlB1C,EAAU0C,MAI1C4O,GAAgB,SAAAG,GAAe,OAAKA,EAAkB,GAAKL,EAASzM,UACpEyM,EAASC,OAK4BpV,UAAWA,EAAWuR,aAAcV,EAAeW,aAAcX,EAAlG,SAAkHqE,EAAME,QCMrHjP,GAvBC,WACZ,IAAMpC,EAAYqC,qBAAWlB,GACvBuQ,EAAarP,qBAAWL,GAFZ,EAGYM,oBAAS,GAHrB,mBAGXC,EAHW,KAGFC,EAHE,OAIgBF,mBAAS,oBAJzB,mBAIXrG,EAJW,KAIAwG,EAJA,KAoBlB,MAAO,CAACxG,EAdc,WACdsG,GACAE,EAAa,oBACbD,GAAW,KAEY,SAAlBxC,EAAU0C,KAAoC,SAAlB1C,EAAU0C,KAAsC,KAAnBgP,EAAWhP,KAAiC,iCAAnBgP,EAAWhP,IAC9FD,EAAa,gBAEbA,EAAa,kBAEjBD,GAAW,OC8BRmP,OA5Cf,YAA0C,IAApBR,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SAAY,EACG9O,mBAAS,GADZ,mBAC9B+O,EAD8B,KAChBC,EADgB,KAE/BnT,EAAOkE,qBAAWX,GAClB1B,EAAYqC,qBAAWlB,GACvB0L,EAAcxK,qBAAWL,GAJM,EAKFI,KALE,mBAK9BnG,EAL8B,KAKnB6Q,EALmB,KAM/B8E,ECVa,WACnB,IAAMA,EAAUC,kBAAO,GAMvB,OAJAC,qBAAU,WACNF,EAAQG,SAAU,IACnB,IAEIH,EAAQG,QDGCC,GA+BhB,OA7BAF,qBAAU,WACFF,KAEa,IAAbzT,EAAKuE,IACL4O,EAAgB,GAEhBA,EAAgB,MAIrB,CAACnT,EAAKuE,MAEToP,qBAAU,cAIP,CAACT,IAcA,cAACrE,EAAA,EAAIC,KAAL,UACI,cAACD,EAAA,EAAIuE,KAAL,CAAUC,QAbG,WACbI,GAEmB,SAAlB5R,EAAU0C,KAAoC,SAAlB1C,EAAU0C,KAAuC,KAApBmK,EAAYnK,KAAkC,iCAApBmK,EAAYnK,KAIpG0O,EAASC,MAM4BpV,UAAWA,EAAWuR,aAAcV,EAAeW,aAAcX,EAAlG,SAAkHqE,EAAME,QEsGrHY,GAzIG,WAAO,IAAD,EAEgB3P,mBAAS,eAFzB,mBAEb4P,EAFa,KAEDC,EAFC,OAGc7P,mBAAS,IAHvB,mBAGb8P,EAHa,KAGFC,EAHE,KAIdxF,EAAcxK,qBAAWL,GACzBhC,EAAYqC,qBAAWlB,GACvB4C,EAAkB1B,qBAAWd,GAC7B+D,EAAQjD,qBAAWR,GACnB/B,EAAYuC,qBAAWd,GACvBwL,EAAclB,KAEpBiG,qBAAU,WACNO,EAAa,kBACd,IAEHP,qBAAU,WACN,GAA4B,cAAxB/N,EAAgBrB,IAAqB,CACrC,IAAI4P,EAAO,GACX,OAAQzF,EAAYnK,KAChB,IAAK,qBACD4P,EAAO,aACP,MACJ,IAAK,kBACDA,EAAO,KACP,MACJ,IAAK,8BACDA,EAAO,SACP,MACJ,IAAK,kBACDA,EAAO,QACP,MACJ,IAAK,6BACDA,EAAO,mBACP,MACJ,IAAK,+BACDA,EAAO,qBACP,MACJ,IAAK,0BACDA,EAAO,MACP,MACJ,IAAK,wBACDA,EAAO,MACP,MACJ,IAAK,yBACDA,EAAO,aACP,MACJ,QACIA,EAAO,QAGgB,SAAxBvO,EAAgBrB,MACvB4P,EAAO,QAEXH,EAAc,aAAD,OAAcG,EAAd,QAEd,CAACzF,EAAYnK,IAAKqB,EAAgBrB,MAErCoP,qBAAU,WACgB,YAAlB9R,EAAU0C,IACV2P,EAAa,iBAEbA,EAAa,kBAElB,CAACrS,EAAU0C,MAmEd,OACI,cAACsK,EAAA,EAAIC,KAAL,UACI,wBAAQhR,UAAWmW,EAAWZ,QA9DtB,WAEZ,GAAsB,YAAlBxR,EAAU0C,IAAd,CAIO,GAAsB,SAAlB1C,EAAU0C,IAAgB,CACjC,GAAsB,SAAlB5C,EAAU4C,IAEV,YADAqK,EAAYJ,aAGT,GAAIE,EAAYnK,MAAQiB,GAAW5D,UAEtC,YADAgN,EAAYpB,QAjBP,IAAQ4G,EAuBG,KAApB1F,EAAYnK,IACZyP,EAAc,sBAxBGI,EA4Bb,WACI,OAAQ1F,EAAYnK,KAChB,IAAK,qBACD0I,GAAS,WAAY2B,EAAYpB,MAAOrG,EAAM5C,IAAI,IAClD,MACJ,IAAK,kBACD0I,GAAS,QAAS2B,EAAYpB,MAAOrG,EAAM5C,IAAI,IAC/C,MACJ,IAAK,8BACD0I,GAAS,wBAAyB2B,EAAYpB,MAAOrG,EAAM5C,IAAI,IAC/D,MACJ,IAAK,kBACD0I,GAAS,QAAS2B,EAAYpB,MAAOrG,EAAM5C,IAAI,IAC/C,MACJ,IAAK,6BACD0I,GAAS,kBAAmB2B,EAAYpB,MAAOrG,EAAM5C,IAAI,IACzD,MACJ,IAAK,+BACD0I,GAAS,mBAAoB2B,EAAYpB,MAAOrG,EAAM5C,IAAI,IAC1D,MACJ,IAAK,0BACDkF,GAAImF,EAAYpB,MAAOrG,EAAM5C,IAAI,IACjC,MACJ,IAAK,wBACDsG,GAAI+D,EAAYpB,MAAOrG,EAAM5C,IAAI,IACjC,MACJ,IAAK,yBACD+I,GAAa,WAAYsB,EAAYpB,MAAOrG,EAAM5C,IAAI,MA5BlE,kBAAMqK,EAAYnB,YA1B1B4G,GACAD,UAMIxF,EAAYpB,SA2DZ,SAAiDuG,OC9F9CO,OA1Cf,WAA0B,IAAD,EACKnQ,mBAAS,WADd,mBACd8K,EADc,KACPsF,EADO,KAEf1S,EAAYqC,qBAAWlB,GACvBmE,EAAQjD,qBAAWR,GAHJ,EAIcO,KAJd,mBAIdnG,EAJc,KAIH6Q,EAJG,KA+BrB,OAzBAgF,qBAAU,WACNY,EAASpN,EAAM5C,IAAI,MACpB,CAAC4C,EAAM5C,MAwBN,eAACwK,EAAA,EAAD,CAAaC,GAAI,EAAGC,MAAO,uBAAMnR,UAAWA,EAAjB,oBAAoCmR,KAAepQ,GAAG,gBAAgBqQ,SArBxE,SAACC,GAC1B,GAAsB,SAAlBtN,EAAU0C,KAAoC,SAAlB1C,EAAU0C,IAI1C,OAAQ4K,GACJ,IAAK,OACDhI,EAAMgD,IAAI,QACV,MACJ,IAAK,UACDhD,EAAMgD,IAAI,WACV,MACJ,IAAK,OACDhD,EAAMgD,IAAI,UASdkF,aAAcV,EAAeW,aAAcX,EAD/C,UAGI,cAACI,EAAA,EAAYD,KAAb,CAAkBK,SAAS,OAA3B,kBACA,cAACJ,EAAA,EAAYD,KAAb,CAAkBK,SAAS,UAA3B,qBACA,cAACJ,EAAA,EAAYD,KAAb,CAAkBK,SAAS,OAA3B,sBCLGqF,OAnCf,WAAiB,IAAD,EACqBrQ,mBAAS,IAD9B,mBACRsQ,EADQ,KACIC,EADJ,OAEyBvQ,mBAAS,IAFlC,mBAERwQ,EAFQ,KAEMC,EAFN,KAGTlG,EAAcxK,qBAAWL,GAgB/B,OAdA8P,qBAAU,WACe,iCAApBjF,EAAYnK,IACfmQ,EAAc,UAEdA,EAAc,IAGS,4BAApBhG,EAAYnK,KAAyD,0BAApBmK,EAAYnK,IAChEqQ,EAAgB,UAEhBA,EAAgB,MAEf,CAAClG,EAAYnK,MAGf,qBAAK1F,GAAG,WAAR,SACC,+BACC,mCAAK,qBAAKf,UAAU,oBAApB,iBACA,mCAAK,qBAAKA,UAAU,kBAApB,kBACA,qBAAIA,UAAW2W,EAAf,cAA4B,qBAAK3W,UAAU,mBAA3C,eACA,qBAAIA,UAAW6W,EAAf,cAA8B,qBAAK7W,UAAU,qBAA7C,kBACA,mCAAK,qBAAKA,UAAU,wBAApB,qBACA,mCAAK,qBAAKA,UAAU,sBAA0B,qBAAKA,UAAU,uBAA7D,mBACA,mCAAK,qBAAKA,UAAU,+BAApB,yBACA,mCAAK,qBAAKA,UAAU,uBAApB,sBCoHW+W,OAjJf,WAAgC,IAAD,EACe1Q,mBAAS,uCADxB,mBACpB2Q,EADoB,KACLC,EADK,OAEa5Q,mBAAS,IAFtB,mBAEpB6Q,EAFoB,KAENC,EAFM,OAGa9Q,mBAAS,IAHtB,mBAGpB+Q,EAHoB,KAGNC,EAHM,KAIrBzG,EAAcxK,qBAAWL,GACzBuR,EAAmBlR,qBAAWd,GAC9BiS,EAAWnR,qBAAWH,GAND,EAOKI,mBAAS,IAPd,mBAOpBmR,EAPoB,KAOVC,EAPU,OAQgBpR,mBAAS,IARzB,mBAQpBqR,EARoB,KAQJC,EARI,KAyH3B,OA/GA9B,qBAAU,WACN,IAAI+B,EAAW,GACXC,EAAK,GACLC,EAAK,GACT,OAAQlH,EAAYnK,KAChB,IAAK,qBACDmR,EAAW,uBACXC,EAAK,WACLC,EAAK,aACL,MACJ,IAAK,kBACDF,EAAW,YACXC,EAAK,WACLC,EAAK,aACL,MACJ,IAAK,8BACDF,EAAW,2BACXC,EAAK,WACLC,EAAK,qBACL,MACJ,IAAK,kBACDF,EAAW,kBACXC,EAAK,WACLC,EAAK,qBACL,MACJ,IAAK,6BACDF,EAAW,6BACXC,EAAK,WACLC,EAAK,qBACL,MACJ,IAAK,+BACDF,EAAW,+BACXC,EAAK,WACLC,EAAK,qBACL,MACJ,IAAK,0BACDF,EAAW,sBACXC,EAAK,aACLC,EAAK,YACL,MACJ,IAAK,wBACDF,EAAW,qBACXC,EAAK,aACLC,EAAK,qBACL,MACJ,QACIF,EAAW,sCACXC,EAAK,GACLC,EAAK,GAIbb,EAAiBW,GACjBT,EAAgBU,GAChBR,EAAgBS,KAGjB,CAAClH,EAAYnK,MAEhBoP,qBAAU,WACN,IAAIkC,EAAQ,GACRF,EAAK,GACT,OAAQN,EAAS9Q,KACb,IAAK,0BACDsR,EAAQ,0BACRF,EAAK,GACL,MACJ,IAAK,mCACDE,EAAQ,oCACRF,EAAK,GACL,MACJ,IAAK,qCACDE,EAAQ,sCACRF,EAAK,GACL,MACJ,IAAK,oBACDE,EAAQ,oBACRF,EAAK,WACL,MACJ,IAAK,yBACDE,EAAQ,oBACRF,EAAK,WACL,MACJ,IAAK,4BACDE,EAAQ,uBACRF,EAAK,WACL,MACJ,IAAK,mBACDE,EAAQ,wBACRF,EAAK,GACL,MACJ,IAAK,eACDE,EAAQ,iBACRF,EAAK,WACL,MACJ,IAAK,YACDE,EAAQ,cACRF,EAAK,WACL,MACJ,IAAK,aACDE,EAAQ,eACRF,EAAK,GAMbJ,EAAYM,GACZJ,EAAiBE,KAClB,CAACN,EAAS9Q,MAEW,KAApBmK,EAAYnK,KAAuC,cAAzB6Q,EAAiB7Q,IAEvC,qBAAK1F,GAAG,sBAAR,SACKiW,IAIoB,SAAzBM,EAAiB7Q,IAEb,sBAAK1F,GAAG,sBAAR,UACI,4BAAIyW,IADR,IACsB,8BAAIE,EAAJ,iBADtB,oBAI4B,cAAzBJ,EAAiB7Q,IAEpB,sBAAK1F,GAAG,sBAAR,UACI,4BAAIiW,IADR,OAC8B,4BAAIE,IADlC,QACwD,4BAAIE,IAD5D,8BAFD,G,+CClEAY,OAjEf,WAA8B,IAAD,EACC3R,mBAAS,GADV,mBAClB4R,EADkB,KACXC,EADW,OAED7R,oBAAS,GAFR,mBAElB8R,EAFkB,KAEZC,EAFY,OAGO/R,mBAAS,GAHhB,mBAGlBgS,EAHkB,KAGRC,EAHQ,OAIKjS,oBAAS,GAJd,mBAIlBkS,EAJkB,KAITC,EAJS,KAKnBC,EAAWC,GAAKhQ,OActB,OACI,eAACiQ,GAAA,EAAD,CAAOR,KAAMA,EAAMlY,KAAK,KAAK2Y,SAAS,SAASC,UAAQ,EAACC,gBAAgB,QAAxE,UACI,qBAAK9Y,UAAU,qBAAf,mBAAwCiY,EAAxC,YAAiDQ,KACjD,qBAAKzY,UAAU,cAAf,SAA8B0Y,GAAKT,EAAQ,GAAb,MAAyBI,KAEvD,eAACM,GAAA,EAAMI,KAAP,CAAY/Y,UAAU,aAAtB,UACI,mBAAGA,UAAU,iBAAb,SAA+B0Y,GAAKT,EAAQ,GAAb,OAA0BI,KACzD,mBAAGrY,UAAU,kBAAb,SAAgC0Y,GAAKT,EAAQ,GAAb,KAAwBI,KAC7C,IAAVJ,EAAc,qBAAKjY,UAAU,SAAgB,KACnC,IAAViY,EAAc,qBAAKjY,UAAU,iBAAwB,KAC3C,IAAViY,EAAc,qBAAKjY,UAAU,cAAqB,KACxC,IAAViY,EAAc,qBAAKjY,UAAU,SAAgB,KACnC,IAAViY,EAAc,qBAAKjY,UAAU,eAAsB,KACzC,IAAViY,EAAc,qBAAKjY,UAAU,gBAAuB,KAC1C,IAAViY,EAAc,qBAAKjY,UAAU,YAAmB,KACtC,IAAViY,EAAc,qBAAKjY,UAAU,cAAqB,KACxC,IAAViY,EAAc,qBAAKjY,UAAU,UAAiB,KACpC,KAAViY,EAA6B,IAAbI,EAAiB,oBAAGrY,UAAU,kBAAb,sCAAoC,mBAAGD,KAAK,4BAAR,oBAApC,WAAqF,mBAAGA,KAAK,mCAAR,2BAArF,+BAA6J,oBAAGC,UAAU,kBAAb,sCAAwD,mBAAGD,KAAK,4BAAR,oBAAxD,QAA2G,mBAAGA,KAAK,mCAAR,2BAA3G,OAAgL,QAGnX,eAAC4Y,GAAA,EAAMK,OAAP,WACI,cAACC,GAAA,EAAD,CAAQjZ,UAAU,+BAA+BkZ,QAAQ,kBAAkBjZ,KAAK,KAAKsV,QAAS,kBAAM6C,GAAQ,IAA5G,2BACA,cAAC,KAAD,CACIG,QAASA,EACTY,QAAQ,KACRC,QAAQ,eACRC,SAAS,KACTC,SAAS,kBACTrZ,KAAK,KACLsZ,MAAM,UACNC,SAAU,SAACjB,GAEHD,EADAC,EACY,EAEA,GAEhBC,GAAW,SAAAiB,GAAG,OAAKA,QAG3B,cAACR,GAAA,EAAD,CAAQjZ,UAAU,sBAAsBkZ,QAAQ,iBAAiBjZ,KAAK,KAAKsV,QAAS,WAlD5F2C,GAAS,SAAAwB,GAAO,OAAIA,EAAU,GAAK,EAAIA,EAAU,EAAIA,MAkD7C,sBACA,cAACT,GAAA,EAAD,CAAQjZ,UAAU,uBAAuBkZ,QAAQ,kBAAkBjZ,KAAK,KAAKsV,QAAS,WA/C1F0C,EAAQ,EAAIQ,EACZL,GAAQ,GAGZF,GAAS,SAAAwB,GAAO,OAAIA,EAAU,GAAKjB,EAAWiB,EAAU,EAAIA,MA2CpD,yB,oBCdDC,OA9Cf,WAAkB,IAAD,EACWtT,oBAAS,GADpB,mBACN8R,EADM,KACAC,EADA,KAEPwB,EAAc,kBAAMxB,GAAQ,IAelC,OACI,qCACI,qBAAKrX,GAAG,qBAAR,SACI,qBAAKA,GAAG,kBAAkB8Y,cAAY,UAAUC,iBAAe,OAAOC,sBAAoB,SAASxE,QAjB5F,kBAAM6C,GAAQ,IAiBrB,SACI,qBAAKpY,UAAU,OAAOga,IAAI,kCAAkCC,IAAI,SAKxE,cAACtB,GAAA,EAAD,CAAOR,KAAMA,EAAMlY,KAAK,KAAKia,OAAQN,EAAaf,UAAQ,EAACC,gBAAgB,SAA3E,SACI,uBAAM9Y,UAAU,eAAema,SAtB3C,SAAmBC,GACfA,EAAEC,iBACFlI,QAAQC,IAAIgI,EAAE/G,QACdiH,KAAQC,SAAS,cAAe,mBAAoBH,EAAE/G,OAAQ,8BACzDmH,MAAK,SAACC,GACHtI,QAAQC,IAAIqI,EAAOC,SACpB,SAACC,GACAxI,QAAQC,IAAIuI,EAAMD,SAE1Bd,KAaQ,UACI,wBAAOgB,QAAQ,SAAf,UACI,mDAA4B,uBAAOtT,KAAK,OAAO+O,KAAK,YAAYwE,UAAQ,OAE5E,wBAAOD,QAAQ,SAAf,UACI,iDAA0B,uBAAOtT,KAAK,QAAQ+O,KAAK,aAAawE,UAAQ,OAE5E,wBAAOD,QAAQ,SAAf,UACI,iDAA0B,0BAAUvE,KAAK,UAAUwE,UAAQ,OAE/D,kCACI,qCAAc,uBAAOvT,KAAK,SAASzC,MAAM,4BCIlDiW,OA/Bf,WACI,IAAMhK,EAAclB,KAEpB,OACI,qCACI,cAAC,GAAD,IACA,eAAC/P,EAAA,EAAD,CAAQkb,kBAAgB,EAACC,OAAO,KAAKhb,UAAU,SAA/C,UACI,cAACib,EAAD,IACA,cAACpb,EAAA,EAAOqb,OAAR,CAAeC,gBAAc,aAC7B,cAACtb,EAAA,EAAOub,SAAR,CAAiBra,GAAG,WAAWf,UAAU,iBAAzC,SACI,eAAC+Q,EAAA,EAAD,CAAK/Q,UAAU,UAAf,UACI,cAAC,GAAD,IACA,cAAC,GAAD,IACA,cAAC,GAAD,CAAYkV,MAAO,CAAC,UAAW,cAAeC,SAAU,CAACrE,EAAYP,QAASO,EAAYN,cAC1F,cAAC,GAAD,IACA,cAAC,GAAD,CAAS0E,MAAO,CAAC,eAAgBC,SAAU,CAACrE,EAAYL,cACxD,cAAC,GAAD,CAASyE,MAAO,CAAC,yBAA0BC,SAAU,CAACrE,EAAYf,cAClE,cAAC,GAAD,CAASmF,MAAO,CAAC,cAAeC,SAAU,CAACrE,EAAYnB,aACvD,cAAC,GAAD,YAIZ,cAAC,GAAD,IACA,cAAC,GAAD,IACA,cAAC,GAAD,QCIG0L,OA7Bf,WACI,IAAMvK,EAAclB,KAEpB,OACI,qCACI,cAAC,GAAD,IACA,eAAC/P,EAAA,EAAD,CAAQkb,kBAAgB,EAACC,OAAO,KAAKhb,UAAU,SAA/C,UACI,cAACib,EAAD,IACA,cAACpb,EAAA,EAAOqb,OAAR,CAAeC,gBAAc,aAC7B,cAACtb,EAAA,EAAOub,SAAR,CAAiBra,GAAG,WAAWf,UAAU,kBAAzC,SACI,eAAC+Q,EAAA,EAAD,CAAK/Q,UAAU,UAAf,UACI,cAAC,GAAD,IACA,cAAC,GAAD,IACA,cAAC,GAAD,CAAYkV,MAAO,CAAC,UAAW,cAAeC,SAAU,CAACrE,EAAYP,QAASO,EAAYN,cAC1F,cAAC,GAAD,CAAS0E,MAAO,CAAC,eAAgBC,SAAU,CAACrE,EAAYL,cACxD,cAAC,GAAD,CAASyE,MAAO,CAAC,yBAA0BC,SAAU,CAACrE,EAAYf,cAClE,cAAC,GAAD,CAASmF,MAAO,CAAC,cAAeC,SAAU,CAACrE,EAAYnB,aACvD,cAAC,GAAD,YAIZ,cAAC,GAAD,IACA,cAAC,GAAD,QChBG2L,OAlBf,WAEI,OAAIpb,UAAUC,UAAUC,MAAM,YAC1B,iCAEI,cAAC,GAAD,MAGJ,iCAEI,cAAC,GAAD,MCZL,SAASmb,GAAazX,GAEzB,OAAQA,EAAU2C,KACd,IAAK,qBAEL,IAAK,kBAEL,IAAK,8BAEL,IAAK,kBAEL,IAAK,6BACD,MAAO,CAAEpF,MAAM,EAAMC,QAAQ,EAAMY,MAAM,GAC7C,IAAK,+BACD,MAAO,CAAEb,MAAM,EAAMC,QAAQ,EAAMY,MAAM,GAC7C,IAAK,0BAEL,IAAK,wBACD,MAAO,CAAEb,MAAM,EAAMC,QAAQ,EAAOY,MAAM,GAC9C,QACI,MAAO,CAAEb,MAAM,EAAMC,QAAQ,EAAMY,MAAM,IChB9C,SAASsZ,GAAcnL,EAAOvM,GAAgC,IAArBmB,EAAoB,uDAAN,MAGpB,IAAnCsW,GAAazX,GAAWxC,OAYxB+O,EAAMoL,MAAQnY,EAAgBG,EAC1BtC,EAAcC,MAAQD,EAAcE,MACnCF,EAAcC,IAAMD,EAAcG,OAClCgC,EAAgBI,MAAO,IAEvBvC,EAAcC,IAAMD,EAAcE,KAClCiC,EAAgBI,MAAO,GAGtB2M,EAAMoL,MAAQnY,EAAgBC,MAAQyB,EAASC,YAAc/D,GAA6BA,EAC7E,MAAf+D,GACCA,EAAYoH,IAAI,KAChB/I,EAAgBI,MAAO,GAEvBJ,EAAgBI,MAAO,EAGtB2M,EAAMoL,MAAQnY,EAAgBE,KAAOwB,EAASC,YAAc/D,GAA6BA,EAC5E,MAAf+D,GACCA,EAAYoH,IAAI,KAChB/I,EAAgBI,MAAO,GAEvBJ,EAAgBI,MAAO,EAGtB2M,EAAMoL,MAAQnY,EAAgBC,MAAQ8M,EAAMoL,MAAQnY,EAAgBE,MACvD,MAAfyB,GACCA,EAAYoH,KAAKpH,EAAYwB,IAAI3B,QACjCxB,EAAgBI,MAAO,GAEvBJ,EAAgBI,MAAO,GAzCT,MAAfuB,GACC9D,EAAcC,KAAM,EACpBkC,EAAgBI,MAAO,IAEvBvC,EAAcC,IAAMD,EAAcE,KAClCiC,EAAgBI,MAAO,GCuGpBgY,OA3Gf,WAAuB,IAAD,EACoC,CAACtV,qBAAWpC,GAAeoC,qBAAW7B,GAAc6B,qBAAW3B,GAAgB2B,qBAAWzB,GAAqByB,qBAAWd,IAAzK+B,EADW,KACJsU,EADI,KACE/X,EADF,KACUqB,EADV,KACuBpB,EADvB,OAEoB,CAACuC,qBAAWL,GAAmBK,qBAAWR,GAAeQ,qBAAWlB,IAAnGpB,EAFW,KAEAuF,EAFA,KAEOtF,EAFP,KAGZ+M,EAAclB,KAEpBiG,qBAAU,WACNlS,EAAYG,UAAYA,EACxBH,EAAYI,UAAYA,IAEzB,CAACD,EAAU2C,IAAK1C,EAAU0C,MAE7BM,SAAS6U,iBAAiB,WAAW,SAASvL,GACT,SAA9B1M,EAAYI,UAAU0C,KAAgD,SAA9B9C,EAAYI,UAAU0C,KAG9DnD,EAAgBI,MACf8X,GAAcnL,EAAO1M,EAAYG,UAAWmB,MAGpD8B,SAAS6U,iBAAiB,SAAS,SAASvL,IACZ,IAAzB/M,EAAgBI,MACf8X,GAAcnL,EAAO1M,EAAYG,cAGzCiD,SAAS6U,iBAAiB,WAAW,kBAAMD,EAAKtP,IAAI,OAEpD,IAAMyD,EAAkB,WACE,SAAlB/L,EAAU0C,MACW,SAAlB5C,EAAU4C,KACTqK,EAAYf,YAAW,GACvBlM,EAAUwI,IAAI,cAEdyE,EAAYnB,YAEhB5L,EAAUsI,IAAI,UAqEtB,MAAO,CAACwP,iBAjEiB,SAACzB,GAGtB,IAAuB,SAAlBrW,EAAU0C,KAAoC,SAAlB1C,EAAU0C,OAAyC,IAAtBtF,EAAcC,IAA5E,CAIAgZ,EAAEC,iBAEFha,EAASU,GAAK+F,SAASsT,EAAE/G,OAAOtS,IAChC,IAAM+a,EAAiB1U,GAAe/G,EAASU,GAAIsG,GAEhDyU,EAAexU,MACdwI,IACApJ,GAASrG,EAASU,GAAI+a,EAAevU,OAAO,GAC5CoU,EAAKtP,IAAIlL,EAAcC,MAGvBua,EAAKtP,IAAIyP,EAAelV,MAGzBhD,EAAO6C,KACNgJ,GAAYqB,EAAYpB,MAAOoB,EAAYnB,UAAW7L,EAAWuF,KA2C/C0S,eAvCH,SAAC3B,GAGG,SAAlBrW,EAAU0C,KAAoC,SAAlB1C,EAAU0C,MAAyC,IAAtBtF,EAAcC,KAI5Eua,EAAKtP,IAAI,KAgC6B2P,oBA7Bd,SAAC5B,GAGzB,IAAuB,SAAlBrW,EAAU0C,KAAoC,SAAlB1C,EAAU0C,OAAyC,IAAtBtF,EAAcC,IAA5E,CAIAf,EAASW,MAAQ8F,SAASsT,EAAE/G,OAAOtS,IACnC,IAAMkb,EAAoB7U,GAAe/G,EAASU,GAAIsG,GAChD6U,EAAoB9U,GAAe/G,EAASW,MAAOqG,GAEtDsU,EAAKlV,MAAQtF,EAAcC,KAAO8a,EAAkB5U,MAAQjH,EAASU,KAAOV,EAASW,OACpF0F,GAASrG,EAASW,MAAOkb,EAAkB3U,OAAO,GAClDlH,EAASU,GAAK+F,SAASzG,EAASW,OAChC8O,KAEK6L,EAAKlV,MAAQtF,EAAcC,KAAoB,KAAbua,EAAKlV,KAAcyV,EAAkB5U,OAC5EZ,GAASrG,EAASU,GAAIkb,EAAkB5U,OAAO,GAC/CA,EAAMgF,IAAI,CAAClL,cAAe8a,EAAkBrV,KAAMtC,MAAO4X,EAAkBtV,OAC3EF,GAASrG,EAASW,MAAOib,EAAkBrV,MAAM,GACjDvG,EAASU,GAAK+F,SAASzG,EAASW,OAChC8O,KAGDlM,EAAO6C,KAAoB,KAAbkV,EAAKlV,KAClBgJ,GAAYqB,EAAYpB,MAAOoB,EAAYnB,UAAW7L,EAAWuF,OC/D9D8S,OA1Cf,WAAoB,IAAD,EACkB,CAAC9b,EAASC,QAASD,EAASO,QAASP,EAASJ,MAAxEK,EADQ,KACCM,EADD,KACUX,EADV,KAGTmc,EAAMC,MAAMC,KAAKD,MAAM/b,GAAS4P,QAChCqM,EAAMF,MAAMC,KAAKD,MAAMzb,GAASsP,QAEhCsM,EAAad,KANJ,EAOiD,CAACc,EAAWX,iBAAkBW,EAAWT,eAAgBS,EAAWR,qBAA7HH,EAPQ,KAOUE,EAPV,KAO0BC,EAP1B,KASTS,EAAcL,EAAIM,KAAI,SAACC,EAAUhW,GACnC,OACI,oBAAgB4L,OAAQtS,EAAxB,SACKsc,EAAIG,KAAI,SAACE,EAAUjW,GAEhB,OACI,oBAAI5F,GAAI4b,EAAW/b,EAAUgc,EAAsB5c,UAAWmB,EAAckC,WAAYiP,MAAOrS,EAAM4c,UAAWd,EAAgBe,YAAajB,EAAkBtK,aAAcyK,GAAjIrV,OAJ/CA,MAoBjB,OANAkP,qBAAU,WACN9O,SAASC,gBAAgB/F,EAAuB,GAAKZ,EAASO,QAAUK,EAAuB,IAAIgG,YAAYjH,UAAYmB,EAAcO,MACzIqF,SAASC,gBAAgB/F,EAAqB,GAAKZ,EAASO,QAAUK,EAAqB,IAAIgG,YAAYjH,UAAYmB,EAAcW,MACtI,IAIC,qBAAK9B,UAAU,eAAf,SACI,uBAAOe,GAAG,QAAQf,UAAU,QAAQ+c,MAAM,SAASC,OAAO,IAAIC,YAAY,IAA1E,SACI,gCACKR,S,oCCsBNS,OAlDf,WAAuB,MAE6B,CAAC9W,qBAAWzB,GAAqByB,qBAAW3B,GAAgB2B,qBAAWL,GAAmBK,qBAAWR,IAA9IX,EAFY,KAECrB,EAFD,KAESE,EAFT,KAEoBuF,EAFpB,OAGahD,oBAAS,GAHtB,mBAGZ8W,EAHY,KAGFC,EAHE,OAIK/W,mBAAS,GAJd,mBAIZ8R,EAJY,KAINC,EAJM,KAKbtH,EAAclB,KA+BpB,OA7BAiG,qBAAU,WACHsH,IACC/E,GAAQ,SAAAD,GAAI,OAAIA,EAAO,KACvBkF,YAAW,WACPjF,GAAQ,SAAAD,GACJ,OAAY,IAATA,EACQ,EAEAA,EAAO,OAGvBjX,IAGPkc,GAAY,KAEb,CAACnY,EAAYwB,MAEhBoP,qBAAU,WACM,IAATsC,GAAcvU,EAAO6C,KAA+C,IAAxCwJ,OAAOC,KAAKlL,EAAS1D,QAAQoH,QACxD+G,GAAYqB,EAAYpB,MAAOoB,EAAYnB,UAAW7L,EAAWuF,KAGtE,CAAC8O,IAOA,8BACI,cAACQ,GAAA,EAAD,CAAOR,KAAQA,EAAO,EAAGlY,KAAO,KAAKia,OANzB,WAChB9B,EAAQ,IAKwDU,gBAAkB,cAA9E,SACI,cAACH,GAAA,EAAMI,KAAP,UACI,eAACuE,GAAA,EAAD,WACI,cAACC,GAAA,EAAD,CAAKrM,GAAM,EAAX,SAAc,qBAAKlR,UAAY,kBAC/B,cAACud,GAAA,EAAD,UAAK,cAACC,GAAA,EAAD,CAAaxd,UAAY,WAAWyd,IAAKxY,EAAYwB,IAAI5B,MAAO6Y,MAAOzY,EAAYwB,IAAI5B,MAAO8Y,IAAOzc,EAAsB2J,IAAO3J,gBCzBhJ0c,OAtBf,WACC,IAAM7Z,EAAYqC,qBAAWlB,GAQ7B,OANA2Q,qBAAU,WACTwH,YAAW,WAAKtZ,EAAUsI,IAAI,UAAW,OAEvC,IAGmB,YAAlBtI,EAAU0C,IACL,cAACoX,GAAA,EAAD,CAASha,UAAU,SAASqV,QAAQ,YAIrC,sBAAKnY,GAAK,KAAV,UACI,cAAC,GAAD,IACT,cAAC,GAAD,QCiCW+c,OAxCf,WAAgB,IAAD,EAC2BC,qBAAW/X,E5CgErB,I4CjEjB,mBACNgY,EADM,KACQC,EADR,OAE2BF,qBAAW1Y,EAAkBD,GAFxD,mBAEN8Y,EAFM,KAEQC,EAFR,OAGiBJ,qBAAWpY,EAAaD,GAHzC,mBAGN0Y,EAHM,KAGGC,EAHH,OAImBN,qBAAWjY,EAAcD,GAJ5C,mBAINyY,EAJM,KAIIC,EAJJ,OAKaR,qBAAW5Z,EAAcD,GALtC,mBAKNmD,EALM,KAKCmX,EALD,OAMWT,qBAAWvZ,E7CgHV,I6CtHZ,mBAMNmX,EANM,KAMA8C,EANA,OAOeV,qBAAWrZ,E7CmIZ,O6C1Id,mBAONd,GAPM,KAOE8a,GAPF,QAQyBX,qBAAWhZ,EAAoBH,GARxD,qBAQNK,GARM,MAQO0Z,GARP,SASqBZ,qBAAWvY,EAAwBD,GATxD,qBASN1B,GATM,MASK+a,GATL,SAUWb,qBAAW7X,G5CmFV,I4C7FZ,qBAUN0B,GAVM,MAUAiX,GAVA,MAYb,OACE,qBAAK7e,UAAU,MAAf,SACE,cAACiG,EAAY6Y,SAAb,CAAsBja,MAAO,CAAE4B,IAAKmB,GAAMyE,IAAKwS,IAA/C,SACE,cAACvZ,EAAuBwZ,SAAxB,CAAiCja,MAAO,CAAE4B,IAAK5C,GAAWwI,IAAKuS,IAA/D,SACE,cAACja,EAAmBma,SAApB,CAA6Bja,MAAO,CAAE4B,IAAKxB,GAAaoH,IAAKsS,IAA7D,SACE,cAACla,EAAcqa,SAAf,CAAwBja,MAAO,CAAE4B,IAAK7C,GAAQyI,IAAKqS,IAAnD,SACE,cAACna,EAAYua,SAAb,CAAsBja,MAAO,CAAE4B,IAAKkV,EAAMtP,IAAKoS,GAA/C,SACE,cAACza,EAAa8a,SAAd,CAAuBja,MAAO,CAAE4B,IAAKY,EAAOgF,IAAKmS,GAAjD,SACE,cAAC5Y,EAAakZ,SAAd,CAAuBja,MAAO,CAAE4B,IAAK6X,EAAUjS,IAAKkS,GAApD,SACE,cAAC9Y,EAAYqZ,SAAb,CAAsBja,MAAO,CAAE4B,IAAK2X,EAAS/R,IAAKgS,GAAlD,SACE,cAACnZ,EAAiB4Z,SAAlB,CAA2Bja,MAAO,CAAE4B,IAAKyX,EAAc7R,IAAK8R,GAA5D,SACE,eAACpY,EAAiB+Y,SAAlB,CAA2Bja,MAAO,CAAE4B,IAAKuX,EAAc3R,IAAK4R,GAA5D,UACE,cAAC,GAAD,IACA,cAAC,GAAD,4BC5BXc,GAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBzE,MAAK,YAAkD,IAA/C0E,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCAdO,IAASC,OAEP,cAAC,GAAD,IAEAzY,SAASC,eAAe,SAM1B+X,O","file":"static/js/main.07ffa39f.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Navbar } from 'react-bootstrap';\r\n\r\nfunction logo() {\r\n    return (\r\n        <Navbar.Brand href=\"/PathFinding/\" className='navbar-logo'>\r\n            {/* <img\r\n                src={process.env.PUBLIC_URL + '/logo.png'} // 取得public資料夾路徑\r\n                width=\"50\"\r\n                height=\"50\"\r\n                className='d-inline-block'\r\n                variant='test'\r\n                alt='Logo'\r\n            /> {' '} */}\r\n                    PathFinding\r\n        </Navbar.Brand>\r\n    )\r\n}\r\n\r\nexport default logo\r\n","import { createContext } from 'react'\r\nimport { position } from '../../Core/index'\r\n\r\n\r\nconst size = () => {\r\n    // console.log(navigator.userAgent)\r\n    if (navigator.userAgent.match(/Mobile/i)) {\r\n        return 15\r\n    } else {\r\n        return 23\r\n    }\r\n}\r\n\r\nconst objectHeight = () => {\r\n    if (navigator.userAgent.match(/Mobile/i)) {\r\n        return 120 + 0\r\n    } else {\r\n        return 162 + 100\r\n    }\r\n}\r\n\r\nexport const tableVar = {\r\n    rowSize: adjust(Math.floor((window.innerHeight - objectHeight()) / size())),\r\n    colSize: adjust(Math.floor(window.screen.availWidth / size())),\r\n    size: size(),\r\n\r\n    id: 0,     // MouseEvent ID\r\n    newId: 0\r\n}\r\n\r\nexport const originPos = {\r\n    origin_start: [adjust(Math.floor(tableVar.rowSize / 2)), adjust(Math.floor(tableVar.colSize / 4))],\r\n    origin_end: [adjust(Math.floor(tableVar.rowSize / 2)), adjust(tableVar.colSize - Math.floor(tableVar.colSize / 4))],\r\n    origin_bomb: [adjust(Math.floor(tableVar.rowSize / 2)), adjust(Math.floor(tableVar.colSize / 2))]\r\n\r\n}\r\n\r\nexport const weightValueRange = { // adjust weight range\r\n    max: 20,\r\n    min: 0,\r\n    init: 20,\r\n    increase: 5,\r\n    waiting: 2000\r\n}\r\n\r\n// 所有的CSS\r\nexport const componentKind = {\r\n    add: \"wall\",\r\n    wall: \"wall\",\r\n\r\n    /*---------dynamic---------*/\r\n\r\n    weight: \"weight\",\r\n    weightSearchBomb: \"weightSearchBomb\",\r\n    weightSearch: \"weightSearch\",\r\n    weightPath: \"weightPath\",\r\n\r\n    start: \"start\",\r\n    startSearchBomb: \"startSearchBomb\",\r\n    startSearch: \"startSearch\",\r\n    startPath: \"startPath\",\r\n\r\n    end: \"end\",\r\n    endSearchBomb: \"endSearchBomb\",\r\n    endSearch: \"endSearch\",\r\n    endPath: \"endPath\",\r\n\r\n    bomb: \"bomb\",\r\n    bombSearchBomb: \"bombSearchBomb\",\r\n    bombSearch: \"bombSearch\",\r\n    bombPath: \"bombPath\",\r\n\r\n    search: \"search\",\r\n    searchBomb: \"searchBomb\",\r\n    path: \"path\",\r\n\r\n    /*----------static-----------*/\r\n\r\n    weightStatic: \"weightStatic\",\r\n    weightSearchBombStatic: \"weightSearchBombStatic\",\r\n    weightSearchStatic: \"weightSearchStatic\",\r\n    weightPathStatic: \"weightPathStatic\",\r\n\r\n    searchStatic: \"searchStatic\",\r\n    searchBombStatic: \"searchBombStatic\",\r\n    pathStatic: \"pathStatic\",\r\n\r\n    /*----------------------------*/\r\n\r\n    pathHead: \"pathHead\",\r\n    pathHeadLeft: \"pathHeadLeft\",\r\n    pathHeadRight: \"pathHeadRight\",\r\n    pathHeadUp: \"pathHeadUp\",\r\n    pathHeadDown: \"pathHeadDown\",\r\n\r\n    background: \"background\"\r\n}\r\n\r\n// keyboard的種類\r\nexport const keyboardSupport = {\r\n    plus: \"+\", // change weight value\r\n    sub: \"-\",\r\n\r\n    w: \"w\", // add weight\r\n    down: true,\r\n}\r\n\r\nexport const synchronize = {\r\n    update: true,            // 因為reducer不同步而新增\r\n    animation: \"Algorithm\",\r\n\r\n    algorithm: \"\",           // 因為第一次 addEventListener reducer 會是空白\r\n    sysStatus: \"IDLE\"\r\n}\r\n\r\n// touch status // 紀錄 start end bomb 與哪個component重疊\r\nexport const touchContext = createContext()\r\nexport const touchInitial = { start: componentKind.background, end: componentKind.background, bomb: componentKind.background }\r\nexport const touchReducer = (state, action) => {\r\n    switch (action.componentKind) {\r\n        case componentKind.start:\r\n            return { ...state, start: action.under }\r\n        case componentKind.end:\r\n            return { ...state, end: action.under }\r\n        case componentKind.bomb:\r\n            return { ...state, bomb: action.under }\r\n        default:\r\n            return touchInitial\r\n    }\r\n}\r\n\r\n// move component // 紀錄目前滑鼠目前是抓住哪個component\r\nexport const moveContext = createContext()\r\nexport const moveInitial = \"\"\r\nexport const moveReducer = (state, action) => {\r\n    switch (action) {\r\n        case componentKind.start:\r\n            return action\r\n        case componentKind.end:\r\n            return action\r\n        case componentKind.bomb:\r\n            return action\r\n        case componentKind.wall:\r\n            return action\r\n        case componentKind.weight:\r\n            return action\r\n        default:\r\n            return moveInitial\r\n    }\r\n}\r\n\r\n// result update status // 判斷是否要直接顯示演算法的結果\r\nexport const updateContext = createContext()\r\nexport const updateInitial = false\r\nexport const updateReducer = (state, action) => {\r\n    switch (action) {\r\n        case \"True\":\r\n            return true\r\n        case \"False\":\r\n            return false\r\n        default:\r\n            return updateInitial\r\n    }\r\n}\r\n\r\n// weightValue // 更新weightValue，當weightValue = Max or Min時，可以true和false切換讓weightModal出現\r\nexport const weightValueContext = createContext()\r\nexport const weightValueInitial = { value: weightValueRange.init, status: true }\r\nexport const weightValueReducer = (state, action) => {\r\n    switch (action) {\r\n        case \"+\":\r\n            position.weightValue = state.value + weightValueRange.increase\r\n            return { value: position.weightValue, status: true }\r\n        case \"-\":\r\n            position.weightValue = state.value - weightValueRange.increase\r\n            return { value: position.weightValue, status: true }\r\n        case true:\r\n            return { value: position.weightValue, status: true }\r\n        case false:\r\n            return { value: position.weightValue, status: false }\r\n        default:\r\n            return weightValueInitial\r\n    }\r\n}\r\n\r\n// 保證奇數\r\nexport function adjust(size) {\r\n    if (size % 2 === 0) {\r\n        return size - 1\r\n    } else {\r\n        return size\r\n    }\r\n\r\n}\r\n\r\n","import React from 'react'\r\nimport { tableVar, weightValueRange, adjust } from '../Frontend/TableHelper/TableIndex'\r\n\r\n// component position\r\nexport var position = {\r\n    start: [adjust(Math.floor(tableVar.rowSize / 2)), adjust(Math.floor(tableVar.colSize / 4))],\r\n    end: [adjust(Math.floor(tableVar.rowSize / 2)), adjust(tableVar.colSize - Math.floor(tableVar.colSize / 4))],\r\n    bomb: false,\r\n    wall: [],\r\n    weight: [],\r\n    weightValue: weightValueRange.init,\r\n    rowSize: tableVar.rowSize,\r\n    colSize: tableVar.colSize\r\n}\r\n\r\n\r\n// 目前系統狀態\r\nexport const sysStatusContext = React.createContext();\r\nexport const initialsysStatus = \"LOADING\";\r\nexport const sysStatusReducer = (state, action) => {\r\n    switch (action) {\r\n        case 'IDLE':\r\n            return 'IDLE';\r\n        case 'STOP':\r\n            return 'STOP';\r\n        case 'RUNNING':\r\n            return 'RUNNING';\r\n        case 'LOADING':\r\n            return 'LOADING';\r\n        default:\r\n            return initialsysStatus;\r\n    }\r\n}\r\n\r\n// 目前Animation狀態\r\nexport const animationStatusContext = React.createContext();\r\nexport const animationStatusInitial = \"Algorithm\";\r\nexport const animationStatusReducer = (state, action) => {\r\n    switch (action) {\r\n        case 'Maze':\r\n            return 'Maze';\r\n        case 'Algorithm':\r\n            return 'Algorithm';\r\n        default:\r\n            return animationStatusInitial;\r\n    }\r\n}\r\n\r\n// Bomb status\r\nexport const bombContext = React.createContext();\r\nexport const bombInitial = false;\r\nexport const bombReducer = (state, action) => {\r\n    switch (action) {\r\n        case 'True':\r\n            return true;\r\n        case 'False':\r\n            return false;\r\n        default:\r\n            return bombInitial\r\n    }\r\n}\r\n\r\n// Speed\r\nexport const speedContext = React.createContext();\r\nexport const speedInitial = [\"Fast\", 20];\r\nexport const speedReducer = (state, action) => {\r\n    switch (action) {\r\n        case 'Fast':\r\n            return [\"Fast\", 20];\r\n        case 'Average':\r\n            return [\"Average\", 100];\r\n        case 'Slow':\r\n            return [\"Slow\", 1000];\r\n        default:\r\n            return bombInitial\r\n    }\r\n}\r\n\r\n// 目前系統是哪種演算法\r\nexport const algorithmContext = React.createContext();\r\nexport const initialAlgorithm = \"\";\r\nexport const algorithmReducer = (state, action) => {\r\n    switch (action) {\r\n        case 'Algorithm_Dijkstra':\r\n            return 'Algorithm_Dijkstra';\r\n        case 'Algorithm_AStar':\r\n            return 'Algorithm_AStar';\r\n        case \"Algorithm_Greedy_Best_First\":\r\n            return 'Algorithm_Greedy_Best_First';\r\n        case \"Algorithm_Swarm\":\r\n            return 'Algorithm_Swarm';\r\n        case \"Algorithm_Convergent_Swarm\":\r\n            return 'Algorithm_Convergent_Swarm';\r\n        case \"Algorithm_Bidrectional_Swarm\":\r\n            return 'Algorithm_Bidrectional_Swarm';\r\n        case \"Algorithm_Breadth_First\":\r\n            return 'Algorithm_Breadth_First';\r\n        case \"Algorithm_Depth_First\":\r\n            return 'Algorithm_Depth_First';\r\n        case \"Algorithm_Dijkstra_old\":\r\n            return \"Algorithm_Dijkstra_old\";\r\n        default:\r\n            return initialAlgorithm;\r\n    }\r\n}\r\n\r\n// 目前系統是哪種Maze\r\nexport const mazeContext = React.createContext();\r\nexport const initialMaze = \"\";\r\nexport const mazeReducer = (state, action) => {\r\n    switch (action) {\r\n        case 'Maze_Recursive_Division':\r\n            return 'Maze_Recursive_Division';\r\n        case 'Maze_Recursive_Division_vertical':\r\n            return 'Maze_Recursive_Division_vertical';\r\n        case \"Maze_Recursive_Division_horizontal\":\r\n            return 'Maze_Recursive_Division_horizontal';\r\n        case \"Maze_Basic_Random\":\r\n            return 'Maze_Basic_Random';\r\n        case \"Maze_Basic_Weight_Maze\":\r\n            return 'Maze_Basic_Weight_Maze';\r\n        case \"Maze_Simple_stair_pattern\":\r\n            return 'Maze_Simple_stair_pattern';\r\n        case \"Maze_Binary_Tree\":\r\n            return 'Maze_Binary_Tree';\r\n        case \"Maze_Kruskal\":\r\n            return 'Maze_Kruskal';\r\n        case \"Maze_Prim\":\r\n            return \"Maze_Prim\";\r\n        case \"Maze_Eller\":\r\n            return \"Maze_Eller\";\r\n        default:\r\n            return initialAlgorithm;\r\n    }\r\n}","import { useState, useContext } from 'react';\r\nimport { sysStatusContext } from '../../../Core';\r\nimport '../../../App.scss';\r\n\r\nconst Colored = () => {\r\n    const sysStatus = useContext(sysStatusContext);\r\n    const [isHover, setIsHover] = useState(false);\r\n    const [className, setClassName] = useState(\"nav-link-default\");\r\n\r\n    const toggleHandler = () => {\r\n        if (isHover) {\r\n            setClassName(\"nav-link-default\");\r\n            setIsHover(false);\r\n        } else {\r\n            if (sysStatus.get !== \"IDLE\" && sysStatus.get !== \"STOP\") {\r\n                setClassName(\"nav-link-red\");\r\n            } else {\r\n                setClassName(\"nav-link-green\");\r\n            }\r\n            setIsHover(true);\r\n        }\r\n    }\r\n\r\n    return [className, toggleHandler];\r\n}\r\n\r\nexport default Colored\r\n","import { componentKind, tableVar } from './TableIndex'\r\nimport { position } from '../../Core/index'\r\n\r\n\r\nexport function setTable(index, kind, setPosition = false){\r\n\r\n    if(typeof index !== \"number\"){ // 讓 [posx, posy] 和 ID 都能作為此function的input\r\n        index = parseInt(index[0]) * tableVar.colSize + parseInt(index[1])\r\n    }\r\n\r\n    if(index < 0){\r\n        return\r\n    }\r\n\r\n    document.getElementById(index.toString()).className = kind\r\n\r\n    if(setPosition){ // 有些場景調用setTable只是換CSS不須更新position\r\n\r\n        const pos = [Math.floor(index / tableVar.colSize), index % tableVar.colSize]\r\n\r\n        if(position.wall[pos]){\r\n            delete position.wall[pos]\r\n        }else if(position.weight[pos]){\r\n            delete position.weight[pos]\r\n        }\r\n    \r\n        if(kind === componentKind.wall){\r\n            position.wall[pos] = true\r\n        }else if(kind === componentKind.weight){\r\n            position.weight[pos] = true\r\n        }else if(kind === componentKind.start){\r\n            position.start = pos\r\n        }else if(kind === componentKind.end){\r\n            position.end = pos\r\n        }else if(kind === componentKind.bomb){\r\n            position.bomb = pos\r\n        }else if(kind === componentKind.background){\r\n            if(position.bomb[0] === pos[0] && position.bomb[1] === pos[1]){\r\n                position.bomb = false\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    // console.log(position)\r\n\r\n}","import { tableVar, componentKind } from './TableIndex'\r\nimport { position } from '../../Core/index'\r\n\r\n\r\nfunction addComponentKind(kind) {\r\n    switch (kind) {\r\n        case componentKind.add:\r\n            return componentKind.background\r\n        default:\r\n            return componentKind.add\r\n    }\r\n}\r\n\r\nexport function WhichComponent(id, touch){ // MouseEvent 分類\r\n\r\n    var pos = id\r\n\r\n    if(typeof id === \"number\"){\r\n        pos = [Math.floor(parseInt(id) / tableVar.colSize), parseInt(id) % tableVar.colSize]\r\n    }\r\n\r\n    if(position.start[0] === pos[0] && position.start[1] === pos[1]){\r\n        return {kind: componentKind.start, touch: touch.get.start, type: 0}\r\n    }else if(position.end[0] === pos[0] && position.end[1] === pos[1]){\r\n        return {kind: componentKind.end, touch: touch.get.end, type: 0}\r\n    }else if(position.bomb !== false && position.bomb[0] === pos[0] && position.bomb[1] === pos[1]){\r\n        return {kind: componentKind.bomb, touch: touch.get.bomb, type: 0}\r\n    }else if(position.wall[pos]){\r\n        return {kind: componentKind.wall, rKind: addComponentKind(componentKind.wall), type: 1}\r\n    }else if(position.weight[pos]){\r\n        return {kind: componentKind.weight, rKind: addComponentKind(componentKind.weight), type: 1}\r\n    }else{\r\n        return {kind: componentKind.background, rKind: componentKind.add, type: 1}\r\n    }\r\n\r\n}\r\n\r\n// meaning of return value: 0 => start, 1 => end, 2 => bomb (gas), 3 => weight, 4 => wall, 5 => other (empty)\r\nexport function WhichComponentSame(id){ // component 分類\r\n\r\n    var pos = id\r\n\r\n    if(typeof id === \"string\" || typeof id === \"number\"){\r\n        pos = [Math.floor(parseInt(id) / tableVar.colSize), parseInt(id) % tableVar.colSize]\r\n    }\r\n\r\n    if(position.start[0] === pos[0] && position.start[1] === pos[1]){\r\n        return 0\r\n    }else if(position.end[0] === pos[0] && position.end[1] === pos[1]){\r\n        return 1\r\n    }else if(position.bomb !== false && position.bomb[0] === pos[0] && position.bomb[1] === pos[1]){\r\n        return 2\r\n    }else if(position.weight[pos]){\r\n        return 3\r\n    }else if(position.wall[pos]){\r\n        return 4\r\n    }else{\r\n        return 5\r\n    }\r\n\r\n}\r\n\r\nexport function StartEndBombWeight(type, start, end, bomb, weight){ // 回傳該type為start end bomb weight何者\r\n\r\n    switch (type) {\r\n        case 0:\r\n            return start\r\n        case 1:\r\n            return end\r\n        case 2:\r\n            return bomb\r\n        case 3:\r\n            return weight\r\n        default:\r\n            return null\r\n    }\r\n\r\n}","import { componentKind } from './TableIndex'\r\nimport { setTable } from './SetTable'\r\nimport { WhichComponentSame, StartEndBombWeight } from './WhichComp'\r\nimport { position } from '../../Core/index'\r\n\r\n\r\nexport const stopStatus = { // 暫停時的狀態\r\n    search: [],\r\n    bomb: [],\r\n    path: [],\r\n    pathDirection: [],\r\n\r\n    algorithm: \"\",\r\n\r\n    maze: 0,\r\n    mazeResult: [],\r\n\r\n    animationStatus: false,\r\n    complete: true\r\n}\r\n\r\nexport function resetAnimation(){\r\n    stopStatus.search = []\r\n    stopStatus.bomb = []\r\n    stopStatus.path = []\r\n    stopStatus.pathDirection = []\r\n    stopStatus.maze = 0\r\n\r\n    stopStatus.animationStatus = false\r\n    stopStatus.complete = true\r\n}\r\n\r\n/* Search */\r\n\r\nclass searchAnimation_pos{\r\n    constructor(){\r\n        this.className = undefined;\r\n        this.className1 = undefined;\r\n        this.className2 = undefined;\r\n\r\n        this.id = undefined;\r\n        this.newid = undefined;\r\n        this.d = undefined;\r\n        this.items = undefined;\r\n    }\r\n\r\n    getItems(container){\r\n        if(container.length > 0){\r\n            this.items = [container[0].shift()]\r\n            if(this.items[0] === undefined) {container.shift()}\r\n        } else {\r\n            this.items = [undefined]\r\n        }\r\n    }\r\n\r\n    getClassName(){};\r\n    runAnimation(){};\r\n}\r\n\r\nclass searchAnimation_search extends searchAnimation_pos{\r\n    getClassName(id){\r\n        this.className1 = (isWall(id) || isPath(id)) ? componentKind.search : StartEndBombWeight(WhichComponentSame(id), componentKind.startSearch, componentKind.endSearch, componentKind.bombSearch, componentKind.weightSearch)\r\n        this.className2 = (isWall(id) || isPath(id)) ? componentKind.searchBomb : StartEndBombWeight(WhichComponentSame(id), componentKind.startSearchBomb, componentKind.endSearchBomb, componentKind.bombSearch, componentKind.weightSearchBomb)\r\n        return this.className = (position.bomb === false) ? this.className1 : this.className2\r\n    }\r\n\r\n    runAnimation(container){\r\n        this.getItems(container)\r\n\r\n        this.id = this.items[0]\r\n        if(this.id === undefined || container.length === 0){\r\n            return false\r\n        }\r\n        \r\n        this.getClassName(this.id)\r\n        setTable(this.id, this.className)\r\n        return true\r\n    }\r\n    \r\n}\r\n\r\nclass searchAnimation_bomb extends searchAnimation_pos{\r\n    getClassName(id){\r\n        this.className = (isWall(id) || isPath(id)) ? componentKind.search : StartEndBombWeight(WhichComponentSame(id), componentKind.startSearch, componentKind.endSearch, componentKind.bombSearch, componentKind.weightSearch)\r\n    }\r\n\r\n    runAnimation(container){\r\n        this.getItems(container)\r\n\r\n        this.id = this.items[0]\r\n        if(this.id === undefined || container.length === 0){\r\n            return false\r\n        }\r\n        \r\n        this.getClassName(this.id)\r\n        setTable(this.id, this.className)\r\n        return true\r\n    }\r\n    \r\n}\r\n\r\nclass searchAnimation_path extends searchAnimation_pos{\r\n    getItems(path, pathDirection){\r\n        this.items =  (path.length > 0) ? [path.shift(), pathDirection.shift()] : [undefined]\r\n    }\r\n\r\n    getClassName(id, d){\r\n        this.className1 = componentKind.path\r\n        this.className2 = (isWall(id) || isPath(id)) ? direction(d) : StartEndBombWeight(WhichComponentSame(id), direction(d), direction(d), componentKind.bombPath, componentKind.weightPath)\r\n    }\r\n\r\n    runAnimation(container){\r\n        var path = container[0];\r\n        var pathDirection = container[1];\r\n\r\n        this.getItems(path, pathDirection)\r\n\r\n        this.id = this.items[0]\r\n        if(this.id === undefined || path.length === 0){\r\n            return false\r\n        }\r\n        \r\n        this.newid = path[0]\r\n        this.d = pathDirection[0]\r\n\r\n        this.getClassName(this.newid, this.d)\r\n        setTable((isWeight(this.id) || isWall(this.id) || isPath(this.id)) ? this.id : -1, this.className1)\r\n        setTable(this.newid, this.className2)\r\n        return false\r\n    }\r\n    \r\n}\r\n\r\nfunction getAnimationObj(){\r\n    var animationObj\r\n    if(stopStatus.search.length > 0){\r\n        animationObj = [new searchAnimation_search(), stopStatus.search];\r\n    } else if (stopStatus.bomb.length > 0){\r\n        animationObj = [new searchAnimation_bomb(), stopStatus.bomb];\r\n    } else if (stopStatus.path.length > 0){\r\n        animationObj = [new searchAnimation_path(), [stopStatus.path, stopStatus.pathDirection]];\r\n    } else {\r\n        animationObj = [undefined, undefined];\r\n    }\r\n    return animationObj\r\n}\r\n\r\nexport function SearchAnimation(search, bomb, path, pathDirection, speed, sysStatusFunction, updateFunction) {\r\n    if(stopStatus.complete){\r\n        path.unshift(-1)\r\n        pathDirection.unshift(\"\")\r\n    \r\n        stopStatus.search = search\r\n        stopStatus.path = path\r\n        stopStatus.pathDirection = pathDirection\r\n        stopStatus.bomb = bomb\r\n        stopStatus.complete = false\r\n    } \r\n\r\n    var items, animationObj, positions;\r\n\r\n    const searchAnimation = setInterval(() => {\r\n        items = getAnimationObj()\r\n        animationObj = items[0]\r\n        positions = items[1]\r\n\r\n        if (animationObj === undefined || positions === undefined) {\r\n            updateFunction()\r\n            clearInterval(searchAnimation)\r\n\r\n        }else{\r\n            while(animationObj.runAnimation(positions)){\r\n                if(stopStatus.animationStatus === false){\r\n                    sysStatusFunction()\r\n                    clearInterval(searchAnimation)\r\n                    return false\r\n                } \r\n            }     \r\n            if(stopStatus.animationStatus === false){\r\n                sysStatusFunction()\r\n                clearInterval(searchAnimation)\r\n                return false\r\n            }      \r\n        }\r\n    }, speed)\r\n    \r\n}\r\n\r\nexport function FinalAnimation(search, path, pathDirection, bomb){\r\n    var id, d, type;\r\n    var className1, className2\r\n    for (var i = 0; i < search.length; i++) {\r\n        for (var j = 0; j < search[i].length; j++) {\r\n            id = search[i][j]; type = WhichComponentSame(id);\r\n            className1 = (isWall(id) || isPath(id)) ? componentKind.searchStatic : StartEndBombWeight(type, componentKind.startSearch, componentKind.endSearch, componentKind.bombSearch, componentKind.weightSearchStatic);\r\n            className2 = (isWall(id) || isPath(id)) ? componentKind.searchBombStatic : StartEndBombWeight(type, componentKind.startSearchBomb, componentKind.endSearchBomb, componentKind.bombSearchBomb, componentKind.weightSearchBombStatic);\r\n            (position.bomb === false) ? setTable(id, className1) : setTable(id, className2);\r\n        }\r\n    }\r\n    for (i = 0; i < bomb.length; i++) {\r\n        for (j = 0; j < bomb[i].length; j++) {\r\n            id = bomb[i][j]; type = WhichComponentSame(id);\r\n            className1 = (isWall(id) || isPath(id)) ? componentKind.searchStatic : StartEndBombWeight(WhichComponentSame(id), componentKind.startSearch, componentKind.endSearch, componentKind.bombSearch, componentKind.weightSearchStatic);\r\n            setTable(id, className1);\r\n        }\r\n    }\r\n    for (i = 0; i < path.length; i++) {\r\n        id = path[i]; d = pathDirection[i]; type = WhichComponentSame(id);\r\n        className1 = (isWall(id) || isPath(id)) ? componentKind.pathStatic : StartEndBombWeight(WhichComponentSame(id), direction(d), direction(d), componentKind.bombPath, componentKind.weightPathStatic);\r\n        setTable(id, className1);\r\n    }\r\n}\r\n\r\n/* Maze */\r\n\r\nexport function MazeAnimation(maze, speed, sysStatusFunction, updateFunction) { // maze = [walls, weights]\r\n    if(stopStatus.complete){    \r\n        stopStatus.maze = maze\r\n    } else {\r\n        stopStatus.complete = false\r\n    }\r\n\r\n    var id = -1;\r\n    speed = speed / 2\r\n    \r\n    const mazeAnimation = setInterval(() => {\r\n        if (id === undefined) {\r\n            updateFunction()\r\n            clearInterval(mazeAnimation)\r\n\r\n        }else {\r\n            if (stopStatus.animationStatus === false){\r\n                sysStatusFunction()\r\n                clearInterval(mazeAnimation)\r\n                return\r\n            }\r\n\r\n            id = stopStatus.maze[0].shift()\r\n            if (id !== undefined && isPath(id)) {\r\n                setTable(id, componentKind.wall, true)\r\n            }\r\n        }\r\n    }, speed)\r\n}\r\n\r\nexport function FinalMazeAnimation(maze){ // maze = [walls, weights]\r\n    var id;\r\n    for(var i = 0; i < maze[0].length; i++){\r\n        id = maze[0][i];\r\n        setTable(id, componentKind.wall, true)\r\n    }\r\n    for(i = 0; i < maze[1].length; i++){\r\n        id = maze[1][i];\r\n        setTable(id, componentKind.weight, true)\r\n    }\r\n}\r\n\r\n/* Rocket left right up down */\r\n\r\nfunction direction(kind){\r\n\r\n    switch (kind) {\r\n        case \"left\":\r\n            return componentKind.pathHeadLeft\r\n        case \"right\":\r\n            return componentKind.pathHeadRight\r\n        case \"up\":\r\n            return componentKind.pathHeadUp\r\n        case \"down\":\r\n            return componentKind.pathHeadDown\r\n        default:\r\n            return componentKind.path\r\n    }\r\n\r\n}\r\n\r\nfunction isWeight(id) {\r\n    return WhichComponentSame(id) === 3;\r\n}\r\n\r\nfunction isWall(id) {\r\n    return WhichComponentSame(id) === 4;\r\n}\r\n\r\nfunction isPath(id) {\r\n    return WhichComponentSame(id) === 5;\r\n}\r\n","class Queue {\r\n    constructor() {\r\n        this.queue = [];\r\n    }\r\n\r\n    append(val) {\r\n        this.queue.push(val);\r\n    }\r\n\r\n    popleft() {\r\n        if (this.isEmpty()) return -1;\r\n        return this.queue.shift();\r\n    }\r\n\r\n    isEmpty() {\r\n        return this.queue.length === 0;\r\n    }\r\n\r\n    getLength() {\r\n        return this.queue.length;\r\n    }\r\n\r\n    getArray() {\r\n        return this.queue;\r\n    }\r\n}\r\n\r\nexport default Queue;","class Distance {\r\n    constructor() {\r\n        this.dict = {};\r\n        this.max_d = 0;\r\n    }\r\n\r\n    // pos=[x, y], d=距離\r\n    set(pos, d) {\r\n        this.dict[pos] = d;\r\n        this.max_d = Math.max(this.max_d, d);\r\n    }\r\n\r\n    // 取得距離\r\n    get(pos) {\r\n        if (pos in this.dict) {\r\n            return this.dict[pos];\r\n        } else {\r\n            return -1;\r\n        }\r\n    }\r\n\r\n    remove(pos) {\r\n        if (pos in this.dict) {\r\n            delete this.dict[pos];\r\n        } else {\r\n            return -1;\r\n        }\r\n    }\r\n\r\n    // 從end開始找尋附近四周圍，第一個 \"有被找過的\" 且 \"距離最小的\"的點\r\n    // 回傳最短路徑 及 方向\r\n    getShortestPath(endPos) {\r\n        if (!(endPos in this.dict)) return []; // 若終點沒被找過，就回傳空值\r\n\r\n        var shortest = [endPos];\r\n        var shortestDirection = [];\r\n        var x = endPos[0];\r\n        var y = endPos[1];\r\n        var visited = new Set();\r\n\r\n        visited.add(endPos.toString());\r\n        while (this.max_d > 0) {\r\n            var curD = Infinity;\r\n            var curX = x;\r\n            var curY = y;\r\n            var dir = null;\r\n\r\n            // up\r\n            if ([x - 1, y] in this.dict && !(visited.has([x - 1, y].toString()))) {\r\n                if (this.dict[[x - 1, y]] < curD) {\r\n                    curX = x - 1;\r\n                    curY = y;\r\n                    curD = this.dict[[x - 1, y]];\r\n                    dir = \"down\"; // 上一個方向要反過來\r\n                }\r\n                visited.add([x - 1, y].toString());\r\n            }\r\n\r\n            // right\r\n            if ([x, y + 1] in this.dict && !(visited.has([x, y + 1].toString()))) {\r\n                if (this.dict[[x, y + 1]] < curD) {\r\n                    curX = x;\r\n                    curY = y + 1;\r\n                    curD = this.dict[[x, y + 1]];\r\n                    dir = \"left\"; // 上一個方向要反過來\r\n                }\r\n                visited.add([x, y + 1].toString());\r\n            }\r\n\r\n            // down\r\n            if ([x + 1, y] in this.dict && !(visited.has([x + 1, y].toString()))) {\r\n                if (this.dict[[x + 1, y]] < curD) {\r\n                    curX = x + 1;\r\n                    curY = y;\r\n                    curD = this.dict[[x + 1, y]];\r\n                    dir = \"up\"; // 上一個方向要反過來\r\n                }\r\n                visited.add([x + 1, y].toString());\r\n            }\r\n\r\n            // left\r\n            if ([x, y - 1] in this.dict && !(visited.has([x, y - 1].toString()))) {\r\n                if (this.dict[[x, y - 1]] < curD) {\r\n                    curX = x;\r\n                    curY = y - 1;\r\n                    curD = this.dict[[x, y - 1]];\r\n                    dir = \"right\"; // 上一個方向要反過來\r\n                }\r\n                visited.add([x, y - 1].toString());\r\n            }\r\n            x = curX;\r\n            y = curY;\r\n            shortest.unshift([x, y]);\r\n            shortestDirection.unshift(dir);\r\n            this.max_d = curD;\r\n        }\r\n        if (shortest.length === 1) return []; // 如果沒有找到路徑(只有終點自己)，則不用跑最短路徑\r\n        shortestDirection.unshift(shortestDirection[0]); // 加入改變方向找法\r\n\r\n        return [shortest, shortestDirection];\r\n    }\r\n\r\n    clear() {\r\n        this.dict = {};\r\n        this.max_d = 0;\r\n    }\r\n}\r\n\r\nexport default Distance;","import { position } from '../../Core';\r\nimport Queue from '../../Core/Queue';\r\nimport Distance from '../../Core/Distance';\r\n\r\nfunction BFS(startCallback, speed) {\r\n    var times = 1 + (position.bomb === false ? 0 : 1); // 如果有bomb要執行2次\r\n    var retSearchPath = [];\r\n    var retBombPath = [];\r\n    var retShortestPath = [];\r\n    var retDirection = [];\r\n\r\n    for (var i = 0; i < times; i++) {\r\n        var searchPath = [];\r\n        const visited = new Set();\r\n        const queue = new Queue();\r\n        var distance = new Distance();\r\n        var startPos = i === 0 ? position.start : position.bomb; // 第一次執行start，第二次bomb\r\n        var endPos = i === 0 && times > 1 ? position.bomb : position.end; // 第一次執行bomb，第二次end\r\n\r\n        distance.set(startPos, 0); // 加入自己\r\n        queue.append([startPos, 0]); // [pos, 距離]\r\n        visited.add(startPos.toString()); // 防止重複找尋\r\n        while (queue.getLength() > 0) {\r\n            var node = queue.popleft();\r\n            var x = node[0][0];\r\n            var y = node[0][1];\r\n            var nextD = node[1] + 1;\r\n\r\n            if (nextD > searchPath.length) searchPath.push([]); // 若有新的長度就增加array\r\n\r\n            if ([x, y].toString() === endPos.toString()) break; // 若找到終點就跳出\r\n\r\n            // left\r\n            if (y - 1 >= 0 && !([x, y - 1] in position.wall) && !(visited.has([x, y - 1].toString()))) {\r\n                queue.append([[x, y - 1], nextD]);\r\n                searchPath[nextD - 1].push([x, y - 1]);\r\n                distance.set([x, y - 1], nextD);\r\n                visited.add([x, y - 1].toString());\r\n            }\r\n\r\n            // up\r\n            if (x - 1 >= 0 && !([x - 1, y] in position.wall) && !(visited.has([x - 1, y].toString()))) {\r\n                queue.append([[x - 1, y], nextD]);\r\n                searchPath[nextD - 1].push([x - 1, y]);\r\n                distance.set([x - 1, y], nextD);\r\n                visited.add([x - 1, y].toString());\r\n            }\r\n\r\n            // right\r\n            // 這裡的position.rowSize怪怪的\r\n            if (y + 1 < position.colSize && !([x, y + 1] in position.wall) && !(visited.has([x, y + 1].toString()))) {\r\n                queue.append([[x, y + 1], nextD]);\r\n                searchPath[nextD - 1].push([x, y + 1]);\r\n                distance.set([x, y + 1], nextD);\r\n                visited.add([x, y + 1].toString());\r\n            }\r\n\r\n            // down\r\n            // 這裡的position.colSize怪怪的\r\n            if (x + 1 < position.rowSize && !([x + 1, y] in position.wall) && !(visited.has([x + 1, y].toString()))) {\r\n                queue.append([[x + 1, y], nextD]);\r\n                searchPath[nextD - 1].push([x + 1, y]);\r\n                distance.set([x + 1, y], nextD);\r\n                visited.add([x + 1, y].toString());\r\n            }\r\n\r\n        }\r\n\r\n        // 去除多找的一圈：https://i.imgur.com/5dS6ylt.png\r\n        while (distance.get(endPos) !== -1 && searchPath.length > distance.get(endPos)) {\r\n            searchPath.pop();\r\n        }\r\n\r\n        if (i === 0) {\r\n            retSearchPath = retSearchPath.concat(searchPath);\r\n        } else {\r\n            retBombPath = retBombPath.concat(searchPath);\r\n        }\r\n\r\n        if (distance.get(endPos) === -1) break; // 如果第一次沒找到終點，不加入最短路徑\r\n\r\n        // 取得最短路徑\r\n        var shortest = distance.getShortestPath(endPos);\r\n        retShortestPath = retShortestPath.concat(shortest[0]);\r\n        retDirection = retDirection.concat(shortest[1]);\r\n        if (i === 0 && times === 2) {\r\n            // 將尾巴（bomb）去除\r\n            retShortestPath.splice(retShortestPath.length - 1, 1);\r\n            retDirection.splice(retDirection.length - 1, 1);\r\n        }\r\n    }\r\n    retSearchPath.unshift([position.start]); // 加入起始點\r\n    // 執行 start 動畫\r\n    startCallback(retSearchPath, retShortestPath, retDirection, speed, retBombPath);\r\n}\r\nexport default BFS;","import { position } from '../../Core';\r\n\r\nfunction DFS(startCallback, speed) {\r\n    var retSearchPath = [];\r\n    var retBombPath = [];\r\n    var retShortestPath = [];\r\n    var retDirection = [];\r\n\r\n    // dfs 需bottom-up去找最短路徑\r\n    function DoDFS(x, y, endPos, visited, startPath, retShortestPath, retDirection) {\r\n        if (x < 0 || y < 0 || x >= position.rowSize || y >= position.colSize || [x, y] in position.wall || visited.has([x, y].toString())) {\r\n            return false;\r\n        }\r\n\r\n        visited.add([x, y].toString());\r\n        startPath.push([[x, y]]); // 每一層都是一個\r\n\r\n        if ([x, y].toString() === endPos.toString()) {\r\n            retShortestPath.unshift([x, y]);\r\n            return true;\r\n        }\r\n\r\n\r\n        if (DoDFS(x - 1, y, endPos, visited, startPath, retShortestPath, retDirection)) {// up\r\n            retShortestPath.unshift([x, y]);\r\n            retDirection.unshift(\"up\");\r\n            return true;\r\n        }\r\n        if (DoDFS(x, y + 1, endPos, visited, startPath, retShortestPath, retDirection)) {// right\r\n            retShortestPath.unshift([x, y]);\r\n            retDirection.unshift(\"right\");\r\n            return true;\r\n        }\r\n        if (DoDFS(x + 1, y, endPos, visited, startPath, retShortestPath, retDirection)) {// down\r\n            retShortestPath.unshift([x, y]);\r\n            retDirection.unshift(\"down\");\r\n            return true;\r\n        }\r\n        if (DoDFS(x, y - 1, endPos, visited, startPath, retShortestPath, retDirection)) {// left\r\n            retShortestPath.unshift([x, y]);\r\n            retDirection.unshift(\"left\");\r\n            return true;\r\n        }\r\n    }\r\n    const visited = new Set();\r\n    var start = position.start;\r\n    if (position.bomb) {\r\n        DoDFS(start[0], start[1], position.bomb, visited, retSearchPath, retShortestPath, retDirection);\r\n        start = position.bomb;\r\n        visited.clear();\r\n\r\n        // 有找到最小路徑才繼續\r\n        if (retShortestPath.length > 0) {\r\n            // bottom up 時 尾巴不確定方向，故現在加上方向\r\n            retShortestPath.splice(retShortestPath.length - 1, 1); // 去除bomb重複\r\n            var tmp = []; // 因為unshift，所以先暫存\r\n            var tmp2 = [];\r\n            DoDFS(start[0], start[1], position.end, visited, retBombPath, tmp, tmp2);\r\n            retShortestPath = retShortestPath.concat(tmp);\r\n            retDirection = retDirection.concat(tmp2);\r\n        }\r\n    } else {\r\n        DoDFS(start[0], start[1], position.end, visited, retBombPath, retShortestPath, retDirection);\r\n    }\r\n\r\n    // bottom up 時 尾巴不確定方向，故現在加上方向\r\n    retDirection.unshift(retDirection[0]); // 改變方向找法，往前推移一格\r\n    startCallback(retSearchPath, retShortestPath, retDirection, speed, retBombPath);\r\n}\r\n\r\nexport default DFS;","// Reference: https://www.programiz.com/dsa/priority-queue\r\n\r\n// 建立 min-heap\r\nclass PriorityQueue {\r\n    constructor() {\r\n        this.arr = [];\r\n    }\r\n\r\n    // 丟進來的東西有，table[pos][strategy], pos, Heuristic數字\r\n    // 因為如果一樣大，要取得距離終點小的\r\n    Push(score, heuristic, pos) {\r\n        if (this.arr.length === 0) {\r\n            this.arr.push([score, heuristic, pos]);\r\n        } else {\r\n            // 插入最後 -> heapify\r\n            this.arr.push([score, heuristic, pos]);\r\n            this.HeapifyAll(this.arr.length - 1); // 不用-1感覺也可以，等等試試\r\n        }\r\n    }\r\n\r\n    Pop() {\r\n        // 交換最後 -> heapify\r\n        let tmp = this.arr[0];\r\n        this.arr[0] = this.arr[this.arr.length - 1];\r\n        this.arr[this.arr.length - 1] = tmp;\r\n        this.arr.splice(this.arr.length - 1, 1);\r\n        this.HeapifyAll(this.arr.length - 1);\r\n        return tmp[2];\r\n    }\r\n\r\n    Peek() {\r\n        return this.arr[0][2];\r\n    }\r\n\r\n    Length() {\r\n        return this.arr.length;\r\n    }\r\n\r\n    Heapify(index) {\r\n        let n = this.arr.length;\r\n        let smallest = index;\r\n        let left = 2 * index;\r\n        let right = 2 * index + 1;\r\n\r\n        if (left < n) {\r\n            if (this.arr[smallest][0] > this.arr[left][0]) {\r\n                smallest = left;\r\n            } else if (this.arr[smallest][0] === this.arr[left][0]) {\r\n                if (this.arr[smallest][1] > this.arr[left][1]) {\r\n                    smallest = left;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (right < n) {\r\n            if (this.arr[smallest][0] > this.arr[right][0]) {\r\n                smallest = right;\r\n            } else if (this.arr[smallest][0] === this.arr[right][0]) {\r\n                if (this.arr[smallest][1] > this.arr[right][1]) {\r\n                    smallest = right;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (smallest !== index) {\r\n            let tmp = this.arr[index];\r\n            this.arr[index] = this.arr[smallest];\r\n            this.arr[smallest] = tmp;\r\n            this.Heapify(smallest);\r\n        }\r\n    }\r\n\r\n    HeapifyAll(index) {\r\n        for (let i = Math.floor(index / 2); i >= 0; i--) {\r\n            this.Heapify(i);\r\n        }\r\n    }\r\n}\r\n\r\nexport default PriorityQueue;","import { position } from '../../Core';\r\nimport PriorityQueue from '../../Core/PriorityQueue';\r\n\r\nfunction Dijkstra(whichAlgo, startCallback, speed) {\r\n    var retSearchPath = [];\r\n    var retBombPath = [];\r\n    var retShortestPath = [];\r\n    var retDirection = [];\r\n\r\n    if (position.bomb) {\r\n        retShortestPath = retShortestPath.concat(DoDijkstra(whichAlgo, position.start, position.bomb, retSearchPath, retDirection))\r\n\r\n        // 有找到最小路徑才繼續\r\n        if (retShortestPath.length > 0) {\r\n            retShortestPath.splice(retShortestPath.length - 1, 1); // 第一段的終點也是第二段的起點，故去除\r\n            retDirection.splice(retDirection.length - 1, 1); // 第一段的終點也是第二段的起點，故去除\r\n            let tmp = []; // 因為unshift所以暫存\r\n            retShortestPath = retShortestPath.concat(DoDijkstra(whichAlgo, position.bomb, position.end, retBombPath, tmp))\r\n            retDirection = retDirection.concat(tmp);\r\n        }\r\n    } else {\r\n        retShortestPath = retShortestPath.concat(DoDijkstra(whichAlgo, position.start, position.end, retSearchPath, retDirection))\r\n    }\r\n\r\n    // 執行 start 動畫\r\n    startCallback(retSearchPath, retShortestPath, retDirection, speed, retBombPath);\r\n}\r\n\r\n// 回傳最短路徑\r\nfunction DoDijkstra(whichAlgo, startPos, endPos, searchPath, retDirection) {\r\n    /*  //https://medium.com/basecs/finding-the-shortest-path-with-a-little-help-from-dijkstra-613149fbdc8e\r\n        Create Dijkstra table \r\n        \r\n        table = {pos : [shortest distance, previous vertex]}\r\n            * start pos : [0, null]\r\n            * use priority queue to pick the pos which contains current shortest disance.\r\n    */\r\n\r\n\r\n    // 設定table: 起始點為0，其他為無限大，所有的previous vertex均為null\r\n    // 設定目前最短路徑的queue\r\n    var table = [{}, {}];\r\n    var i, j;\r\n    for (i = 0; i < position.rowSize; i++) {\r\n        for (j = 0; j < position.colSize; j++) {\r\n            var pos = [i, j];\r\n\r\n            // 起始點走到pos的最短距離，上一個點，direction，total距離\r\n            table[0][pos] = [Infinity, null, null, Infinity];\r\n            table[1][pos] = [Infinity, null, null, Infinity]; // for 決定起始點（bidirection\r\n        }\r\n    }\r\n\r\n    var end = null; // 決定終點（可能bomb or end）\r\n    var unvisited = [new PriorityQueue(), new PriorityQueue()]; // [0]: start, [1]: end\r\n    switch (whichAlgo) {\r\n        case \"Dijkstra\":\r\n            table[0][startPos] = [0, null, \"up\", 0]; // 設定起始點\r\n            unvisited[0].Push(0, 0, startPos); // 設定目前最短路徑的queue\r\n            end = [endPos];\r\n            break;\r\n        case \"Astar\":\r\n            table[0][startPos] = [0, null, \"up\", 0]; // 設定起始點\r\n            unvisited[0].Push(0, 0, startPos); // 設定目前最短路徑的queue\r\n            end = [endPos];\r\n            break;\r\n        case \"Swarm\":\r\n            table[0][startPos] = [0, null, \"right\", 0]; // 設定起始點\r\n            unvisited[0].Push(0, 0, startPos); // 設定目前最短路徑的queue\r\n            end = [endPos];\r\n            break;\r\n        case \"GreedyBestFirstSearch\":\r\n            table[0][startPos] = [0, null, \"up\", 0]; // 設定起始點\r\n            unvisited[0].Push(0, 0, startPos); // 設定目前最短路徑的queue\r\n            end = [endPos];\r\n            break;\r\n        case \"ConvergentSwarm\":\r\n            table[0][startPos] = [0, null, \"right\", 0]; // 設定起始點\r\n            unvisited[0].Push(0, 0, startPos); // 設定目前最短路徑的queue\r\n            end = [endPos];\r\n            break;\r\n        case \"BidirectionSwarm\":\r\n            table[0][startPos] = [0, null, \"right\", 0]; // 設定起始點\r\n            table[1][endPos] = [0, null, \"left\", 0]; // 設定起始點\r\n            unvisited[0].Push(0, 0, startPos); // 設定目前最短路徑的queue\r\n            unvisited[1].Push(0, 0, endPos); // 設定目前最短路徑的queue\r\n            end = [endPos, startPos];\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n\r\n    /* 演算法開始 */\r\n    var curShortestPath = []\r\n    var which = 1; // 0 for start, 1 for end\r\n    var actualEnd = null;\r\n    var isFoundEnd = false;\r\n    var visited = [new Set(), new Set()]; // [0]: start, [1]: end\r\n\r\n    while (unvisited[0].Length() > 0 || unvisited[1].Length() > 0) {\r\n\r\n        // 選要走哪邊\r\n        if (unvisited[0].Length() > 0 && unvisited[1].Length() > 0) {\r\n            which = (which + 1) % 2;\r\n        } else if (unvisited[0].Length() > 0) {\r\n            which = 0;\r\n        } else if (unvisited[1].Length() > 0) {\r\n            which = 1;\r\n        }\r\n\r\n        // 1. 選出當前最小值的點\r\n        var curPos = null;\r\n        curPos = GetClosestNode(unvisited[which]);\r\n\r\n        if (curPos in position.wall || visited[which].has(curPos.toString())) {\r\n            continue; // 牆壁不走，已經走過的點不走，可能會有同一點但值不同的情況，用prioity queue就可以先抓到最小的同一點，下次抓到同一點就去除\r\n        }\r\n\r\n        // 2. 計算相鄰且尚未走過的點\r\n        var up = curPos[0] - 1 >= 0 ? [curPos[0] - 1, curPos[1]] : null;\r\n        var right = curPos[1] + 1 < position.colSize ? [curPos[0], curPos[1] + 1] : null;\r\n        var down = curPos[0] + 1 < position.rowSize ? [curPos[0] + 1, curPos[1]] : null;\r\n        var left = curPos[1] - 1 >= 0 ? [curPos[0], curPos[1] - 1] : null;\r\n\r\n        // eslint-disable-next-line\r\n        [up, right, down, left].forEach((nextPos, idx) => {\r\n            if (!nextPos || nextPos in position.wall || isFoundEnd) return; // 若超過邊界 or 是牆壁 or 已找到終點\r\n\r\n            // 走過的也要更新\r\n            var total = null;\r\n            var weight = (nextPos in position.weight ? position.weightValue : 0);\r\n            switch (whichAlgo) {\r\n                case \"Dijkstra\":\r\n                    // 策略為：只考慮 目前總分+權重+轉向分數\r\n                    total = table[which][curPos][0] + weight + GetScore(table[which][curPos][2], idx);\r\n                    break;\r\n                case \"Astar\":\r\n                    // 策略為：只考慮 目前總分+權重+轉向分數\r\n                    total = table[which][curPos][0] + weight + GetScore(table[which][curPos][2], idx);\r\n                    break;\r\n                case \"Swarm\":\r\n                    // 策略為：只考慮 目前總分+權重+轉向分數+估算\r\n                    total = table[which][curPos][0] + weight + GetScore(table[which][curPos][2], idx) + Math.pow(GetHeuristic(nextPos, end[which]), 2);\r\n                    break;\r\n                case \"GreedyBestFirstSearch\":\r\n                    // 策略為：只考慮 轉向分數\r\n                    total = table[which][curPos][0] + GetScore(table[which][nextPos][2], idx);\r\n                    break;\r\n                case \"ConvergentSwarm\":\r\n                    // 策略為：只考慮 目前總分+權重+轉向分數+估算\r\n                    total = table[which][curPos][0] + (weight + GetScore(table[which][curPos][2], idx)) * Math.pow(GetHeuristic(nextPos, end[which]), 7);\r\n                    break;\r\n                case \"BidirectionSwarm\":\r\n                    // 策略為：只考慮 目前總分+權重+轉向分數+估算\r\n                    total = table[which][curPos][0] + weight + GetScore(table[which][curPos][2], idx) + Math.pow(GetHeuristic(nextPos, end[which]), 2);\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n\r\n            if (total <= table[which][nextPos][0]) {\r\n                table[which][nextPos][0] = total;\r\n                table[which][nextPos][1] = curPos;\r\n                switch (idx) {\r\n                    case 0:\r\n                        if (which === 0) table[which][nextPos][2] = \"up\";\r\n                        else table[which][nextPos][2] = \"down\";\r\n                        break;\r\n                    case 1:\r\n                        if (which === 0) table[which][nextPos][2] = \"right\";\r\n                        else table[which][nextPos][2] = \"left\";\r\n                        break;\r\n                    case 2:\r\n                        if (which === 0) table[which][nextPos][2] = \"down\";\r\n                        else table[which][nextPos][2] = \"up\";\r\n                        break;\r\n                    case 3:\r\n                        if (which === 0) table[which][nextPos][2] = \"left\";\r\n                        else table[which][nextPos][2] = \"right\";\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n\r\n                switch (whichAlgo) {\r\n                    case \"Dijkstra\":\r\n                        table[which][nextPos][3] = table[which][nextPos][0];\r\n                        break;\r\n                    case \"Astar\":\r\n                        table[which][nextPos][3] = table[which][nextPos][0] + GetHeuristic(nextPos, endPos);\r\n                        break;\r\n                    case \"Swarm\":\r\n                        table[which][nextPos][3] = table[which][nextPos][0];\r\n                        break;\r\n                    case \"GreedyBestFirstSearch\":\r\n                        table[which][nextPos][3] = table[which][nextPos][0] + GetScore(table[which][nextPos][2], idx);\r\n                        break;\r\n                    case \"ConvergentSwarm\":\r\n                        table[which][nextPos][3] = table[which][nextPos][0];\r\n                        break;\r\n                    case \"BidirectionSwarm\":\r\n                        table[which][nextPos][3] = table[which][nextPos][0];\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n            }\r\n\r\n            // 加入尚未走過的點 \r\n            if (!visited[which].has(curPos.toString())) {\r\n                unvisited[which].Push(table[which][nextPos][3], GetHeuristic(nextPos, endPos), nextPos);\r\n            }\r\n\r\n            // 若找尋過程有對方搜尋到的，則更新actualEnd\r\n            if (whichAlgo === \"BidirectionSwarm\") {\r\n                if (visited[(which + 1) % 2].has(curPos.toString())) {\r\n                    // Code Review 時覺得不需要，先註解，有問題再修\r\n                    // if (actualEnd === null) {\r\n                    actualEnd = curPos;\r\n                    var tmp = actualEnd;\r\n                    while (tmp) { // 因為找到start時的previous vertex為null\r\n                        if (which === 0) {\r\n                            curShortestPath.unshift(tmp); // bidirection 左右兩邊要插入的方式相反\r\n                            retDirection.unshift(table[which][tmp][2]);\r\n                        } else {\r\n                            curShortestPath.push(tmp);\r\n                            retDirection.push(table[which][tmp][2]);\r\n                        }\r\n                        tmp = table[which][tmp][1];\r\n                    }\r\n                    if (which === 1) {\r\n                        // end 奇數個: actualEnd下面會在計算一次，而因為要保證「過彎處為上一個的方向」，故下面不計算actualEnd\r\n                    } else {\r\n                        // start 偶數個: actualEnd下面會在計算一次，因此去除\r\n                        curShortestPath.splice(curShortestPath.length - 1, 1);\r\n                        retDirection.splice(retDirection.length - 1, 1);\r\n                    }\r\n                    isFoundEnd = true;\r\n                    // } else {\r\n                    //     isFoundEnd = true;\r\n                    // }\r\n                }\r\n            } else {\r\n                if (nextPos.toString() === endPos.toString()) { // 看是否找到終點了\r\n                    actualEnd = nextPos;\r\n                    isFoundEnd = true;\r\n\r\n                    // 因為是找四周，所以找到end之後，要把end資訊加入其中\r\n                    table[which][actualEnd][1] = curPos;\r\n                }\r\n            }\r\n        })\r\n\r\n        if (!visited[which].has(curPos.toString())) {\r\n            searchPath.push([curPos]); // 加入搜尋範圍\r\n            visited[which].add(curPos.toString()); // 加入已走過\r\n        }\r\n\r\n        if (isFoundEnd) { // 找到終點跳出\r\n            searchPath.push([actualEnd]); // 先加入258行，再加入終點\r\n            break;\r\n        }\r\n    }\r\n\r\n    // 若有找到終點再判斷最小路徑\r\n    if (isFoundEnd) {\r\n        curPos = actualEnd;\r\n        if (whichAlgo !== \"BidirectionSwarm\") which = 1;\r\n        while (curPos) { // 因為找到start時的previous vertex為null\r\n            if (which === 1) {\r\n                if (whichAlgo === \"BidirectionSwarm\") {\r\n                    if (curPos.toString() !== actualEnd.toString()) { // 因為要保證「過彎處為上一個的方向」，故下面不計算actualEnd\r\n                        curShortestPath.unshift(curPos); // bidirection 左右兩邊要插入的方式相反\r\n                        retDirection.unshift(table[(which + 1) % 2][curPos][2]);\r\n                    }\r\n                } else {\r\n                    curShortestPath.unshift(curPos); // bidirection 左右兩邊要插入的方式相反\r\n                    retDirection.unshift(table[(which + 1) % 2][curPos][2]);\r\n                }\r\n            } else {\r\n                curShortestPath.push(curPos);\r\n                retDirection.push(table[(which + 1) % 2][curPos][2]);\r\n            }\r\n            curPos = table[(which + 1) % 2][curPos][1];\r\n        }\r\n    }\r\n\r\n    // 因為是找四周圍，只更新是周圍，所以頭的資訊不會被更新，因此去除頭且延伸目前的第一個位置即可\r\n    retDirection.splice(0, 1);\r\n    retDirection.unshift(retDirection[0]);\r\n    // BidirectionSwarm 有兩個頭，所以尾巴的頭也要做一次\r\n    if (whichAlgo === \"BidirectionSwarm\") {\r\n        retDirection.unshift(retDirection[0]);\r\n        retDirection.splice(retDirection.length - 1, 1);\r\n    }\r\n    return curShortestPath;\r\n}\r\n\r\n// 推測值：用距離來表示，因為是棋盤，所以改成最短距離幾格\r\nfunction GetHeuristic(startPos, endPos) {\r\n    return Math.abs(endPos[0] - startPos[0]) + Math.abs(endPos[1] - startPos[1]);\r\n}\r\n\r\n// 找出分數最小點，策略：考慮所有的分數 目前總分：之前總分+權重+轉向分數+估值\r\nfunction GetClosestNode(unvisited) {\r\n    let retPos = unvisited.Pop();\r\n    return retPos;\r\n}\r\n\r\n// 取得轉向分數\r\n// 要讓搜尋從最靠近起點開始，因為轉向分數會累加\r\n// 控制找尋方向\r\n// 考慮轉向分數是為了只搜尋一條線，如果沒有這個分數，則搜尋會變成三條線，因為１點的前下上 距離終點 的估值可能相同，所以會走三條路\r\nfunction GetScore(direction, index) {\r\n    var score = 0;\r\n    switch (direction) {\r\n        case \"up\":\r\n            switch (index) {\r\n                case 0:\r\n                    score = 1;\r\n                    break;\r\n                case 1:\r\n                    score = 2;\r\n                    break;\r\n                case 2:\r\n                    score = 3;\r\n                    break;\r\n                case 3:\r\n                    score = 2;\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n            break;\r\n        case \"right\":\r\n            switch (index) {\r\n                case 0:\r\n                    score = 2;\r\n                    break;\r\n                case 1:\r\n                    score = 1;\r\n                    break;\r\n                case 2:\r\n                    score = 2;\r\n                    break;\r\n                case 3:\r\n                    score = 3;\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n            break;\r\n        case \"down\":\r\n            switch (index) {\r\n                case 0:\r\n                    score = 3;\r\n                    break;\r\n                case 1:\r\n                    score = 2;\r\n                    break;\r\n                case 2:\r\n                    score = 1;\r\n                    break;\r\n                case 3:\r\n                    score = 2;\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n            break;\r\n        case \"left\":\r\n            switch (index) {\r\n                case 0:\r\n                    score = 2;\r\n                    break;\r\n                case 1:\r\n                    score = 3;\r\n                    break;\r\n                case 2:\r\n                    score = 2;\r\n                    break;\r\n                case 3:\r\n                    score = 1;\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n    return score;\r\n}\r\n\r\nexport default Dijkstra;","import { position } from '../../Core';\r\n\r\nfunction Dijkstra_old(whichAlgo, startCallback, speed) {\r\n    var retSearchPath = [];\r\n    var retBombPath = [];\r\n    var retShortestPath = [];\r\n    var retDirection = [];\r\n\r\n    if (position.bomb) {\r\n        retShortestPath = retShortestPath.concat(DoDijkstra_old(whichAlgo, position.start, position.bomb, retSearchPath, retDirection))\r\n\r\n        // 有找到最小路徑才繼續\r\n        if (retShortestPath.length > 0) {\r\n            retShortestPath.splice(retShortestPath.length - 1, 1); // 第一段的終點也是第二段的起點，故去除\r\n            retDirection.splice(retDirection.length - 1, 1); // 第一段的終點也是第二段的起點，故去除\r\n            let tmp = []; // 因為unshift所以暫存\r\n            retShortestPath = retShortestPath.concat(DoDijkstra_old(whichAlgo, position.bomb, position.end, retBombPath, tmp))\r\n            retDirection = retDirection.concat(tmp);\r\n        }\r\n    } else {\r\n        retShortestPath = retShortestPath.concat(DoDijkstra_old(whichAlgo, position.start, position.end, retSearchPath, retDirection))\r\n    }\r\n\r\n    // 執行 start 動畫\r\n    startCallback(retSearchPath, retShortestPath, retDirection, speed, retBombPath);\r\n}\r\n\r\n// 回傳最短路徑\r\nfunction DoDijkstra_old(whichAlgo, startPos, endPos, searchPath, retDirection) {\r\n    /*  //https://medium.com/basecs/finding-the-shortest-path-with-a-little-help-from-dijkstra-613149fbdc8e\r\n        Create Dijkstra table \r\n        \r\n        table = {pos : [shortest distance, previous vertex]}\r\n            * start pos : [0, null]\r\n            * use priority queue to pick the pos which contains current shortest disance.\r\n    */\r\n\r\n\r\n    // 設定table: 起始點為0，其他為無限大，所有的previous vertex均為null\r\n    // 設定目前最短路徑的queue\r\n    var table = [{}, {}];\r\n    var i, j;\r\n    for (i = 0; i < position.rowSize; i++) {\r\n        for (j = 0; j < position.colSize; j++) {\r\n            var pos = [i, j];\r\n\r\n            // 起始點走到pos的最短距離，上一個點，direction，total距離\r\n            table[0][pos] = [Infinity, null, null, Infinity];\r\n            table[1][pos] = [Infinity, null, null, Infinity]; // for 決定起始點（bidirection\r\n        }\r\n    }\r\n\r\n    var end = null; // 決定終點（可能bomb or end）\r\n    var unvisited = [[], []]; // [0]: start, [1]: end\r\n    switch (whichAlgo) {\r\n        case \"Dijkstra\":\r\n            table[0][startPos] = [0, null, \"up\", 0]; // 設定起始點\r\n            unvisited[0].push(startPos); // 設定目前最短路徑的queue\r\n            end = [endPos];\r\n            break;\r\n        case \"Astar\":\r\n            table[0][startPos] = [0, null, \"up\", 0]; // 設定起始點\r\n            unvisited[0].push(startPos); // 設定目前最短路徑的queue\r\n            end = [endPos];\r\n            break;\r\n        case \"Swarm\":\r\n            table[0][startPos] = [0, null, \"right\", 0]; // 設定起始點\r\n            unvisited[0].push(startPos); // 設定目前最短路徑的queue\r\n            end = [endPos];\r\n            break;\r\n        case \"GreedyBestFirstSearch\":\r\n            table[0][startPos] = [0, null, \"up\", 0]; // 設定起始點\r\n            unvisited[0].push(startPos); // 設定目前最短路徑的queue\r\n            end = [endPos];\r\n            break;\r\n        case \"ConvergentSwarm\":\r\n            table[0][startPos] = [0, null, \"right\", 0]; // 設定起始點\r\n            unvisited[0].push(startPos); // 設定目前最短路徑的queue\r\n            end = [endPos];\r\n            break;\r\n        case \"BidirectionSwarm\":\r\n            table[0][startPos] = [0, null, \"right\", 0]; // 設定起始點\r\n            table[1][endPos] = [0, null, \"left\", 0]; // 設定起始點\r\n            unvisited[0].push(startPos); // 設定目前最短路徑的queue\r\n            unvisited[1].push(endPos); // 設定目前最短路徑的queue\r\n            end = [endPos, startPos];\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n\r\n    /* 演算法開始 */\r\n    var curShortestPath = []\r\n    var which = 1; // 0 for start, 1 for end\r\n    var actualEnd = null;\r\n    var isFoundEnd = false;\r\n    var visited = [new Set(), new Set()]; // [0]: start, [1]: end\r\n\r\n    while (unvisited[0].length > 0 || unvisited[1].length > 0) {\r\n\r\n        // 選要走哪邊\r\n        if (unvisited[0].length > 0 && unvisited[1].length > 0) {\r\n            which = (which + 1) % 2;\r\n        } else if (unvisited[0].length > 0) {\r\n            which = 0;\r\n        } else if (unvisited[1].length > 0) {\r\n            which = 1;\r\n        }\r\n\r\n        // 1. 選出當前最小路徑的點\r\n        var curPos = null;\r\n        curPos = GetClosestNode(table[which], 3, unvisited[which], end[which]);\r\n\r\n        if (curPos in position.wall) {\r\n            continue; // 牆壁不走\r\n        }\r\n\r\n        // 2. 計算相鄰且尚未走過的點\r\n        var up = curPos[0] - 1 >= 0 ? [curPos[0] - 1, curPos[1]] : null;\r\n        var right = curPos[1] + 1 < position.colSize ? [curPos[0], curPos[1] + 1] : null;\r\n        var down = curPos[0] + 1 < position.rowSize ? [curPos[0] + 1, curPos[1]] : null;\r\n        var left = curPos[1] - 1 >= 0 ? [curPos[0], curPos[1] - 1] : null;\r\n\r\n        // eslint-disable-next-line\r\n        [up, right, down, left].forEach((nextPos, idx) => {\r\n            if (!nextPos || nextPos in position.wall) return; // 若超過邊界 or 是牆壁\r\n\r\n            // 走過的也要更新，只是不會加入unvisited，因此不會在上面continue\r\n            var total = null;\r\n            var weight = (nextPos in position.weight ? position.weightValue : 0);\r\n            switch (whichAlgo) {\r\n                case \"Dijkstra\":\r\n                    // 策略為：只考慮 目前總分+權重+轉向分數\r\n                    total = table[which][curPos][0] + weight + GetScore(table[which][curPos][2], idx);\r\n                    break;\r\n                case \"Astar\":\r\n                    // 策略為：只考慮 目前總分+權重+轉向分數\r\n                    total = table[which][curPos][0] + weight + GetScore(table[which][curPos][2], idx);\r\n                    break;\r\n                case \"Swarm\":\r\n                    // 策略為：只考慮 目前總分+權重+轉向分數+估算\r\n                    total = table[which][curPos][0] + weight + GetScore(table[which][curPos][2], idx) + Math.pow(GetHeuristic(nextPos, end[which]), 2);\r\n                    break;\r\n                case \"GreedyBestFirstSearch\":\r\n                    // 策略為：只考慮 估值+轉向分數\r\n                    total = table[which][curPos][0] + GetScore(table[which][nextPos][2], idx);\r\n                    break;\r\n                case \"ConvergentSwarm\":\r\n                    // 策略為：只考慮 目前總分+權重+轉向分數+估算\r\n                    total = table[which][curPos][0] + (weight + GetScore(table[which][curPos][2], idx)) * Math.pow(GetHeuristic(nextPos, end[which]), 7);\r\n                    break;\r\n                case \"BidirectionSwarm\":\r\n                    // 策略為：只考慮 目前總分+權重+轉向分數+估算\r\n                    total = table[which][curPos][0] + weight + GetScore(table[which][curPos][2], idx) + Math.pow(GetHeuristic(nextPos, end[which]), 2);\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n\r\n            if (total <= table[which][nextPos][0]) {\r\n                table[which][nextPos][0] = total;\r\n                table[which][nextPos][1] = curPos;\r\n                switch (idx) {\r\n                    case 0:\r\n                        if (which === 0) table[which][nextPos][2] = \"up\";\r\n                        else table[which][nextPos][2] = \"down\";\r\n                        break;\r\n                    case 1:\r\n                        if (which === 0) table[which][nextPos][2] = \"right\";\r\n                        else table[which][nextPos][2] = \"left\";\r\n                        break;\r\n                    case 2:\r\n                        if (which === 0) table[which][nextPos][2] = \"down\";\r\n                        else table[which][nextPos][2] = \"up\";\r\n                        break;\r\n                    case 3:\r\n                        if (which === 0) table[which][nextPos][2] = \"left\";\r\n                        else table[which][nextPos][2] = \"right\";\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n\r\n                switch (whichAlgo) {\r\n                    case \"Dijkstra\":\r\n                        table[which][nextPos][3] = table[which][nextPos][0];\r\n                        break;\r\n                    case \"Astar\":\r\n                        table[which][nextPos][3] = table[which][nextPos][0] + GetHeuristic(nextPos, endPos);\r\n                        break;\r\n                    case \"Swarm\":\r\n                        table[which][nextPos][3] = table[which][nextPos][0];\r\n                        break;\r\n                    case \"GreedyBestFirstSearch\":\r\n                        table[which][nextPos][3] = table[which][nextPos][0] + GetScore(table[which][nextPos][2], idx);\r\n                        break;\r\n                    case \"ConvergentSwarm\":\r\n                        table[which][nextPos][3] = table[which][nextPos][0];\r\n                        break;\r\n                    case \"BidirectionSwarm\":\r\n                        table[which][nextPos][3] = table[which][nextPos][0];\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n            }\r\n\r\n            // 加入尚未走過的點 \r\n            if (!visited[which].has(curPos.toString())) {\r\n                unvisited[which].push(nextPos);\r\n            }\r\n\r\n            // 若找尋過程有對方搜尋到的，則更新actualEnd\r\n            if (whichAlgo === \"BidirectionSwarm\") {\r\n                if (visited[(which + 1) % 2].has(curPos.toString())) {\r\n                    if (actualEnd === null) {\r\n                        actualEnd = curPos;\r\n                        var tmp = actualEnd;\r\n                        while (tmp) { // 因為找到start時的previous vertex為null\r\n                            if (which === 0) {\r\n                                curShortestPath.unshift(tmp); // bidirection 左右兩邊要插入的方式相反\r\n                                retDirection.unshift(table[which][tmp][2]);\r\n                            } else {\r\n                                curShortestPath.push(tmp);\r\n                                retDirection.push(table[which][tmp][2]);\r\n                            }\r\n                            tmp = table[which][tmp][1];\r\n                        }\r\n                        if (which === 1) {\r\n                            // end 奇數個: actualEnd下面會在計算一次，而因為要保證「過彎處為上一個的方向」，故下面不計算actualEnd\r\n                        } else {\r\n                            // start 偶數個: actualEnd下面會在計算一次，因此去除\r\n                            curShortestPath.splice(curShortestPath.length - 1, 1);\r\n                            retDirection.splice(retDirection.length - 1, 1);\r\n                        }\r\n                    } else {\r\n                        isFoundEnd = true;\r\n                    }\r\n                }\r\n            } else {\r\n                if (nextPos.toString() === endPos.toString()) { // 看是否找到終點了\r\n                    actualEnd = nextPos;\r\n                    isFoundEnd = true;\r\n\r\n                    // 因為是找四周，所以找到end之後，要把end資訊加入其中\r\n                    table[which][actualEnd][1] = curPos;\r\n                }\r\n            }\r\n        })\r\n\r\n        if (!visited[which].has(curPos.toString())) {\r\n            searchPath.push([curPos]); // 加入搜尋範圍\r\n            visited[which].add(curPos.toString()); // 加入已走過\r\n        }\r\n\r\n        if (isFoundEnd) { // 找到終點跳出\r\n            searchPath.push([actualEnd]); // 先加入258行，再加入終點\r\n            break;\r\n        }\r\n    }\r\n\r\n    // 若有找到終點再判斷最小路徑\r\n    if (isFoundEnd) {\r\n        curPos = actualEnd;\r\n        if (whichAlgo !== \"BidirectionSwarm\") which = 1;\r\n        while (curPos) { // 因為找到start時的previous vertex為null\r\n            if (which === 1) {\r\n                if (whichAlgo === \"BidirectionSwarm\") {\r\n                    if (curPos.toString() !== actualEnd.toString()) { // 因為要保證「過彎處為上一個的方向」，故下面不計算actualEnd\r\n                        curShortestPath.unshift(curPos); // bidirection 左右兩邊要插入的方式相反\r\n                        retDirection.unshift(table[(which + 1) % 2][curPos][2]);\r\n                    }\r\n                } else {\r\n                    curShortestPath.unshift(curPos); // bidirection 左右兩邊要插入的方式相反\r\n                    retDirection.unshift(table[(which + 1) % 2][curPos][2]);\r\n                }\r\n            } else {\r\n                curShortestPath.push(curPos);\r\n                retDirection.push(table[(which + 1) % 2][curPos][2]);\r\n            }\r\n            curPos = table[(which + 1) % 2][curPos][1];\r\n        }\r\n    }\r\n\r\n    // 因為是找四周圍，只更新是周圍，所以頭的資訊不會被更新，因此去除頭且延伸目前的第一個位置即可\r\n    retDirection.splice(0, 1);\r\n    retDirection.unshift(retDirection[0]);\r\n    // BidirectionSwarm 有兩個頭，所以尾巴的頭也要做一次\r\n    if (whichAlgo === \"BidirectionSwarm\") {\r\n        retDirection.unshift(retDirection[0]);\r\n        retDirection.splice(retDirection.length - 1, 1);\r\n    }\r\n    return curShortestPath;\r\n}\r\n\r\n// 推測值：用距離來表示，因為是棋盤，所以改成最短距離幾格\r\nfunction GetHeuristic(startPos, endPos) {\r\n    return Math.abs(endPos[0] - startPos[0]) + Math.abs(endPos[1] - startPos[1]);\r\n}\r\n\r\n// 找出分數最小點，策略：考慮所有的分數 目前總分+權重+轉向分數+估值\r\nfunction GetClosestNode(table, strategy, unvisited, endPos) {\r\n    let retPos, retIndex;\r\n    for (var i = 0; i < unvisited.length; i++) {\r\n        if (!retPos || table[retPos][strategy] > table[unvisited[i]][strategy]) {\r\n            retPos = unvisited[i];\r\n            retIndex = i;\r\n\r\n            // 若相等則取得 估值小的（距離目標近的）\r\n        } else if (table[retPos][strategy] === table[unvisited[i]][strategy]) {\r\n            if (GetHeuristic(retPos, endPos) > GetHeuristic(unvisited[i], endPos)) {\r\n                retPos = unvisited[i];\r\n                retIndex = i;\r\n            }\r\n        }\r\n    }\r\n\r\n    unvisited.splice(retIndex, 1);\r\n    return retPos;\r\n}\r\n\r\n// 取得轉向分數\r\n// 考慮轉向分數是為了只搜尋一條線，如果沒有這個分數，則搜尋會變成三條線，因為１點的前下上 距離終點 的估值可能相同，所以會走三條路\r\nfunction GetScore(direction, index) {\r\n    var score = 0;\r\n    switch (direction) {\r\n        case \"up\":\r\n            switch (index) {\r\n                case 0:\r\n                    score = 1;\r\n                    break;\r\n                case 1:\r\n                    score = 2;\r\n                    break;\r\n                case 2:\r\n                    score = 3;\r\n                    break;\r\n                case 3:\r\n                    score = 2;\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n            break;\r\n        case \"right\":\r\n            switch (index) {\r\n                case 0:\r\n                    score = 2;\r\n                    break;\r\n                case 1:\r\n                    score = 1;\r\n                    break;\r\n                case 2:\r\n                    score = 2;\r\n                    break;\r\n                case 3:\r\n                    score = 3;\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n            break;\r\n        case \"down\":\r\n            switch (index) {\r\n                case 0:\r\n                    score = 3;\r\n                    break;\r\n                case 1:\r\n                    score = 2;\r\n                    break;\r\n                case 2:\r\n                    score = 1;\r\n                    break;\r\n                case 3:\r\n                    score = 2;\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n            break;\r\n        case \"left\":\r\n            switch (index) {\r\n                case 0:\r\n                    score = 2;\r\n                    break;\r\n                case 1:\r\n                    score = 3;\r\n                    break;\r\n                case 2:\r\n                    score = 2;\r\n                    break;\r\n                case 3:\r\n                    score = 1;\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n    return score;\r\n}\r\n\r\nexport default Dijkstra_old;","import BFS from '../../Backend/Algorithms/BFS';\r\nimport DFS from '../../Backend/Algorithms/DFS';\r\nimport Dijkstra from '../../Backend/Algorithms/Dijkstra';\r\nimport Dijkstra_old from '../../Backend/Algorithms/Dijkstra_old';\r\n\r\nexport function UpdateTable(Start, ClearPath, algorithm, speed) { // 即時更新Algorithm結果\r\n    ClearPath(false)\r\n    switch (algorithm.get) {\r\n        case \"Algorithm_Dijkstra\":\r\n            Dijkstra(\"Dijkstra\", Start, speed.get[1]);\r\n            break;\r\n        case 'Algorithm_AStar':\r\n            Dijkstra(\"Astar\", Start, speed.get[1]);\r\n            break;\r\n        case \"Algorithm_Greedy_Best_First\":\r\n            Dijkstra(\"GreedyBestFirstSearch\", Start, speed.get[1]);\r\n            break;\r\n        case \"Algorithm_Swarm\":\r\n            Dijkstra(\"Swarm\", Start, speed.get[1]);\r\n            break;\r\n        case \"Algorithm_Convergent_Swarm\":\r\n            Dijkstra(\"ConvergentSwarm\", Start, speed.get[1]);\r\n            break;\r\n        case \"Algorithm_Bidrectional_Swarm\":\r\n            Dijkstra(\"BidirectionSwarm\", Start, speed.get[1]);\r\n            break;\r\n        case \"Algorithm_Breadth_First\":\r\n            BFS(Start, speed.get[1]);\r\n            break;\r\n        case \"Algorithm_Depth_First\":\r\n            DFS(Start, speed.get[1]);\r\n            break;\r\n        case \"Algorithm_Dijkstra_old\":\r\n            Dijkstra_old(\"Dijkstra\", Start, speed.get[1]);\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n}","import { useContext } from 'react'\r\nimport { tableVar, touchContext, updateContext, componentKind, synchronize, originPos } from './TableIndex'\r\nimport { SearchAnimation, MazeAnimation, FinalAnimation, FinalMazeAnimation, stopStatus, resetAnimation } from './Animation'\r\nimport { sysStatusContext, algorithmContext, bombContext, speedContext, animationStatusContext, position } from '../../Core'\r\nimport { setTable } from './SetTable'\r\nimport { UpdateTable } from './UpdateTable'\r\nimport { WhichComponentSame } from './WhichComp'\r\n\r\n\r\nfunction ButtonEvent() {\r\n    const [touch, update] = [useContext(touchContext), useContext(updateContext)]\r\n    const [algorithm, bomb, sysSpeed, sysStatus, animation] = [useContext(algorithmContext), useContext(bombContext), useContext(speedContext), useContext(sysStatusContext), useContext(animationStatusContext)]\r\n\r\n    const Start = (search = stopStatus.search, path = stopStatus.path, pathDirection = stopStatus.pathDirection, speed = sysSpeed.get[1], bomb = stopStatus.bomb) => {\r\n        if (stopStatus.animationStatus) { // 若 animation 正在執行就暫停並直接 return\r\n            stopStatus.animationStatus = false\r\n            return\r\n        }\r\n\r\n        if (sysStatus.get === \"IDLE\" || (sysStatus.get === \"STOP\" && algorithm.get !== stopStatus.algorithm)) {\r\n            stopStatus.algorithm = algorithm.get\r\n            // resetAnimation()  // 執行start之前都會call ClearPath()\r\n        }\r\n\r\n        if (update.get && synchronize.update) {\r\n            FinalAnimation(search, path, pathDirection, bomb)\r\n        } else {\r\n            // console.log(\"Start\")\r\n            sysStatus.set(\"RUNNING\")\r\n            stopStatus.animationStatus = true\r\n            SearchAnimation(search, bomb, path, pathDirection, speed,\r\n                () => sysStatus.set(\"STOP\"),\r\n                () => {\r\n                    update.set(\"True\")\r\n                    synchronize.update = true\r\n                    sysStatus.set(\"IDLE\")\r\n                }\r\n            )\r\n\r\n        }\r\n    }\r\n\r\n    const CreateMaze = (maze = stopStatus.maze, speed = sysSpeed.get[1]) => {\r\n        if (sysStatus.get === \"IDLE\" || (sysStatus.get === \"STOP\" && (animation.get === \"Algorithm\" || synchronize.animation === \"Algorithm\"))) {\r\n            // resetAnimation()  // 執行start之前都會call ClearPath()\r\n        }\r\n\r\n        if (speed === 0) {\r\n            FinalMazeAnimation(maze)\r\n        } else {\r\n            sysStatus.set(\"RUNNING\")\r\n            animation.set(\"Maze\")\r\n            synchronize.animation = \"Maze\"\r\n            stopStatus.animationStatus = true\r\n            MazeAnimation(maze, speed, () => sysStatus.set(\"STOP\"), () => { sysStatus.set(\"IDLE\"); animation.set(\"Algorithm\"); synchronize.animation = \"Algorithm\" })\r\n        }\r\n    }\r\n\r\n    const CheckStopStatus = () => { // 當 sysStatus = \"STOP\" 時，Algorithm ==> ClearWalls & Maze ==> ClearPath\r\n        if (sysStatus.get === \"STOP\") {\r\n            if (animation.get === \"Maze\") {\r\n                ClearWalls(false) // false 避免形成遞迴\r\n                animation.set(\"Algorithm\")\r\n                synchronize.animation = \"Algorithm\" // 因為reducer會不同步，因此需要及時處理\r\n            } else {\r\n                ClearPath()\r\n            }\r\n            sysStatus.set(\"IDLE\")\r\n        }\r\n    }\r\n\r\n    const Addbomb = (checkStopStatus = true) => {\r\n        // console.log(\"AddBomb\")\r\n        const index = originPos.origin_bomb[0] * tableVar.colSize + originPos.origin_bomb[1]\r\n\r\n        if (WhichComponentSame(index) <= 2) { // 若 AddBomb 的位置有 start end 不新增\r\n            return\r\n        }\r\n\r\n        bomb.set(\"True\")\r\n        setTable(index, componentKind.bomb, true)\r\n\r\n        if (checkStopStatus) {\r\n            CheckStopStatus()\r\n        }\r\n\r\n        if (update.get) { // 若 update = true 直接重新 UpdateTable\r\n            UpdateTable(Start, ClearPath, algorithm, sysSpeed)\r\n        }\r\n    }\r\n\r\n    const RemoveBomb = (checkStopStatus = true) => {\r\n        // console.log(\"RemoveBomb\")\r\n        if (position.bomb !== false) {\r\n            setTable(position.bomb, componentKind.background, true)\r\n        }\r\n        bomb.set(\"False\")\r\n\r\n        if (checkStopStatus) {\r\n            CheckStopStatus()\r\n        }\r\n\r\n        if (update.get) { // 若 update = true 直接重新 UpdateTable\r\n            UpdateTable(Start, ClearPath, algorithm, sysSpeed)\r\n        }\r\n    }\r\n\r\n    const ClearWalls = (checkStopStatus = true) => {\r\n        // console.log(\"ClearWall\")\r\n        const wall = Object.keys(position.wall)\r\n        for (var i = 0; i < wall.length; i++) {\r\n            setTable(wall[i].split(\",\"), componentKind.background, true)\r\n        }\r\n        ClearWeights(false)\r\n        ClearPath()\r\n\r\n        touch.set(\"\")\r\n\r\n        if (checkStopStatus) {\r\n            CheckStopStatus()\r\n        }\r\n    }\r\n\r\n    const ClearWeights = (checkStopStatus = true) => {\r\n        // console.log(\"ClearWeights\")\r\n        const weight = Object.keys(position.weight)\r\n\r\n        for (var i = 0; i < weight.length; i++) {\r\n            setTable(weight[i].split(\",\"), componentKind.background, true)\r\n        }\r\n        if (touch.get.start !== componentKind.wall) {\r\n            touch.set({ componentKind: componentKind.start, under: componentKind.background })\r\n        }\r\n        if (touch.get.end !== componentKind.wall) {\r\n            touch.set({ componentKind: componentKind.end, under: componentKind.background })\r\n        }\r\n        if (touch.get.bomb !== componentKind.wall) {\r\n            touch.set({ componentKind: componentKind.bomb, under: componentKind.background })\r\n        }\r\n\r\n        if (checkStopStatus) {\r\n            CheckStopStatus()\r\n        }\r\n    }\r\n\r\n    const ClearPath = (event = true, reset = false) => {\r\n        // console.log(\"ClearPath\")\r\n\r\n        if (animation.get !== \"Maze\"){\r\n            sysStatus.set(\"IDLE\")\r\n        }\r\n\r\n        if (event) {\r\n            update.set(\"False\")\r\n            synchronize.update = false // 因為reducer會不同步，因此需要及時處理\r\n        }\r\n\r\n        for (var i = 0; i < tableVar.rowSize * tableVar.colSize; i++) {\r\n            if (WhichComponentSame(i) >= 5) {\r\n                setTable(i, componentKind.background)\r\n            } else if (WhichComponentSame(i) === 3) {\r\n                setTable(i, componentKind.weightStatic)\r\n            } else if (WhichComponentSame(i) === 2) {\r\n                setTable(i, componentKind.bomb)\r\n            } else if (WhichComponentSame(i) === 1) {\r\n                setTable(i, componentKind.end)\r\n            } else if (WhichComponentSame(i) === 0) {\r\n                setTable(i, componentKind.start)\r\n            }\r\n        }\r\n\r\n        if (animation.get === \"Algorithm\" || reset) {\r\n            resetAnimation()\r\n        }\r\n    }\r\n\r\n    const ClearBoard = () => {\r\n        // console.log(\"ClearBoard\")\r\n        update.set(\"False\")\r\n        for (var i = 0; i < tableVar.rowSize * tableVar.colSize; i++) {\r\n            setTable(i, componentKind.background, true)\r\n        }\r\n        setTable(originPos.origin_start[0] * tableVar.colSize + originPos.origin_start[1], componentKind.start, true)\r\n        setTable(originPos.origin_end[0] * tableVar.colSize + originPos.origin_end[1], componentKind.end, true)\r\n        touch.set(\"\")\r\n        bomb.set(\"False\")\r\n        CheckStopStatus()\r\n    }\r\n\r\n    return { Start, Addbomb, RemoveBomb, ClearWalls, ClearPath, ClearBoard, CreateMaze, ClearWeights }\r\n}\r\n\r\nexport default ButtonEvent\r\n\r\n\r\n\r\n","import React, { useContext } from 'react';\r\nimport { NavDropdown, Nav } from 'react-bootstrap';\r\nimport { algorithmContext, sysStatusContext } from '../../../Core';\r\nimport Colored from '../HeaderHepler/Colored';\r\nimport ButtonEvent from '../../TableHelper/ButtonEvent';\r\n\r\nfunction DropdownAlgorithm() {\r\n    const algoContext = useContext(algorithmContext);\r\n    const sysStatus = useContext(sysStatusContext);\r\n    const [className, toggleHandler] = Colored();\r\n    const buttonEvent = ButtonEvent()\r\n\r\n    const DropdownAlgorithmHandler = (eventKey) => {\r\n\r\n        if (sysStatus.get !== \"IDLE\" && sysStatus.get !== \"STOP\") {\r\n            return;\r\n        }\r\n\r\n        switch (eventKey) {\r\n            case \"Algorithm_Dijkstra\":\r\n                algoContext.set('Algorithm_Dijkstra');\r\n                break;\r\n            case \"Algorithm_AStar\":\r\n                algoContext.set('Algorithm_AStar');\r\n                break;\r\n            case \"Algorithm_Greedy_Best_First\":\r\n                algoContext.set('Algorithm_Greedy_Best_First');\r\n                break;\r\n            case \"Algorithm_Swarm\":\r\n                algoContext.set('Algorithm_Swarm');\r\n                break;\r\n            case \"Algorithm_Convergent_Swarm\":\r\n                algoContext.set('Algorithm_Convergent_Swarm');\r\n                break;\r\n            case \"Algorithm_Bidrectional_Swarm\":\r\n                buttonEvent.RemoveBomb(false); // 按下去後要清空bomb // false只是換演算法，不ClearPath\r\n                algoContext.set('Algorithm_Bidrectional_Swarm');\r\n                break;\r\n            case \"Algorithm_Breadth_First\":\r\n                buttonEvent.ClearPath(false);\r\n                buttonEvent.ClearWeights(false); // 按下去後要清空weight // false只是換演算法，不ClearPath\r\n                algoContext.set('Algorithm_Breadth_First');\r\n                break;\r\n            case \"Algorithm_Depth_First\":\r\n                buttonEvent.ClearPath(false);\r\n                buttonEvent.ClearWeights(false); // 按下去後要清空weight // false只是換演算法，不ClearPath\r\n                algoContext.set('Algorithm_Depth_First');\r\n                break;\r\n            case \"Algorithm_Dijkstra_old\":\r\n                algoContext.set('Algorithm_Dijkstra_old');\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <Nav.Item>\r\n            <NavDropdown xs={1} title={<span className={className}>Algorithms</span>} id=\"DropdownAlgorithm\" onSelect={(eventKey) => DropdownAlgorithmHandler(eventKey)}\r\n                onMouseEnter={toggleHandler} onMouseLeave={toggleHandler}\r\n            >\r\n                <NavDropdown.Item eventKey=\"Algorithm_Dijkstra\">Dijkstra's Algorithm</NavDropdown.Item>\r\n                <NavDropdown.Item eventKey=\"Algorithm_AStar\">A* Search</NavDropdown.Item>\r\n                <NavDropdown.Item eventKey=\"Algorithm_Greedy_Best_First\">Greedy Best-First Search</NavDropdown.Item>\r\n                <NavDropdown.Item eventKey=\"Algorithm_Swarm\">Swarm Algorithm</NavDropdown.Item>\r\n                <NavDropdown.Item eventKey=\"Algorithm_Convergent_Swarm\">Convergent Swarm Algorithm</NavDropdown.Item>\r\n                <NavDropdown.Item eventKey=\"Algorithm_Bidrectional_Swarm\">Bidirectional Swarm Algorithm</NavDropdown.Item>\r\n                <NavDropdown.Item eventKey=\"Algorithm_Breadth_First\">Breadth-First Search</NavDropdown.Item>\r\n                <NavDropdown.Item eventKey=\"Algorithm_Depth_First\">Depth-First Search</NavDropdown.Item>\r\n                <NavDropdown.Divider />\r\n                <NavDropdown.Item eventKey=\"Algorithm_Dijkstra_old\">(Old) Dijkstra's Algorithm</NavDropdown.Item>\r\n            </NavDropdown>\r\n        </Nav.Item>\r\n    )\r\n}\r\n\r\nexport default DropdownAlgorithm;","import { position } from '../../Core';\r\n\r\nfunction Simple_Stair_Pattern() {\r\n    var walls = [];\r\n    var weights = [];\r\n    var towardUp = true;\r\n    var x = position.rowSize;\r\n\r\n    for (var y = 0; y < position.colSize; y++) {\r\n        if (towardUp) {\r\n            x--;\r\n            if (x < 0) {\r\n                towardUp = false;\r\n                x = 1;\r\n            }\r\n        } else {\r\n            x++;\r\n            if (x >= position.rowSize) {\r\n                towardUp = true;\r\n                x = position.rowSize - 2;\r\n            }\r\n        }\r\n        walls.push([x, y]);\r\n    }\r\n    return [walls, weights];\r\n}\r\n\r\nexport default Simple_Stair_Pattern;","import { position } from '../../Core';\r\n\r\n// 取得四周圍\r\nexport const CreateAround = (wallSet = new Set()) => {\r\n    var walls = [];\r\n    var x = 0;\r\n    var y = 0;\r\n\r\n    // 取得外圍\r\n    var tmp = position.colSize - 1;\r\n    for (y = 0; y <= tmp; y++) {\r\n        walls.push([0, y]);\r\n        walls.push([0, tmp]);\r\n        wallSet.add([0, y].toString());\r\n        wallSet.add([0, tmp].toString());\r\n        tmp--;\r\n    }\r\n\r\n    for (x = 0; x < position.rowSize; x++) {\r\n        walls.push([x, 0]);\r\n        walls.push([x, position.colSize - 1]);\r\n        wallSet.add([x, 0].toString());\r\n        wallSet.add([x, position.colSize - 1].toString());\r\n\r\n    }\r\n\r\n    tmp = position.colSize - 1;\r\n    for (y = 0; y <= tmp; y++) {\r\n        walls.push([position.rowSize - 1, y]);\r\n        walls.push([position.rowSize - 1, tmp]);\r\n        wallSet.add([position.rowSize - 1, y].toString());\r\n        wallSet.add([position.rowSize - 1, tmp].toString());\r\n        tmp--;\r\n    }\r\n    return walls;\r\n}\r\n\r\nexport const IndexOf = (array, target) => {\r\n    for (let i = 0; i < array.length; i++) {\r\n        if (target.toString() === array[i].toString()) {\r\n            return i;\r\n        }\r\n    }\r\n    return -1;\r\n}\r\n\r\nexport const Random = (n) => {\r\n    return Math.floor(Math.random() * n);\r\n}\r\n\r\nexport const RandomEven = (n) => {\r\n    return Math.floor(Math.random() * n / 2) * 2;\r\n}","import { position } from '../../Core';\r\nimport { CreateAround } from './Core';\r\n\r\nfunction Binary_Tree() {\r\n    var wallSet = new Set();\r\n    var walls = CreateAround(wallSet);\r\n    var weights = [];\r\n    var x = 0;\r\n    var y = 0;\r\n\r\n    // Binary Tree to get random maze\r\n    // http://weblog.jamisbuck.org/2011/2/1/maze-generation-binary-tree-algorithm\r\n    for (x = 2; x <= position.rowSize - 2; x += 2) {\r\n        for (y = 2; y <= position.colSize - 2; y += 2) {\r\n            if (wallSet.has([x - 2, y].toString()) && wallSet.has([x, y - 2].toString())) {\r\n                var randomFace = Math.floor(Math.random() * 2) + 1;// 1=上，2=左\r\n                switch (randomFace) {\r\n                    case 1:\r\n                        walls.push([x - 1, y]);\r\n                        wallSet.add([x - 1, y].toString());\r\n                        break;\r\n                    case 2:\r\n                        walls.push([x, y - 1]);\r\n                        wallSet.add([x, y - 1].toString());\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n            } else if (wallSet.has([x - 2, y].toString())) {\r\n                walls.push([x - 1, y]);\r\n                wallSet.add([x - 1, y].toString());\r\n            } else if (wallSet.has([x, y - 2].toString())) {\r\n                walls.push([x, y - 2]);\r\n                wallSet.add([x, y - 1].toString());\r\n            } else {\r\n                console.log('Some Error in Binary_Tree_Maze()');\r\n            }\r\n            walls.push([x, y]);\r\n            wallSet.add([x, y].toString());\r\n        }\r\n    }\r\n\r\n    return [walls, weights];\r\n}\r\n\r\nexport default Binary_Tree;","import { position } from '../../Core';\r\nimport { CreateAround, Random, RandomEven, IndexOf } from './Core';\r\n\r\nconst direction = {\r\n    horizontal: 0,\r\n    vertical: 1\r\n}\r\n\r\nfunction RecursiveDivision(whichAlgo) {\r\n    var wallSet = new Set();\r\n    var walls = CreateAround(wallSet);\r\n    var weights = [];\r\n\r\n    // true代表水平，false代表垂直\r\n    // 改用最後一個參數選定要跑哪個方向\r\n    switch (whichAlgo) {\r\n        case \"RecursiveDivision\":\r\n            DoRecursiveDivision(0, 0, position.colSize, position.rowSize, wallSet, walls);\r\n            break;\r\n        case \"RecursiveDivision_Vertical\":\r\n            DoRecursiveDivision(0, 0, position.colSize, position.rowSize, wallSet, walls, true);\r\n            break;\r\n        case \"RecursiveDivision_Horizontal\":\r\n            DoRecursiveDivision(0, 0, position.colSize, position.rowSize, wallSet, walls, false);\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n\r\n    // 建立牆壁時，因為不會考慮特殊node，所以還是有機會在node周圍建立起牆壁，而形成死路 https://i.imgur.com/r6gYt39.png\r\n    // 因此跑完之後，去看特殊node是否四周圍死路\r\n    // 若為死路，則周圍隨機去除一個合法的wall即可\r\n    var specialNodes = [position.start, position.bomb, position.end];\r\n    for (let i = 0; i < specialNodes.length; i++) {\r\n        let curPos = specialNodes[i];\r\n\r\n        if (!curPos) continue; // 如果特殊node不存在，就不判斷\r\n\r\n        let up = curPos[0] - 1 >= 0 ? [curPos[0] - 1, curPos[1]] : null;\r\n        let right = curPos[1] + 1 < position.colSize ? [curPos[0], curPos[1] + 1] : null;\r\n        let down = curPos[0] + 1 < position.rowSize ? [curPos[0] + 1, curPos[1]] : null;\r\n        let left = curPos[1] - 1 >= 0 ? [curPos[0], curPos[1] - 1] : null;\r\n\r\n        let validWall = [];\r\n        let blockDirection = 0;\r\n        // eslint-disable-next-line\r\n        [up, right, down, left].forEach(nextPos => {\r\n            if (nextPos === null) {\r\n                blockDirection++;\r\n            } else if (wallSet.has(nextPos.toString())) {\r\n                validWall.push(nextPos);\r\n                blockDirection++;\r\n            }\r\n        })\r\n        if (blockDirection === 4) {\r\n            let removedWallIndex = Random(validWall.length);\r\n            walls.splice(IndexOf(walls, validWall[removedWallIndex]), 1);\r\n        }\r\n    }\r\n\r\n    return [walls, weights];\r\n}\r\n\r\n// 與正常版的差別在於，選擇切水平或是垂直的條件不同\r\n// 水平偏移（horizontal skew）：表示優先跑左邊，所以第一個遞迴規定跑水平，第二個規定跑垂直\r\nfunction DoRecursiveDivision(x, y, width, height, wallSet, walls, boolDirection = null) {\r\n    // 而且為了保證道路暢通，兩個牆壁+一個空白才會形成一個道路\r\n    // 因此長跟寬必須至少大於3\r\n    if (width < 4 || height < 4) {\r\n        return;\r\n    }\r\n\r\n    // 選擇切割方向：挑選短的那邊，一樣就random\r\n    var curDirection = null;\r\n    if (boolDirection === null) {\r\n        if (width < height) curDirection = direction.horizontal;\r\n        else if (width > height) curDirection = direction.vertical;\r\n        else curDirection = Random(2);\r\n    } else {\r\n        if (boolDirection) {\r\n            curDirection = direction.vertical;\r\n        }\r\n        else {\r\n            curDirection = direction.horizontal;\r\n        }\r\n    }\r\n\r\n\r\n    var door;\r\n    if (curDirection === direction.horizontal) {\r\n        // 假設現在height=11，表示x=x0跟x=10的那整條都是牆壁\r\n        // 則 x建立牆壁的範圍為 2~8 (牆壁跟牆壁中間要留一條路)\r\n\r\n        // 因此x要x0+2，而剩下的random範圍為0~6且只能為偶數\r\n        var randomX = x + 2 + RandomEven(height - 4);\r\n\r\n        // 假設width = 9，表示y=y0跟y=8的那整條都是牆壁\r\n        // 開路的範圍為 y0+ 1~7（但開路必為奇數），而剩下的random範圍為0~6且只能為偶數\r\n        door = y + 1 + RandomEven(width - 3);\r\n\r\n        // 建立牆壁，範圍從 y0~y0+width\r\n        for (var _y = y; _y < y + width; _y++) {\r\n            if (_y !== door) {\r\n                walls.push([randomX, _y]);\r\n                wallSet.add([randomX, _y].toString());\r\n            }\r\n        }\r\n\r\n        // 跑 x,y,width 且 height變成了剛剛選的高-x0（跑上面）\r\n        DoRecursiveDivision(x, y, width, randomX - x, wallSet, walls, boolDirection); // 第一個規定跑指定方向\r\n\r\n        // 跑 新x, y, width 且 height變成了 目前總高 - 剛剛選的高度(跑下面)\r\n        DoRecursiveDivision(randomX, y, width, height - (randomX - x), wallSet, walls, !boolDirection); // 第二個規定跑(!指定方向)\r\n    } else {\r\n        // 垂直雷同\r\n        var randomY = y + 2 + RandomEven(width - 4);\r\n        door = x + 1 + RandomEven(height - 3);\r\n\r\n        for (var _x = x; _x < x + height; _x++) {\r\n            if (_x !== door) {\r\n                walls.push([_x, randomY]);\r\n                wallSet.add([_x, randomY].toString());\r\n            }\r\n        }\r\n\r\n        DoRecursiveDivision(x, y, randomY - y, height, wallSet, walls, boolDirection); // 第一個規定跑指定方向\r\n        DoRecursiveDivision(x, randomY, width - (randomY - y), height, wallSet, walls, !boolDirection); // 第二個規定跑(!指定方向)\r\n    }\r\n}\r\n\r\nexport default RecursiveDivision;","import { position } from '../../Core';\r\nimport { Random, RandomEven } from './Core';\r\n\r\n// Kruskal 雖然是要找最小權重，但是maze的權重都是相同的\r\n// 因此此演算法就變成，隨機找一個，跟周圍相連，且不要形成cycle\r\n// 這種特性就可以用來建立隨機迷宮的牆壁\r\n// 但不會保證活路\r\nfunction Kruskal() {\r\n    var wallSet = new Set();\r\n    var walls = [];\r\n    var weights = [];\r\n\r\n    // 建立parent與rank陣列 來判斷是否有cycle及union\r\n    var parent = {};\r\n    var rank = {};\r\n    for (let i = 0; i < position.rowSize; i++) {\r\n        for (let j = 0; j < position.colSize; j++) {\r\n            parent[[i, j]] = [i, j];// 每個人的root一開始都是自己\r\n            rank[[i, j]] = 0;// 每個人的rank一開始都是0\r\n        }\r\n    }\r\n\r\n    // 長度為三，因為只能在偶數位置建立牆壁，所以長度三才能與其他牆壁相連\r\n    // 用佔比率來終止迴圈，0.51是經驗法則\r\n    while (wallSet.size / (position.rowSize * position.colSize) < 0.51) {\r\n\r\n        // 取 產生偶數位置起點\r\n        let x = [RandomEven(position.rowSize), RandomEven(position.colSize)];\r\n        let x1 = null;\r\n        let x2 = null;\r\n        let xHead = null;\r\n        let yHead = null;\r\n        let face = Random(4);\r\n        switch (face) {\r\n            case 0: // 走上\r\n                if (x[0] - 2 < 0) continue;\r\n                x1 = [x[0] - 1, x[1]];\r\n                x2 = [x[0] - 2, x[1]];\r\n                xHead = FindRoot(parent, x);\r\n                yHead = FindRoot(parent, x2);\r\n                break;\r\n            case 1: // 走右\r\n                if (x[1] + 2 >= position.colSize) continue;\r\n                x1 = [x[0], x[1] + 1];\r\n                x2 = [x[0], x[1] + 2];\r\n                xHead = FindRoot(parent, x);\r\n                yHead = FindRoot(parent, x2);\r\n                break;\r\n            case 2:\r\n                if (x[0] + 2 >= position.rowSize) continue;\r\n                x1 = [x[0] + 1, x[1]];\r\n                x2 = [x[0] + 2, x[1]];\r\n                xHead = FindRoot(parent, x);\r\n                yHead = FindRoot(parent, x2);\r\n                break;\r\n            case 3:\r\n                if (x[1] - 2 < 0) continue;\r\n                x1 = [x[0], x[1] - 1];\r\n                x2 = [x[0], x[1] - 2];\r\n                xHead = FindRoot(parent, x);\r\n                yHead = FindRoot(parent, x2);\r\n                break;\r\n            default:\r\n                return [];\r\n        }\r\n\r\n\r\n        if (xHead !== yHead) {\r\n            walls.push(x);\r\n            walls.push(x1);\r\n            walls.push(x2);\r\n            wallSet.add(x.toString());\r\n            wallSet.add(x1.toString());\r\n            wallSet.add(x2.toString());\r\n            Union(parent, rank, x, x2);\r\n        }\r\n    }\r\n\r\n    return [walls, weights];\r\n}\r\n\r\n/* Disjoint Set */\r\n// parentArray => index的爸爸在parentArray[index] = parentIndex\r\n// index => 目前是誰\r\nfunction FindRoot(parentArray, index) {\r\n    if (parentArray[index] !== index) {\r\n        // 記得邊找邊更新\r\n        parentArray[index] = FindRoot(parentArray, parentArray[index]);\r\n    }\r\n    return parentArray[index];\r\n}\r\n\r\n\r\n// parentArray => index的爸爸在parentArray[index] = parentIndex\r\n// rankArray => 每個點的階層是多少，數字大表示越接近root\r\n// index1, index3 => 哪兩個點要union\r\nfunction Union(parentArray, rankArray, index1, index3) {\r\n    // 要用頭去union\r\n    index1 = FindRoot(parentArray, index1);\r\n    index3 = FindRoot(parentArray, index3);\r\n\r\n    if (index1 === index3) {\r\n        return;\r\n    }\r\n\r\n    // 如果rank3 > rank1 => index1的爸爸是index3\r\n    if (rankArray[index1] < rankArray[index3]) {\r\n        parentArray[index1] = index3;\r\n\r\n        // 如果rank3 < rank1 => index3的爸爸是index1\r\n    } else if (rankArray[index1] > rankArray[index3]) {\r\n        parentArray[index3] = index1;\r\n\r\n        // 如果rank3 === rank1 => 選一個來組合，並讓爸爸的RANK+1\r\n    } else {\r\n        parentArray[index3] = index1;\r\n        rankArray[index1] += 1;\r\n    }\r\n}\r\n\r\n\r\nexport default Kruskal;","import { position } from '../../Core';\r\n\r\nconst probability = 0.2\r\n\r\nfunction Basic_Random_Maze(){\r\n    const wall = []\r\n    const weights = []\r\n\r\n    const [height, width] = [position.rowSize, position.colSize]\r\n    for(var i = 0; i < height; i++){\r\n        for(var j = 0; j < width; j++){\r\n            if(Math.random() < probability){\r\n                if(i === position.start[0] && j === position.start[1]){\r\n                    continue\r\n                }else if(i === position.end[0] && j === position.end[1]){\r\n                    continue\r\n                }else if(position.bomb !== false && i === position.bomb[0] && j === position.bomb[1]){\r\n                    continue\r\n                }else{\r\n                    wall.push([i, j])\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return [wall, weights]\r\n}\r\n\r\nexport default Basic_Random_Maze","import { position } from '../../Core';\r\n\r\nconst probability = 0.35\r\n\r\nfunction Basic_Weight_Maze(){\r\n    const wall = []\r\n    const weight = []\r\n\r\n    const [height, width] = [position.rowSize, position.colSize]\r\n    for(var i = 0; i < height; i++){\r\n        for(var j = 0; j < width; j++){\r\n            if(Math.random() < probability){\r\n                if(i === position.start[0] && j === position.start[1]){\r\n                    continue\r\n                }else if(i === position.end[0] && j === position.end[1]){\r\n                    continue\r\n                }else if(position.bomb !== false && i === position.bomb[0] && j === position.bomb[1]){\r\n                    continue\r\n                }else{\r\n                    weight.push([i, j])\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return [wall, weight]\r\n}\r\n\r\nexport default Basic_Weight_Maze","import { position } from '../../Core';\r\nimport { Random, RandomEven } from './Core';\r\n\r\n// 從一點出發找四周圍最小的權重\r\n// 但隨機迷宮可以改成\r\n// 從一點出發，往四周圍前進，並只去隨機找有走過的點\r\nfunction Prim() {\r\n    var walls = [];\r\n    var weights = [];\r\n\r\n\r\n    // Random Pick a position\r\n    // 取偶數，因為牆壁長度為３，棋盤長寬為奇數，所以取偶數才能伸展到四邊\r\n    var startNode = [2 + RandomEven(position.rowSize - 4), 2 + RandomEven(position.colSize - 4)];\r\n    var visited = new Set();\r\n    var queue = [startNode];\r\n\r\n    while (queue.length > 0) {\r\n        var randomIndex = RandomEven(queue.length); // random pick a node\r\n        var node = queue[randomIndex];\r\n\r\n        var availableDirection = [];\r\n\r\n        if (node[0] - 2 >= 0 && !visited.has([node[0] - 2, node[1]].toString())) {\r\n            availableDirection.push([[node[0] - 2, node[1]], [node[0] - 1, node[1]]]);\r\n        }\r\n        if (node[1] + 2 < position.colSize && !visited.has([node[0], node[1] + 2].toString())) {\r\n            availableDirection.push([[node[0], node[1] + 2], [node[0], node[1] + 1]]);\r\n        }\r\n        if (node[0] + 2 < position.rowSize && !visited.has([node[0] + 2, node[1]].toString())) {\r\n            availableDirection.push([[node[0] + 2, node[1]], [node[0] + 1, node[1]]]);\r\n        }\r\n        if (node[1] - 2 >= 0 && !visited.has([node[0], node[1] - 2].toString())) {\r\n            availableDirection.push([[node[0], node[1] - 2], [node[0], node[1] - 1]]);\r\n        }\r\n\r\n        // 若四個方位都沒有可能，再把考慮點去掉\r\n        if (availableDirection.length === 0) {\r\n            queue.splice(randomIndex, 1);\r\n            continue;\r\n        }\r\n\r\n        // 隨機挑一個方位\r\n        randomIndex = Random(availableDirection.length);\r\n        node = availableDirection[randomIndex];\r\n\r\n        // 加入此方位的牆壁\r\n        walls.push(node[1]);\r\n        walls.push(node[0]);\r\n\r\n        // 加入已走過的點\r\n        visited.add(node[0].toString());\r\n\r\n        // 加入考慮點\r\n        queue.push(node[0]);\r\n    }\r\n    return [walls, weights];\r\n}\r\n\r\nexport default Prim;","import { position } from '../../Core';\r\nimport { CreateAround, Random } from './Core';\r\n\r\nfunction Eller() {\r\n    var weights = [];\r\n    var walls = CreateAround();\r\n    /*\r\n    道路從第二層開始，牆壁從第一層開始\r\n    因為預設第一層的道路都是暢通的（周圍圍起來，要留出一格道路），故道路要+1\r\n    之後的每層每次抓取右邊兩格（一個道路一個牆壁）\r\n    若牆壁建立，則看「已經建立過道路了沒」（保證每個set都至少有一個建立道路（Eller））\r\n        若已經建立了，則看道路是否要建立\r\n            要建立=沒事\r\n            不建立=道路下方建立一個牆壁\r\n        若沒有建立，則這個要建立道路（也就是不要在道路下方建立一格牆壁）\r\n            = 沒事\r\n        「已經建立過道路了沒」 = false （重新計算）\r\n    若牆壁不建立，則\r\n        看道路是否要建立\r\n            要建立=「已經建立過道路了沒=True」\r\n            不建立=道路下方建立一個牆壁\r\n    \r\n    edge長度為2\r\n    */\r\n    // 要保證最下方跟最右方是暢通的，因為周圍有框起來\r\n    for (let i = 1; i < position.rowSize - 3; i += 2) {\r\n        var haveBuildedPath = false;\r\n        for (let j = 1; j < position.colSize - 3; j += 2) {\r\n            var buildWall = 1 === Random(2) ? true : false;\r\n            var buildPath = 1 === Random(2) ? true : false;\r\n\r\n            // 牆壁，看是否要建立牆壁\r\n            if (buildWall) {\r\n                walls.push([i, j + 1]);\r\n                walls.push([i + 1, j + 1]);\r\n\r\n                if (haveBuildedPath) {\r\n                    if (!buildPath) {\r\n                        walls.push([i + 1, j]);\r\n                        walls.push([i + 1, j + 1]);\r\n                    }\r\n                }\r\n                haveBuildedPath = false;\r\n            } else {\r\n                // 為了保持迷宮的感覺，牆壁不能太少\r\n                // 因此改成每個set只能有一個開口，且開口大小為1\r\n                if (buildPath && !haveBuildedPath) {\r\n                    haveBuildedPath = true;\r\n                    walls.push([i + 1, j + 1]); // 開口大小為1，所以開口的右方也要是牆壁\r\n                } else {\r\n                    walls.push([i + 1, j]);\r\n                    walls.push([i + 1, j + 1]);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return [walls, weights];\r\n}\r\n\r\n\r\nexport default Eller;","import React, { useContext } from 'react'\r\nimport { NavDropdown, Nav } from 'react-bootstrap';\r\nimport { sysStatusContext, speedContext, mazeContext } from '../../../Core';\r\nimport Colored from '../HeaderHepler/Colored';\r\nimport ButtonEvent from '../../TableHelper/ButtonEvent';\r\nimport Simple_Stair_Pattern from '../../../Backend/Maze/Simple_Stair_Pattern';\r\nimport Binary_Tree from '../../../Backend/Maze/Binary_Tree';\r\nimport RecursiveDivision from '../../../Backend/Maze/RecursiveDivision';\r\nimport Kruskal from '../../../Backend/Maze/Kruskal';\r\nimport Basic_Random_Maze from '../../../Backend/Maze/Basic_Random_Maze';\r\nimport Basic_Weight_Maze from '../../../Backend/Maze/Basic_Weight_Maze';\r\nimport Prim from '../../../Backend/Maze/Prim';\r\nimport Eller from '../../../Backend/Maze/Eller';\r\n\r\nfunction DropdownMaze() {\r\n    const sysStatus = useContext(sysStatusContext);\r\n    const speedStatus = useContext(speedContext);\r\n    const mazeStatus = useContext(mazeContext);\r\n    const [className, toggleHandler] = Colored();\r\n    const buttonEvent = ButtonEvent();\r\n    const speed = speedStatus.get[1];\r\n\r\n    const DropdownMazeHandler = (eventKey) => {\r\n        if (sysStatus.get !== \"IDLE\" && sysStatus.get !== \"STOP\") {\r\n            return;\r\n        }\r\n        buttonEvent.ClearPath(undefined, true)\r\n        buttonEvent.ClearWalls()\r\n        switch (eventKey) {\r\n            case \"Maze_Recursive_Division\":\r\n                mazeStatus.set(\"Maze_Recursive_Division\");\r\n                buttonEvent.CreateMaze(RecursiveDivision(\"RecursiveDivision\"), speed);\r\n                break;\r\n            case \"Maze_Recursive_Division_vertical\":\r\n                mazeStatus.set(\"Maze_Recursive_Division_vertical\");\r\n                buttonEvent.CreateMaze(RecursiveDivision(\"RecursiveDivision_Vertical\"), speed);\r\n                break;\r\n            case \"Maze_Recursive_Division_horizontal\":\r\n                mazeStatus.set(\"Maze_Recursive_Division_horizontal\");\r\n                buttonEvent.CreateMaze(RecursiveDivision(\"RecursiveDivision_Horizontal\"), speed);\r\n                break;\r\n            case \"Maze_Basic_Random\":\r\n                mazeStatus.set(\"Maze_Basic_Random\");\r\n                buttonEvent.CreateMaze(Basic_Random_Maze(), 0)\r\n                break;\r\n            case \"Maze_Basic_Weight_Maze\":\r\n                mazeStatus.set(\"Maze_Basic_Weight_Maze\");\r\n                buttonEvent.CreateMaze(Basic_Weight_Maze(), 0)\r\n                break;\r\n            case \"Maze_Simple_stair_pattern\":\r\n                mazeStatus.set(\"Maze_Simple_stair_pattern\");\r\n                buttonEvent.CreateMaze(Simple_Stair_Pattern(), speed);\r\n                break;\r\n            case \"Maze_Binary_Tree\":\r\n                mazeStatus.set(\"Maze_Binary_Tree\");\r\n                buttonEvent.CreateMaze(Binary_Tree(), speed);\r\n                break;\r\n            case \"Maze_Kruskal\":\r\n                mazeStatus.set(\"Maze_Kruskal\");\r\n                buttonEvent.CreateMaze(Kruskal(), speed);\r\n                break;\r\n            case \"Maze_Prim\":\r\n                mazeStatus.set(\"Maze_Prim\");\r\n                buttonEvent.CreateMaze(Prim(), speed);\r\n                break;\r\n            case \"Maze_Eller\":\r\n                mazeStatus.set(\"Maze_Eller\");\r\n                buttonEvent.CreateMaze(Eller(), speed);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <Nav.Item>\r\n            <NavDropdown xs={1} title={<span className={className}>Mazes & Patterns</span>} id=\"DropdownMaze\" onSelect={DropdownMazeHandler}\r\n                onMouseEnter={toggleHandler} onMouseLeave={toggleHandler}\r\n            >\r\n                <NavDropdown.Item eventKey=\"Maze_Recursive_Division\">Recursive Division</NavDropdown.Item>\r\n                <NavDropdown.Item eventKey=\"Maze_Recursive_Division_vertical\">Recursive Division(vertical skew)</NavDropdown.Item>\r\n                <NavDropdown.Item eventKey=\"Maze_Recursive_Division_horizontal\">Recursive Division(horizontal skew)</NavDropdown.Item>\r\n                <NavDropdown.Item eventKey=\"Maze_Basic_Random\">Basic Random Maze</NavDropdown.Item>\r\n                <NavDropdown.Item eventKey=\"Maze_Basic_Weight_Maze\">Basic Weight Maze</NavDropdown.Item>\r\n                <NavDropdown.Item eventKey=\"Maze_Simple_stair_pattern\">Simple Stair Pattern</NavDropdown.Item>\r\n                <NavDropdown.Item eventKey=\"Maze_Binary_Tree\">Binary Tree Generator</NavDropdown.Item>\r\n                <NavDropdown.Item eventKey=\"Maze_Kruskal\">Kruskal's Maze</NavDropdown.Item>\r\n                <NavDropdown.Item eventKey=\"Maze_Prim\">Prim's Maze</NavDropdown.Item>\r\n                <NavDropdown.Item eventKey=\"Maze_Eller\">Eller's Maze</NavDropdown.Item>\r\n            </NavDropdown>\r\n        </Nav.Item>\r\n    )\r\n}\r\n\r\nexport default DropdownMaze;","import React, { useState, useContext } from 'react';\r\nimport Nav from 'react-bootstrap/Nav';\r\nimport { sysStatusContext } from '../../../Core';\r\nimport Colored from '../HeaderHepler/Colored';\r\n\r\nfunction NavLink({ names, handlers }) {\r\n    const [whichHandler, setWhichHandler] = useState(0);\r\n    const sysStatus = useContext(sysStatusContext);\r\n    const [className, toggleHandler] = Colored();\r\n\r\n    const localHandler = () => {\r\n        if (sysStatus.get !== \"IDLE\" && sysStatus.get !== \"STOP\") {\r\n            return;\r\n        }\r\n\r\n        setWhichHandler(preWhichHandler => (preWhichHandler + 1) % handlers.length);\r\n        handlers[whichHandler]();\r\n    }\r\n\r\n    return (\r\n        <Nav.Item>\r\n            <Nav.Link onClick={localHandler} className={className} onMouseEnter={toggleHandler} onMouseLeave={toggleHandler}>{names[whichHandler]}</Nav.Link>\r\n        </Nav.Item>\r\n    )\r\n}\r\n\r\nexport default NavLink\r\n","import { useState, useContext } from 'react';\r\nimport { sysStatusContext, algorithmContext } from '../../../Core';\r\nimport '../../../App.scss';\r\n\r\nconst Colored = () => {\r\n    const sysStatus = useContext(sysStatusContext);\r\n    const algoStatus = useContext(algorithmContext);\r\n    const [isHover, setIsHover] = useState(false);\r\n    const [className, setClassName] = useState(\"nav-link-default\");\r\n\r\n    const toggleHandler = () => {\r\n        if (isHover) {\r\n            setClassName(\"nav-link-default\");\r\n            setIsHover(false);\r\n        } else {\r\n            if ((sysStatus.get !== \"IDLE\" && sysStatus.get !== \"STOP\") || algoStatus.get === \"\" || algoStatus.get === \"Algorithm_Bidrectional_Swarm\") {\r\n                setClassName(\"nav-link-red\");\r\n            } else {\r\n                setClassName(\"nav-link-green\");\r\n            }\r\n            setIsHover(true);\r\n        }\r\n    }\r\n\r\n    return [className, toggleHandler];\r\n}\r\n\r\nexport default Colored\r\n","import React, { useState, useContext, useEffect } from 'react';\r\nimport Nav from 'react-bootstrap/Nav';\r\nimport { bombContext, sysStatusContext, algorithmContext } from '../../../Core';\r\nimport Colored from '../HeaderHepler/Colored_AddButton';\r\nimport { IsMount } from '../../../Core/IsMount.js'\r\n\r\nfunction NavAddBomb({ names, handlers }) {\r\n    const [whichHandler, setWhichHandler] = useState(0);\r\n    const bomb = useContext(bombContext);\r\n    const sysStatus = useContext(sysStatusContext);\r\n    const algoContext = useContext(algorithmContext);\r\n    const [className, toggleHandler] = Colored();\r\n    const isMount = IsMount();\r\n\r\n    useEffect(() => {\r\n        if (isMount) return; // 防止第一次render也會跑進來執行\r\n\r\n        if (bomb.get === true) {\r\n            setWhichHandler(1);\r\n        } else {\r\n            setWhichHandler(0);\r\n        }\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [bomb.get])\r\n\r\n    useEffect(() => {\r\n        if (isMount) return;\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [whichHandler])\r\n\r\n    const localHandler = () => {\r\n        if (isMount) return;\r\n\r\n        if ((sysStatus.get !== \"IDLE\" && sysStatus.get !== \"STOP\") || algoContext.get === \"\" || algoContext.get === \"Algorithm_Bidrectional_Swarm\") {\r\n            return;\r\n        }\r\n\r\n        handlers[whichHandler]();\r\n    }\r\n\r\n\r\n    return (\r\n        <Nav.Item>\r\n            <Nav.Link onClick={localHandler} className={className} onMouseEnter={toggleHandler} onMouseLeave={toggleHandler}>{names[whichHandler]}</Nav.Link>\r\n        </Nav.Item>\r\n    )\r\n}\r\n\r\nexport default NavAddBomb\r\n","import { useRef, useEffect } from 'react';\r\n\r\nexport const IsMount = () => {\r\n    const isMount = useRef(true);\r\n\r\n    useEffect(() => {\r\n        isMount.current = false;\r\n    }, [])\r\n\r\n    return isMount.current;\r\n}\r\n\r\n","import React, { useState, useEffect, useContext } from 'react';\r\nimport Nav from 'react-bootstrap/Nav';\r\nimport { algorithmContext, sysStatusContext, speedContext, animationStatusContext } from '../../../Core';\r\nimport ButtonEvent from '../../TableHelper/ButtonEvent';\r\nimport { stopStatus } from '../../TableHelper/Animation'\r\nimport BFS from '../../../Backend/Algorithms/BFS';\r\nimport DFS from '../../../Backend/Algorithms/DFS';\r\nimport Dijkstra from '../../../Backend/Algorithms/Dijkstra';\r\nimport Dijkstra_old from '../../../Backend/Algorithms/Dijkstra_old';\r\n\r\nconst NavButton = () => {\r\n\r\n    const [buttonName, setButtonName] = useState(\"Visualize !\");\r\n    const [myVariant, setMyVariant] = useState(\"\");\r\n    const algoContext = useContext(algorithmContext);\r\n    const sysStatus = useContext(sysStatusContext);\r\n    const animationStatus = useContext(animationStatusContext);\r\n    const speed = useContext(speedContext);\r\n    const animation = useContext(animationStatusContext)\r\n    const buttonEvent = ButtonEvent();\r\n\r\n    useEffect(() => {\r\n        setMyVariant('buttonEnable');\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (animationStatus.get === \"Algorithm\") {\r\n            var name = \"\";\r\n            switch (algoContext.get) {\r\n                case \"Algorithm_Dijkstra\":\r\n                    name = \"Dijkstra's\";\r\n                    break;\r\n                case 'Algorithm_AStar':\r\n                    name = \"A*\";\r\n                    break;\r\n                case \"Algorithm_Greedy_Best_First\":\r\n                    name = \"Greedy\";\r\n                    break;\r\n                case \"Algorithm_Swarm\":\r\n                    name = \"Swarm\";\r\n                    break;\r\n                case \"Algorithm_Convergent_Swarm\":\r\n                    name = \"Convergent Swarm\";\r\n                    break;\r\n                case \"Algorithm_Bidrectional_Swarm\":\r\n                    name = \"Bidrectional Swarm\";\r\n                    break;\r\n                case \"Algorithm_Breadth_First\":\r\n                    name = \"BFS\";\r\n                    break;\r\n                case \"Algorithm_Depth_First\":\r\n                    name = \"DFS\";\r\n                    break;\r\n                case \"Algorithm_Dijkstra_old\":\r\n                    name = \"Dijkstra's\";\r\n                    break;\r\n                default:\r\n                    name = \"\";\r\n                    break;\r\n            }\r\n        } else if (animationStatus.get === \"Maze\") {\r\n            name = \"Maze\";\r\n        }\r\n        setButtonName(`Visualize ${name}!`);\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [algoContext.get, animationStatus.get])\r\n\r\n    useEffect(() => {\r\n        if (sysStatus.get === 'RUNNING') {\r\n            setMyVariant('buttonDisable');\r\n        } else {\r\n            setMyVariant('buttonEnable');\r\n        }\r\n    }, [sysStatus.get])\r\n\r\n    const callback = (func1, func2) => {\r\n        func1();\r\n        func2();\r\n    }\r\n\r\n    const handler = () => {\r\n        // 改變系統狀態\r\n        if (sysStatus.get === \"RUNNING\") {\r\n            buttonEvent.Start() // 暫停狀態改變在此function內\r\n            return\r\n\r\n        } else if (sysStatus.get === \"STOP\") {\r\n            if (animation.get === \"Maze\") {\r\n                buttonEvent.CreateMaze()\r\n                return\r\n\r\n            } else if (algoContext.get === stopStatus.algorithm) {\r\n                buttonEvent.Start()\r\n                return\r\n\r\n            }\r\n        }\r\n\r\n        if (algoContext.get === \"\") {\r\n            setButtonName(\"Pick an Algorithm\");\r\n        } else {\r\n            callback(\r\n                () => buttonEvent.ClearPath(),\r\n                () => {\r\n                    switch (algoContext.get) {\r\n                        case \"Algorithm_Dijkstra\":\r\n                            Dijkstra(\"Dijkstra\", buttonEvent.Start, speed.get[1]);\r\n                            break;\r\n                        case 'Algorithm_AStar':\r\n                            Dijkstra(\"Astar\", buttonEvent.Start, speed.get[1]);\r\n                            break;\r\n                        case \"Algorithm_Greedy_Best_First\":\r\n                            Dijkstra(\"GreedyBestFirstSearch\", buttonEvent.Start, speed.get[1]);\r\n                            break;\r\n                        case \"Algorithm_Swarm\":\r\n                            Dijkstra(\"Swarm\", buttonEvent.Start, speed.get[1]);\r\n                            break;\r\n                        case \"Algorithm_Convergent_Swarm\":\r\n                            Dijkstra(\"ConvergentSwarm\", buttonEvent.Start, speed.get[1]);\r\n                            break;\r\n                        case \"Algorithm_Bidrectional_Swarm\":\r\n                            Dijkstra(\"BidirectionSwarm\", buttonEvent.Start, speed.get[1]);\r\n                            break;\r\n                        case \"Algorithm_Breadth_First\":\r\n                            BFS(buttonEvent.Start, speed.get[1]);\r\n                            break;\r\n                        case \"Algorithm_Depth_First\":\r\n                            DFS(buttonEvent.Start, speed.get[1]);\r\n                            break;\r\n                        case \"Algorithm_Dijkstra_old\":\r\n                            Dijkstra_old(\"Dijkstra\", buttonEvent.Start, speed.get[1]);\r\n                            break;\r\n                        default:\r\n                            break;\r\n                    }\r\n                }\r\n            )\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Nav.Item>\r\n            <button className={myVariant} onClick={handler}>{buttonName}</button>\r\n        </Nav.Item>\r\n    )\r\n};\r\n\r\nexport default NavButton\r\n","import React, { useState, useContext, useEffect } from 'react';\r\nimport NavDropdown from 'react-bootstrap/NavDropdown';\r\nimport { sysStatusContext } from '../../../Core';\r\nimport { speedContext } from '../../../Core';\r\nimport Colored from '../HeaderHepler/Colored';\r\n\r\nfunction DropdownSpeed() {\r\n    const [title, setTitle] = useState('Average');\r\n    const sysStatus = useContext(sysStatusContext);\r\n    const speed = useContext(speedContext);\r\n    const [className, toggleHandler] = Colored();\r\n\r\n    useEffect(() => {\r\n        setTitle(speed.get[0]);\r\n    }, [speed.get])\r\n\r\n\r\n    const DropdownSpeedHandler = (eventKey) => {\r\n        if (sysStatus.get !== \"IDLE\" && sysStatus.get !== \"STOP\") {\r\n            return;\r\n        }\r\n\r\n        switch (eventKey) {\r\n            case \"Fast\":\r\n                speed.set(\"Fast\");\r\n                break;\r\n            case \"Average\":\r\n                speed.set(\"Average\");\r\n                break;\r\n            case \"Slow\":\r\n                speed.set(\"Slow\");\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <NavDropdown xs={1} title={<span className={className}>Speed: {title}</span>} id=\"DropdownSpeed\" onSelect={DropdownSpeedHandler}\r\n            onMouseEnter={toggleHandler} onMouseLeave={toggleHandler}\r\n        >\r\n            <NavDropdown.Item eventKey=\"Fast\">Fast</NavDropdown.Item>\r\n            <NavDropdown.Item eventKey=\"Average\">Average</NavDropdown.Item>\r\n            <NavDropdown.Item eventKey=\"Slow\">Slow</NavDropdown.Item>\r\n        </NavDropdown>\r\n    )\r\n}\r\n\r\nexport default DropdownSpeed;","import { useState, useContext, useEffect } from 'react';\r\nimport { algorithmContext } from '../../../Core';\r\n\r\nfunction Info() {\r\n\tconst [bannedBomb, setBannedBomb] = useState(\"\");\r\n\tconst [bannedBFSDFS, setBannedBFSDFS] = useState(\"\");\r\n\tconst algoContext = useContext(algorithmContext);\r\n\r\n\tuseEffect(() => {\r\n\t\tif (algoContext.get === \"Algorithm_Bidrectional_Swarm\") {\r\n\t\t\tsetBannedBomb(\"banned\");\r\n\t\t} else {\r\n\t\t\tsetBannedBomb(\"\");\r\n\t\t}\r\n\r\n\t\tif (algoContext.get === \"Algorithm_Breadth_First\" || algoContext.get === \"Algorithm_Depth_First\") {\r\n\t\t\tsetBannedBFSDFS(\"banned\");\r\n\t\t} else {\r\n\t\t\tsetBannedBFSDFS(\"\");\r\n\t\t}\r\n\t}, [algoContext.get])\r\n\r\n\treturn (\r\n\t\t<div id=\"mainInfo\">\r\n\t\t\t<ul>\r\n\t\t\t\t<li> <div className=\"Info-Start-Node\"></div>Start Node </li>\r\n\t\t\t\t<li> <div className=\"Info-End-Node\"></div>Target Node </li>\r\n\t\t\t\t<li className={bannedBomb}> <div className=\"Info-Bomb-Node\"></div>Gas Node </li>\r\n\t\t\t\t<li className={bannedBFSDFS}> <div className=\"Info-Weight-Node\"></div>Weight Node </li>\r\n\t\t\t\t<li> <div className=\"Info-Unvisited-Node\"></div>Unvisited Node </li>\r\n\t\t\t\t<li> <div className=\"Info-Visited-Node\"></div><div className=\"Info-Visited1-Node\"></div>Visited Node </li>\r\n\t\t\t\t<li> <div className=\"Info-ShortestPathNode-Node\"></div>Shortest-Path Node </li>\r\n\t\t\t\t<li> <div className=\"Info-WallNode-Node\"></div>Wall Node </li>\r\n\t\t\t</ul>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Info;","import { useState, useContext, useEffect } from 'react';\r\nimport { algorithmContext, mazeContext, animationStatusContext } from '../../../Core';\r\n\r\nfunction AlgorithmDescriptor() {\r\n    const [algorithmName, setAlgorithmName] = useState('Pick an algorithm and visualize it!');\r\n    const [discription1, setDiscription1] = useState('');\r\n    const [discription2, setDiscription2] = useState('');\r\n    const algoContext = useContext(algorithmContext);\r\n    const animationContext = useContext(animationStatusContext);\r\n    const mContext = useContext(mazeContext);\r\n    const [mazeName, setMazeName] = useState(\"\");\r\n    const [m_discription1, setMDiscription1] = useState('');\r\n\r\n    useEffect(() => {\r\n        var algoName = \"\";\r\n        var d1 = \"\";\r\n        var d2 = \"\";\r\n        switch (algoContext.get) {\r\n            case \"Algorithm_Dijkstra\":\r\n                algoName = \"Dijkstra's Algorithm\";\r\n                d1 = \"weighted\";\r\n                d2 = \"guarantees\";\r\n                break;\r\n            case 'Algorithm_AStar':\r\n                algoName = \"A* Search\";\r\n                d1 = \"weighted\";\r\n                d2 = \"guarantees\";\r\n                break;\r\n            case \"Algorithm_Greedy_Best_First\":\r\n                algoName = \"Greedy Best-first Search\";\r\n                d1 = \"weighted\";\r\n                d2 = \"does not guarantee\";\r\n                break;\r\n            case \"Algorithm_Swarm\":\r\n                algoName = \"Swarm Algorithm\";\r\n                d1 = \"weighted\";\r\n                d2 = \"does not guarantee\";\r\n                break;\r\n            case \"Algorithm_Convergent_Swarm\":\r\n                algoName = \"Convergent Swarm Algorithm\";\r\n                d1 = \"weighted\";\r\n                d2 = \"does not guarantee\";\r\n                break;\r\n            case \"Algorithm_Bidrectional_Swarm\":\r\n                algoName = \"Bidrectional Swarm Algorithm\";\r\n                d1 = \"weighted\";\r\n                d2 = \"does not guarantee\";\r\n                break;\r\n            case \"Algorithm_Breadth_First\":\r\n                algoName = \"Breath-first Search\";\r\n                d1 = \"unweighted\";\r\n                d2 = \"guarantee\";\r\n                break;\r\n            case \"Algorithm_Depth_First\":\r\n                algoName = \"Depth-first Search\";\r\n                d1 = \"unweighted\";\r\n                d2 = \"does not guarantee\";\r\n                break;\r\n            default:\r\n                algoName = \"Pick an algorithm and visualize it!\";\r\n                d1 = \"\";\r\n                d2 = \"\";\r\n                break;\r\n        }\r\n\r\n        setAlgorithmName(algoName);\r\n        setDiscription1(d1);\r\n        setDiscription2(d2);\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [algoContext.get])\r\n\r\n    useEffect(() => {\r\n        var mName = \"\";\r\n        var d1 = \"\";\r\n        switch (mContext.get) {\r\n            case \"Maze_Recursive_Division\":\r\n                mName = \"Recursive Division Maze\";\r\n                d1 = \"\";\r\n                break;\r\n            case \"Maze_Recursive_Division_vertical\":\r\n                mName = \"Recursive Division(Vertical) Maze\";\r\n                d1 = \"\";\r\n                break;\r\n            case \"Maze_Recursive_Division_horizontal\":\r\n                mName = \"Recursive Division(Horizontal) Maze\";\r\n                d1 = \"\";\r\n                break;\r\n            case \"Maze_Basic_Random\":\r\n                mName = \"Basic Random Maze\";\r\n                d1 = \"does not\";\r\n                break;\r\n            case \"Maze_Basic_Weight_Maze\":\r\n                mName = \"Basic Weight Maze\";\r\n                d1 = \"does not\";\r\n                break;\r\n            case \"Maze_Simple_stair_pattern\":\r\n                mName = \"Simple Stait Pattern\";\r\n                d1 = \"does not\";\r\n                break;\r\n            case \"Maze_Binary_Tree\":\r\n                mName = \"Binary Tree Generator\";\r\n                d1 = \"\";\r\n                break;\r\n            case \"Maze_Kruskal\":\r\n                mName = \"Kruskal's Maze\";\r\n                d1 = \"does not\";\r\n                break;\r\n            case \"Maze_Prim\":\r\n                mName = \"Prim's Maze\";\r\n                d1 = \"does not\";\r\n                break;\r\n            case \"Maze_Eller\":\r\n                mName = \"Eller's Maze\";\r\n                d1 = \"\";\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        setMazeName(mName);\r\n        setMDiscription1(d1);\r\n    }, [mContext.get])\r\n\r\n    if (algoContext.get === \"\" && animationContext.get === \"Algorithm\") {\r\n        return (\r\n            <div id=\"algorithmDescriptor\">\r\n                {algorithmName}\r\n            </div>\r\n        )\r\n    } else {\r\n        if (animationContext.get === \"Maze\") {\r\n            return (\r\n                <div id=\"algorithmDescriptor\">\r\n                    <b>{mazeName}</b> <i>{m_discription1} guarantees</i> perfect maze!\r\n                </div>\r\n            )\r\n        } else if (animationContext.get === \"Algorithm\") {\r\n            return (\r\n                <div id=\"algorithmDescriptor\">\r\n                    <b>{algorithmName}</b> is <i>{discription1}</i> and <i>{discription2}</i> the shortest path!\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport default AlgorithmDescriptor;","import React, { useState } from 'react';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport Button from 'react-bootstrap/Button';\r\nimport data from '../../../Resources/Data/Modalnfo.json';\r\nimport BootstrapSwitchButton from 'bootstrap-switch-button-react'\r\n\r\nfunction IntroductionModal() {\r\n    const [pages, setPages] = useState(1);\r\n    const [show, setShow] = useState(true);\r\n    const [language, setLanguage] = useState(0);\r\n    const [checked, setChecked] = useState(true);\r\n    const maxPages = data.length;\r\n\r\n    const HandlePrevious = () => {\r\n        setPages(prePage => prePage - 1 >= 1 ? prePage - 1 : prePage);\r\n    }\r\n\r\n    const HandleNext = () => {\r\n        if (pages + 1 > maxPages) {\r\n            setShow(false);\r\n            return;\r\n        }\r\n        setPages(prePage => prePage + 1 <= maxPages ? prePage + 1 : prePage);\r\n    }\r\n\r\n    return (\r\n        <Modal show={show} size='xl' backdrop=\"static\" centered dialogClassName=\"Modal\">\r\n            <div className=\"ml-auto Modal-Page\">{`${pages}/${maxPages}`}</div>\r\n            <div className=\"Modal-Title\">{data[pages - 1][\"Title\"][language]}</div>\r\n\r\n            <Modal.Body className=\"Modal-Body\">\r\n                <p className=\"Modal-BodyText\">{data[pages - 1][\"Dialog\"][language]}</p>\r\n                <p className=\"Modal-BodyText1\">{data[pages - 1][\"Body\"][language]}</p>\r\n                {pages === 1 ? <div className=\"Logo\"></div> : null}\r\n                {pages === 2 ? <div className=\"ShortestPath\"></div> : null}\r\n                {pages === 3 ? <div className=\"Algorithm\"></div> : null}\r\n                {pages === 4 ? <div className=\"Maze\"></div> : null}\r\n                {pages === 5 ? <div className=\"WallWeight\"></div> : null}\r\n                {pages === 6 ? <div className=\"WeightValue\"></div> : null}\r\n                {pages === 7 ? <div className=\"AddBomb\"></div> : null}\r\n                {pages === 8 ? <div className=\"StartDrag\"></div> : null}\r\n                {pages === 9 ? <div className=\"Other\"></div> : null}\r\n                {pages === 10 ? (language === 1 ? <p className=\"Modal-BodyText1\">本專案由 <a href=\"https://github.com/novayo\">novayo</a> 及 <a href=\"https://github.com/ChengTsungPao\">ChengTsungPao</a> 共同製作</p> : <p className=\"Modal-BodyText1\">This application made by <a href=\"https://github.com/novayo\">novayo</a> and <a href=\"https://github.com/ChengTsungPao\">ChengTsungPao</a>.</p>) : null}\r\n            </Modal.Body>\r\n\r\n            <Modal.Footer>\r\n                <Button className=\"mr-auto Model-Button-success\" variant='outline-success' size=\"md\" onClick={() => setShow(false)}>Skip Tutorial</Button>\r\n                <BootstrapSwitchButton\r\n                    checked={checked}\r\n                    onlabel='En'\r\n                    onstyle='outline-info'\r\n                    offlabel='Ch'\r\n                    offstyle='outline-success'\r\n                    size=\"md\" // eslint-disable-next-line \r\n                    style='mr-auto' // 這裡會有怪怪的warning，所以加上上面的註解去除warning\r\n                    onChange={(checked) => {\r\n                        if (checked) {\r\n                            setLanguage(0);\r\n                        } else {\r\n                            setLanguage(1);\r\n                        }\r\n                        setChecked(pre => !pre);\r\n                    }}\r\n                />\r\n                <Button className=\"Model-Button-danger\" variant='outline-danger' size=\"md\" onClick={() => HandlePrevious()}>Previous</Button>\r\n                <Button className=\"Model-Button-success\" variant='outline-success' size=\"md\" onClick={() => HandleNext()}>Next</Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default IntroductionModal\r\n","import React, { useState } from 'react'\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport emailjs from 'emailjs-com';\r\n\r\n// emailjs: https://dashboard.emailjs.com/admin/templates/57jjeff\r\nfunction Email() {\r\n    const [show, setShow] = useState(false);\r\n    const handleClose = () => setShow(false);\r\n    const handleShow = () => setShow(true);\r\n\r\n    function SendEmail(e) {\r\n        e.preventDefault();\r\n        console.log(e.target)\r\n        emailjs.sendForm('PathFinding', 'template_642ox18', e.target, 'user_ukZuD8qr4KxKtc2jHeC1M')\r\n            .then((result) => {\r\n                console.log(result.text);\r\n            }, (error) => {\r\n                console.log(error.text);\r\n            });\r\n        handleClose();\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div id=\"container-floating\">\r\n                <div id=\"floating-button\" data-toggle=\"tooltip\" data-placement=\"left\" data-original-title=\"Create\" onClick={handleShow}>\r\n                    <img className=\"edit\" src=\"https://i.imgur.com/1vyJaJF.png\" alt=\"\" />\r\n                </div>\r\n            </div>\r\n\r\n            {/* Form Style 4: https://www.sanwebe.com/2014/08/css-html-forms-designs */}\r\n            <Modal show={show} size='md' onHide={handleClose} centered dialogClassName=\"Modal1\">\r\n                <form className=\"form-style-4\" onSubmit={SendEmail}>\r\n                    <label htmlFor=\"field1\">\r\n                        <span>Enter Your Name</span><input type=\"text\" name=\"from_name\" required />\r\n                    </label>\r\n                    <label htmlFor=\"field2\">\r\n                        <span>Email Address</span><input type=\"email\" name=\"user_email\" required />\r\n                    </label>\r\n                    <label htmlFor=\"field4\">\r\n                        <span>Message to Us</span><textarea name=\"message\" required></textarea>\r\n                    </label>\r\n                    <label>\r\n                        <span> </span><input type=\"submit\" value=\"Send Letter\" />\r\n                    </label>\r\n                </form>\r\n            </Modal>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Email\r\n","import React from 'react';\r\nimport Nav from 'react-bootstrap/Nav';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport Logo from '../Elements/Logo';\r\nimport DropdownAlgorithm from '../Elements/DropdownAlgorithm';\r\nimport DropdownMaze from '../Elements/DropdownMaze';\r\nimport NavLink from '../Elements/NavLink';\r\nimport NavAddBomb from '../Elements/NavAddBomb';\r\nimport NavButton from '../Elements/NavButton';\r\nimport DropdownSpeed from '../Elements/DropdownSpeed';\r\nimport ButtonEvent from '../../TableHelper/ButtonEvent';\r\nimport Info from '../Elements/Info';\r\nimport AlgorithmDescriptor from '../Elements/AlgorithmDescriptor';\r\nimport IntroductionModal from '../Elements/IntroductionModal';\r\nimport Email from '../Elements/Email';\r\n\r\nfunction PC() {\r\n    const buttonEvent = ButtonEvent()\r\n\r\n    return (\r\n        <>\r\n            <IntroductionModal />\r\n            <Navbar collapseOnSelect expand=\"xl\" className=\"navbar\">\r\n                <Logo />\r\n                <Navbar.Toggle aria-controls=\"Collapse\" />\r\n                <Navbar.Collapse id=\"Collapse\" className='nvbar-collapse'>\r\n                    <Nav className=\"nav-bar\">\r\n                        <DropdownAlgorithm />\r\n                        <DropdownMaze />\r\n                        <NavAddBomb names={[\"Add Gas\", \"Remove Gas\"]} handlers={[buttonEvent.Addbomb, buttonEvent.RemoveBomb]} />\r\n                        <NavButton />\r\n                        <NavLink names={[\"Clear Board\"]} handlers={[buttonEvent.ClearBoard]} />\r\n                        <NavLink names={[\"Clear Walls & Weights\"]} handlers={[buttonEvent.ClearWalls]} />\r\n                        <NavLink names={[\"Clear Path\"]} handlers={[buttonEvent.ClearPath]} />\r\n                        <DropdownSpeed />\r\n                    </Nav>\r\n                </Navbar.Collapse>\r\n            </Navbar>\r\n            <Info />\r\n            <AlgorithmDescriptor />\r\n            <Email />\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default PC\r\n","import React from 'react';\r\nimport Nav from 'react-bootstrap/Nav';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport Logo from '../Elements/Logo';\r\nimport DropdownAlgorithm from '../Elements/DropdownAlgorithm';\r\nimport DropdownMaze from '../Elements/DropdownMaze';\r\nimport NavLink from '../Elements/NavLink';\r\nimport NavAddBomb from '../Elements/NavAddBomb';\r\nimport NavButton from '../Elements/NavButton';\r\nimport DropdownSpeed from '../Elements/DropdownSpeed';\r\nimport ButtonEvent from '../../TableHelper/ButtonEvent';\r\nimport AlgorithmDescriptor from '../Elements/AlgorithmDescriptor';\r\nimport IntroductionModal from '../Elements/IntroductionModal';\r\n// import Email from '../Elements/Email';\r\n\r\nfunction Mobile() {\r\n    const buttonEvent = ButtonEvent()\r\n\r\n    return (\r\n        <>\r\n            <IntroductionModal />\r\n            <Navbar collapseOnSelect expand=\"xl\" className=\"navbar\">\r\n                <Logo />\r\n                <Navbar.Toggle aria-controls=\"Collapse\" />\r\n                <Navbar.Collapse id=\"Collapse\" className='navbar-collapse'>\r\n                    <Nav className=\"nav-bar\">\r\n                        <DropdownAlgorithm />\r\n                        <DropdownMaze />\r\n                        <NavAddBomb names={[\"Add Gas\", \"Remove Gas\"]} handlers={[buttonEvent.Addbomb, buttonEvent.RemoveBomb]} />\r\n                        <NavLink names={[\"Clear Board\"]} handlers={[buttonEvent.ClearBoard]} />\r\n                        <NavLink names={[\"Clear Walls & Weights\"]} handlers={[buttonEvent.ClearWalls]} />\r\n                        <NavLink names={[\"Clear Path\"]} handlers={[buttonEvent.ClearPath]} />\r\n                        <DropdownSpeed />\r\n                    </Nav>\r\n                </Navbar.Collapse>\r\n            </Navbar>\r\n            <NavButton />\r\n            <AlgorithmDescriptor />\r\n            {/* <Email /> */}\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default Mobile\r\n","import PC from './HeaderHelper/HeaderHepler/PC';\r\nimport Mobile from './HeaderHelper/HeaderHepler/Mobile';\r\n\r\nfunction Header() {\r\n\r\n    if (navigator.userAgent.match(/Mobile/i)) {\r\n        import('./HeaderHelper/Css/Mobile.css');\r\n        return (\r\n            <Mobile />\r\n        )\r\n    } else {\r\n        import('./HeaderHelper/Css/PC.css');\r\n        return (\r\n            <PC />\r\n        )\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\nexport default Header\r\n","\r\nexport function RestrictComp(algorithm){ // 各種algorithm在wall、weight、bomb的限制\r\n\r\n    switch (algorithm.get) {\r\n        case \"Algorithm_Dijkstra\":\r\n            return { wall: true, weight: true, bomb: true }\r\n        case \"Algorithm_AStar\":\r\n            return { wall: true, weight: true, bomb: true }\r\n        case \"Algorithm_Greedy_Best_First\":\r\n            return { wall: true, weight: true, bomb: true }\r\n        case \"Algorithm_Swarm\":\r\n            return { wall: true, weight: true, bomb: true }\r\n        case \"Algorithm_Convergent_Swarm\":\r\n            return { wall: true, weight: true, bomb: true }\r\n        case \"Algorithm_Bidrectional_Swarm\":\r\n            return { wall: true, weight: true, bomb: false }\r\n        case \"Algorithm_Breadth_First\":\r\n            return { wall: true, weight: false, bomb: true }\r\n        case \"Algorithm_Depth_First\":\r\n            return { wall: true, weight: false, bomb: true }\r\n        default:\r\n            return { wall: true, weight: true, bomb: true }\r\n    }   \r\n}","import { componentKind, keyboardSupport, weightValueRange } from './TableIndex'\r\nimport { position } from '../../Core/index'\r\nimport { RestrictComp } from './RestrictComp'\r\n\r\n\r\nexport function KeyboardEvent(event, algorithm, weightValue = null) {\r\n    // console.log(\"KeyboardEvent\")\r\n\r\n    if(RestrictComp(algorithm).weight === false){ // 檢查algorithm是否能新增或增加weight\r\n        if(weightValue != null){\r\n            componentKind.add = false\r\n            keyboardSupport.down = false\r\n        }else{\r\n            componentKind.add = componentKind.wall\r\n            keyboardSupport.down = true\r\n        }\r\n        return\r\n    \r\n    }\r\n\r\n    if(event.key === keyboardSupport.w){ // 新增weight只是更改componentKind.add\r\n        if(componentKind.add === componentKind.wall){\r\n            componentKind.add = componentKind.weight\r\n            keyboardSupport.down = false\r\n        }else{\r\n            componentKind.add = componentKind.wall\r\n            keyboardSupport.down = true\r\n        }\r\n\r\n    }else if(event.key === keyboardSupport.plus && position.weightValue + weightValueRange.increase <= weightValueRange.max){ // 限制weightValueRange\r\n        if(weightValue != null){\r\n            weightValue.set(\"+\")\r\n            keyboardSupport.down = false\r\n        }else{\r\n            keyboardSupport.down = true\r\n        }\r\n\r\n    }else if(event.key === keyboardSupport.sub && position.weightValue - weightValueRange.increase >= weightValueRange.min){ // 限制weightValueRange\r\n        if(weightValue != null){\r\n            weightValue.set(\"-\")\r\n            keyboardSupport.down = false\r\n        }else{\r\n            keyboardSupport.down = true\r\n        }\r\n\r\n    }else if(event.key === keyboardSupport.plus || event.key === keyboardSupport.sub){ // 若weightValue = Max or Min時，利用若weightValue = true and false切換讓weightModal出現\r\n        if(weightValue != null){\r\n            weightValue.set(!weightValue.get.status)\r\n            keyboardSupport.down = false\r\n        }else{\r\n            keyboardSupport.down = true\r\n        }\r\n    }\r\n\r\n    // console.log(position.weightValue)\r\n\r\n}\r\n","import { useContext, useEffect } from 'react'\r\nimport { sysStatusContext, algorithmContext, speedContext, animationStatusContext } from '../../Core/index'\r\nimport { tableVar, touchContext, moveContext, updateContext, weightValueContext, componentKind, keyboardSupport, synchronize } from './TableIndex'\r\nimport { setTable } from './SetTable'\r\nimport { UpdateTable } from './UpdateTable'\r\nimport { WhichComponent } from './WhichComp'\r\nimport { KeyboardEvent } from './KeyboardEvent'\r\nimport ButtonEvent from './ButtonEvent'\r\n\r\n\r\nfunction MouseEvent() {\r\n    const [touch, move, update, weightValue, animation] = [useContext(touchContext), useContext(moveContext), useContext(updateContext), useContext(weightValueContext), useContext(animationStatusContext)]\r\n    const [algorithm, speed, sysStatus] = [useContext(algorithmContext), useContext(speedContext), useContext(sysStatusContext)]\r\n    const buttonEvent = ButtonEvent()\r\n\r\n    useEffect(() => { // 因為第一次 addEventListener algorithm.get sysStatus.get 會是空白\r\n        synchronize.algorithm = algorithm\r\n        synchronize.sysStatus = sysStatus\r\n        // eslint-disable-next-line\r\n    }, [algorithm.get, sysStatus.get])\r\n\r\n    document.addEventListener('keydown', function(event) {\r\n        if(synchronize.sysStatus.get !== \"IDLE\" && synchronize.sysStatus.get !== \"STOP\"){ // sysStatus = \"IDLE\" & \"STOP\" lock keyboard\r\n            return\r\n        }\r\n        if(keyboardSupport.down){ // 避免連續觸發\r\n            KeyboardEvent(event, synchronize.algorithm, weightValue)\r\n        }\r\n    })\r\n    document.addEventListener('keyup', function(event) {\r\n        if(keyboardSupport.down === false){\r\n            KeyboardEvent(event, synchronize.algorithm)\r\n        }\r\n    })\r\n    document.addEventListener('mouseup', () => move.set(\"\"));\r\n\r\n    const CheckStopStatus = () => { // 當 sysStatus = \"STOP\" 時，Algorithm ==> ClearWalls & Maze ==> ClearPath\r\n        if (sysStatus.get === \"STOP\"){\r\n            if(animation.get === \"Maze\"){\r\n                buttonEvent.ClearWalls(false) // false 避免形成遞迴\r\n                animation.set(\"Algorithm\")\r\n            } else {\r\n                buttonEvent.ClearPath()\r\n            }\r\n            sysStatus.set(\"IDLE\")\r\n        }\r\n    }\r\n\r\n    const MouseDownHandler = (e) => {\r\n        // console.log(\"MouseDownHandler \" + e.target.id)\r\n\r\n        if ((sysStatus.get !== \"IDLE\" && sysStatus.get !== \"STOP\") || componentKind.add === false) { // sysStatus = \"IDLE\" & \"STOP\" lock Mouse\r\n            return\r\n        }\r\n\r\n        e.preventDefault()\r\n\r\n        tableVar.id = parseInt(e.target.id)\r\n        const whichComponent = WhichComponent(tableVar.id, touch)\r\n\r\n        if(whichComponent.type){ // 若是新增 wall weight 須立即新增\r\n            CheckStopStatus()\r\n            setTable(tableVar.id, whichComponent.rKind, true)\r\n            move.set(componentKind.add)\r\n\r\n        }else{\r\n            move.set(whichComponent.kind)\r\n        }\r\n        \r\n        if(update.get){\r\n            UpdateTable(buttonEvent.Start, buttonEvent.ClearPath, algorithm, speed)\r\n        }\r\n    }\r\n\r\n    const MouseUpHandler = (e) => {\r\n        // console.log(\"MouseUpHandler \" + e.target.id)\r\n\r\n        if ((sysStatus.get !== \"IDLE\" && sysStatus.get !== \"STOP\") || componentKind.add === false) { // sysStatus = \"IDLE\" & \"STOP\" lock Mouse\r\n            return\r\n        }\r\n\r\n        move.set(\"\")\r\n    }\r\n\r\n    const OnMouseEnterHanlder = (e) => {\r\n        // console.log(\"OnMouseEnterHanlder \" + e.target.id)\r\n\r\n        if ((sysStatus.get !== \"IDLE\" && sysStatus.get !== \"STOP\") || componentKind.add === false) { // sysStatus = \"IDLE\" & \"STOP\" lock Mouse\r\n            return\r\n        }\r\n\r\n        tableVar.newId = parseInt(e.target.id)\r\n        const whichOldComponent = WhichComponent(tableVar.id, touch)\r\n        const whichNewComponent = WhichComponent(tableVar.newId, touch)\r\n\r\n        if(move.get === componentKind.add && whichNewComponent.type && tableVar.id !== tableVar.newId){ // 若是新增 wall weight，不須清除舊id的物件\r\n            setTable(tableVar.newId, whichNewComponent.rKind, true)\r\n            tableVar.id = parseInt(tableVar.newId)\r\n            CheckStopStatus()\r\n\r\n        }else if(move.get !== componentKind.add && move.get !== \"\" && whichNewComponent.type){\r\n            setTable(tableVar.id, whichOldComponent.touch, true)\r\n            touch.set({componentKind: whichOldComponent.kind, under: whichNewComponent.kind})\r\n            setTable(tableVar.newId, whichOldComponent.kind, true)\r\n            tableVar.id = parseInt(tableVar.newId)\r\n            CheckStopStatus()\r\n        }\r\n\r\n        if(update.get && move.get !== \"\"){ // 若 update = true 直接重新 UpdateTable\r\n            UpdateTable(buttonEvent.Start, buttonEvent.ClearPath, algorithm, speed)\r\n        }\r\n    }\r\n\r\n    return {MouseDownHandler, MouseUpHandler, OnMouseEnterHanlder}\r\n\r\n}\r\n\r\nexport default MouseEvent","import { useEffect } from 'react'\r\nimport MouseEvent from './MouseEvent'\r\nimport { tableVar, componentKind, originPos } from './TableIndex'\r\n\r\nfunction TableUI() {\r\n    const [rowSize, colSize, size] = [tableVar.rowSize, tableVar.colSize, tableVar.size]\r\n\r\n    const row = Array.from(Array(rowSize).keys())\r\n    const col = Array.from(Array(colSize).keys())\r\n\r\n    const mouesEvent = MouseEvent()\r\n    const [MouseDownHandler, MouseUpHandler, OnMouseEnterHanlder] = [mouesEvent.MouseDownHandler, mouesEvent.MouseUpHandler, mouesEvent.OnMouseEnterHanlder]\r\n\r\n    const createTable = row.map((rowIndex, index) => {\r\n        return (\r\n            <tr key={index} height={size}>\r\n                {col.map((colIndex, index) => {\r\n                    // console.log(rowIndex + \" \" + colIndex)\r\n                    return (\r\n                        <td id={rowIndex * colSize + colIndex} key={index} className={componentKind.background} width={size} onMouseUp={MouseUpHandler} onMouseDown={MouseDownHandler} onMouseEnter={OnMouseEnterHanlder}>\r\n                            {}\r\n                        </td>)\r\n                }\r\n                )\r\n                }\r\n            </tr>)\r\n    }\r\n    )\r\n\r\n    useEffect(() => {\r\n        document.getElementById((originPos.origin_start[0] * tableVar.colSize + originPos.origin_start[1]).toString()).className = componentKind.start\r\n        document.getElementById((originPos.origin_end[0] * tableVar.colSize + originPos.origin_end[1]).toString()).className = componentKind.end\r\n    }, [])\r\n\r\n\r\n    return (\r\n        <div className=\"tablePadding\">\r\n            <table id=\"board\" className=\"board\" align=\"center\" border=\"1\" cellSpacing=\"0\">\r\n                <tbody>\r\n                    {createTable}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TableUI\r\n","import { useEffect, useContext, useState } from 'react'\r\nimport { weightValueContext, updateContext, weightValueRange } from './TableIndex'\r\nimport { algorithmContext, speedContext, position } from '../../Core/index'\r\nimport { UpdateTable } from './UpdateTable'\r\nimport ButtonEvent from './ButtonEvent'\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\nimport ProgressBar from 'react-bootstrap/ProgressBar';\r\n\r\n\r\nfunction WeightModal() {\r\n    // console.log(\"WeightModal\")\r\n    const [weightValue, update, algorithm, speed] = [useContext(weightValueContext), useContext(updateContext), useContext(algorithmContext), useContext(speedContext)]\r\n    const [initShow, setInitShow] = useState(false)\r\n    const [show, setShow] = useState(0)\r\n    const buttonEvent = ButtonEvent()\r\n    \r\n    useEffect(() => {\r\n        if(initShow){ // 一開始不能show weightModal\r\n            setShow(show => show + 1) // show為waiting的人數\r\n            setTimeout(() => {\r\n                setShow(show => {\r\n                    if(show === 0){\r\n                        return 0\r\n                    }else{\r\n                        return show - 1\r\n                    }\r\n                })\r\n            }, weightValueRange.waiting)\r\n\r\n        }\r\n        setInitShow(true)\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [weightValue.get])\r\n\r\n    useEffect(() => {\r\n        if(show === 0 && update.get && Object.keys(position.weight).length !== 0){\r\n            UpdateTable(buttonEvent.Start, buttonEvent.ClearPath, algorithm, speed)\r\n        }\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [show])\r\n\r\n    const handleClose = () => {\r\n        setShow(0)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Modal show = {show > 0} size = \"sm\" onHide = {handleClose} dialogClassName = \"weightModal\">\r\n                <Modal.Body>\r\n                    <Row>\r\n                        <Col xs = {1}><div className = \"weightImage\"/></Col>\r\n                        <Col><ProgressBar className = \"progress\" now={weightValue.get.value} label={weightValue.get.value} min = {weightValueRange.min} max = {weightValueRange.max} /></Col>\r\n                    </Row>    \r\n                </Modal.Body>\r\n            </Modal>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default WeightModal\r\n","import TableUI from './TableHelper/TableUI';\r\nimport { useContext, useEffect } from 'react';\r\nimport Spinner from 'react-bootstrap/Spinner';\r\nimport { sysStatusContext } from '../Core';\r\nimport WeightModal from './TableHelper/WeightModal';\r\n\r\nfunction Table() {  \r\n\tconst sysStatus = useContext(sysStatusContext);\r\n\r\n\tuseEffect(()=>{\r\n\t\tsetTimeout(()=>{sysStatus.set(\"IDLE\");}, 1000);\r\n\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\r\n\t}, [])\r\n\t\r\n\r\n\tif (sysStatus.get === \"LOADING\"){\r\n\t\treturn (<Spinner animation=\"border\" variant=\"warning\" />);\r\n\t}\r\n\telse{\r\n\t\treturn (\r\n\t        <div id = \"UI\">\r\n\t            <TableUI/>\r\n\t\t\t\t<WeightModal />\r\n\t        </div>\r\n\t    )\r\n\t}\r\n}\r\n\r\nexport default Table\r\n","import './App.scss';\r\nimport { useReducer } from 'react';\r\nimport Header from './Frontend/Header';\r\nimport { algorithmReducer, initialAlgorithm, algorithmContext } from './Core';\r\nimport { sysStatusReducer, initialsysStatus, sysStatusContext } from './Core';\r\nimport { bombContext, bombInitial, bombReducer } from './Core';\r\nimport { speedContext, speedInitial, speedReducer } from './Core';\r\nimport { animationStatusContext, animationStatusInitial, animationStatusReducer } from './Core';\r\nimport { mazeContext, initialMaze, mazeReducer } from './Core';\r\nimport Table from './Frontend/Table';\r\nimport { touchReducer, touchInitial, touchContext } from './Frontend/TableHelper/TableIndex';\r\nimport { moveReducer, moveInitial, moveContext } from './Frontend/TableHelper/TableIndex';\r\nimport { weightValueReducer, weightValueInitial, weightValueContext } from './Frontend/TableHelper/TableIndex';\r\nimport { updateReducer, updateInitial, updateContext } from './Frontend/TableHelper/TableIndex';\r\n\r\nfunction App() {\r\n  const [curAlgorithm, setCurAlgorithm] = useReducer(algorithmReducer, initialAlgorithm);\r\n  const [curSysStatus, setCurSysStatus] = useReducer(sysStatusReducer, initialsysStatus);\r\n  const [curBomb, setCurBomb] = useReducer(bombReducer, bombInitial);\r\n  const [curSpeed, setCurSpeed] = useReducer(speedReducer, speedInitial);\r\n  const [touch, setTouch] = useReducer(touchReducer, touchInitial)\r\n  const [move, setMove] = useReducer(moveReducer, moveInitial)\r\n  const [update, setUpdate] = useReducer(updateReducer, updateInitial)\r\n  const [weightValue, setWeightValue] = useReducer(weightValueReducer, weightValueInitial)\r\n  const [animation, setAnimation] = useReducer(animationStatusReducer, animationStatusInitial)\r\n  const [maze, setMaze] = useReducer(mazeReducer, initialMaze);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <mazeContext.Provider value={{ get: maze, set: setMaze }}>\r\n        <animationStatusContext.Provider value={{ get: animation, set: setAnimation }}>\r\n          <weightValueContext.Provider value={{ get: weightValue, set: setWeightValue }}>\r\n            <updateContext.Provider value={{ get: update, set: setUpdate }}>\r\n              <moveContext.Provider value={{ get: move, set: setMove }}>\r\n                <touchContext.Provider value={{ get: touch, set: setTouch }}>\r\n                  <speedContext.Provider value={{ get: curSpeed, set: setCurSpeed }}>\r\n                    <bombContext.Provider value={{ get: curBomb, set: setCurBomb }}>\r\n                      <sysStatusContext.Provider value={{ get: curSysStatus, set: setCurSysStatus }}>\r\n                        <algorithmContext.Provider value={{ get: curAlgorithm, set: setCurAlgorithm }}>\r\n                          <Header />\r\n                          <Table />\r\n                        </algorithmContext.Provider>\r\n                      </sysStatusContext.Provider>\r\n                    </bombContext.Provider>\r\n                  </speedContext.Provider>\r\n                </touchContext.Provider>\r\n              </moveContext.Provider>\r\n            </updateContext.Provider>\r\n          </weightValueContext.Provider>\r\n        </animationStatusContext.Provider>\r\n      </mazeContext.Provider>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(\r\n  // <React.StrictMode>\r\n  <App />,\r\n  // </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}